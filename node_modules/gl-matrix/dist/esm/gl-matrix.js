// glMatrix - v4.0.0-beta.1
var oe=Object.defineProperty;var xe=(D,e,t)=>e in D?oe(D,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):D[e]=t;var P=(D,e,t)=>(xe(D,typeof e!="symbol"?e+"":e,t),t);var ye=new Float32Array([1,0,0,1]),$=class extends Float32Array{constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:let t=e[0];typeof t=="number"?super([t,t,t,t]):super(t,0,4);break;default:super(ye);break}}get str(){return $.str(this)}copy(e){return this.set(e),this}identity(){return this.set(ye),this}multiply(e){return $.multiply(this,this,e)}mul(e){return this}transpose(){return $.transpose(this,this)}invert(){return $.invert(this,this)}scale(e){return $.scale(this,this,e)}rotate(e){return $.rotate(this,this,e)}static create(){return new $}static clone(e){return new $(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static fromValues(...e){return new $(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e}static transpose(e,t){if(e===t){let n=t[1];e[1]=t[2],e[2]=n}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e}static invert(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=n*s-a*r;return i?(i=1/i,e[0]=s*i,e[1]=-r*i,e[2]=-a*i,e[3]=n*i,e):null}static adjoint(e,t){let n=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=n,e}static determinant(e){return e[0]*e[3]-e[2]*e[1]}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}static sub(e,t,n){return e}static multiply(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=n[0],y=n[1],L=n[2],k=n[3];return e[0]=r*c+s*y,e[1]=a*c+i*y,e[2]=r*L+s*k,e[3]=a*L+i*k,e}static mul(e,t,n){return e}static rotate(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=Math.sin(n),y=Math.cos(n);return e[0]=r*y+s*c,e[1]=a*y+i*c,e[2]=r*-c+s*y,e[3]=a*-c+i*y,e}static scale(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=n[0],y=n[1];return e[0]=r*c,e[1]=a*c,e[2]=s*y,e[3]=i*y,e}static fromRotation(e,t){let n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=-n,e[3]=r,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3])}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static multiplyScalarAndAdd(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e}static LDU(e,t,n,r){return e[2]=r[2]/r[0],n[0]=r[0],n[1]=r[1],n[3]=r[3]-e[2]*n[1],[e,t,n]}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}static equals(e,t){let n=e[0],r=e[1],a=e[2],s=e[3],i=t[0],c=t[1],y=t[2],L=t[3];return Math.abs(n-i)<=1e-6*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(r-c)<=1e-6*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(a-y)<=1e-6*Math.max(1,Math.abs(a),Math.abs(y))&&Math.abs(s-L)<=1e-6*Math.max(1,Math.abs(s),Math.abs(L))}static str(e){return`Mat2(${e.join(", ")})`}},C=$;P(C,"BYTE_LENGTH",4*Float32Array.BYTES_PER_ELEMENT);C.prototype.mul=C.prototype.multiply;C.mul=C.multiply;C.sub=C.subtract;var Re=C;var Le=new Float32Array([1,0,0,1,0,0]),J=class extends Float32Array{constructor(...e){switch(e.length){case 6:super(e);break;case 2:super(e[0],e[1],6);break;case 1:let t=e[0];typeof t=="number"?super([t,t,t,t,t,t]):super(t,0,6);break;default:super(Le);break}}get str(){return J.str(this)}copy(e){return this.set(e),this}identity(){return this.set(Le),this}multiply(e){return J.multiply(this,this,e)}mul(e){return this}translate(e){return J.translate(this,this,e)}rotate(e){return J.rotate(this,this,e)}scale(e){return J.scale(this,this,e)}static create(){return new J}static clone(e){return new J(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}static fromValues(...e){return new J(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e}static invert(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=t[4],c=t[5],y=n*s-r*a;return y?(y=1/y,e[0]=s*y,e[1]=-r*y,e[2]=-a*y,e[3]=n*y,e[4]=(a*c-s*i)*y,e[5]=(r*i-n*c)*y,e):null}static determinant(e){return e[0]*e[3]-e[1]*e[2]}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e}static sub(e,t,n){return e}static multiply(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=t[4],y=t[5],L=n[0],k=n[1],d=n[2],M=n[3],l=n[4],b=n[5];return e[0]=r*L+s*k,e[1]=a*L+i*k,e[2]=r*d+s*M,e[3]=a*d+i*M,e[4]=r*l+s*b+c,e[5]=a*l+i*b+y,e}static mul(e,t,n){return e}static translate(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=t[4],y=t[5],L=n[0],k=n[1];return e[0]=r,e[1]=a,e[2]=s,e[3]=i,e[4]=r*L+s*k+c,e[5]=a*L+i*k+y,e}static rotate(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=t[4],y=t[5],L=Math.sin(n),k=Math.cos(n);return e[0]=r*k+s*L,e[1]=a*k+i*L,e[2]=r*-L+s*k,e[3]=a*-L+i*k,e[4]=c,e[5]=y,e}static scale(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=t[4],y=t[5],L=n[0],k=n[1];return e[0]=r*L,e[1]=a*L,e[2]=s*k,e[3]=i*k,e[4]=c,e[5]=y,e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0],e[5]=t[1],e}static fromRotation(e,t){let n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=-n,e[3]=r,e[4]=0,e[5]=0,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e[4]=0,e[5]=0,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+1)}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e}static multiplyScalarAndAdd(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e[4]=t[4]+n[4]*r,e[5]=t[5]+n[5]*r,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]}static equals(e,t){let n=e[0],r=e[1],a=e[2],s=e[3],i=e[4],c=e[5],y=t[0],L=t[1],k=t[2],d=t[3],M=t[4],l=t[5];return Math.abs(n-y)<=1e-6*Math.max(1,Math.abs(n),Math.abs(y))&&Math.abs(r-L)<=1e-6*Math.max(1,Math.abs(r),Math.abs(L))&&Math.abs(a-k)<=1e-6*Math.max(1,Math.abs(a),Math.abs(k))&&Math.abs(s-d)<=1e-6*Math.max(1,Math.abs(s),Math.abs(d))&&Math.abs(i-M)<=1e-6*Math.max(1,Math.abs(i),Math.abs(M))&&Math.abs(c-l)<=1e-6*Math.max(1,Math.abs(c),Math.abs(l))}static str(e){return`Mat2d(${e.join(", ")})`}},v=J;P(v,"BYTE_LENGTH",6*Float32Array.BYTES_PER_ELEMENT);v.mul=v.multiply;v.sub=v.subtract;var Ve=v;var ke=new Float32Array([1,0,0,0,1,0,0,0,1]),G=class extends Float32Array{constructor(...e){switch(e.length){case 9:super(e);break;case 2:super(e[0],e[1],9);break;case 1:let t=e[0];typeof t=="number"?super([t,t,t,t,t,t,t,t,t]):super(t,0,9);break;default:super(ke);break}}get str(){return G.str(this)}copy(e){return this.set(e),this}identity(){return this.set(ke),this}multiply(e){return G.multiply(this,this,e)}mul(e){return this}transpose(){return G.transpose(this,this)}invert(){return G.invert(this,this)}translate(e){return G.translate(this,this,e)}rotate(e){return G.rotate(this,this,e)}scale(e){return G.scale(this,this,e)}static create(){return new G}static clone(e){return new G(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static fromValues(...e){return new G(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static transpose(e,t){if(e===t){let n=t[1],r=t[2],a=t[5];e[1]=t[3],e[2]=t[6],e[3]=n,e[5]=t[7],e[6]=r,e[7]=a}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}static invert(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=t[4],c=t[5],y=t[6],L=t[7],k=t[8],d=k*i-c*L,M=-k*s+c*y,l=L*s-i*y,b=n*d+r*M+a*l;return b?(b=1/b,e[0]=d*b,e[1]=(-k*r+a*L)*b,e[2]=(c*r-a*i)*b,e[3]=M*b,e[4]=(k*n-a*y)*b,e[5]=(-c*n+a*s)*b,e[6]=l*b,e[7]=(-L*n+r*y)*b,e[8]=(i*n-r*s)*b,e):null}static adjoint(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=t[4],c=t[5],y=t[6],L=t[7],k=t[8];return e[0]=i*k-c*L,e[1]=a*L-r*k,e[2]=r*c-a*i,e[3]=c*y-s*k,e[4]=n*k-a*y,e[5]=a*s-n*c,e[6]=s*L-i*y,e[7]=r*y-n*L,e[8]=n*i-r*s,e}static determinant(e){let t=e[0],n=e[1],r=e[2],a=e[3],s=e[4],i=e[5],c=e[6],y=e[7],L=e[8];return t*(L*s-i*y)+n*(-L*a+i*c)+r*(y*a-s*c)}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e}static sub(e,t,n){return e}static multiply(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=t[4],y=t[5],L=t[6],k=t[7],d=t[8],M=n[0],l=n[1],b=n[2];return e[0]=M*r+l*i+b*L,e[1]=M*a+l*c+b*k,e[2]=M*s+l*y+b*d,M=n[3],l=n[4],b=n[5],e[3]=M*r+l*i+b*L,e[4]=M*a+l*c+b*k,e[5]=M*s+l*y+b*d,M=n[6],l=n[7],b=n[8],e[6]=M*r+l*i+b*L,e[7]=M*a+l*c+b*k,e[8]=M*s+l*y+b*d,e}static mul(e,t,n){return e}static translate(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=t[4],y=t[5],L=t[6],k=t[7],d=t[8],M=n[0],l=n[1];return e[0]=r,e[1]=a,e[2]=s,e[3]=i,e[4]=c,e[5]=y,e[6]=M*r+l*i+L,e[7]=M*a+l*c+k,e[8]=M*s+l*y+d,e}static rotate(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=t[4],y=t[5],L=t[6],k=t[7],d=t[8],M=Math.sin(n),l=Math.cos(n);return e[0]=l*r+M*i,e[1]=l*a+M*c,e[2]=l*s+M*y,e[3]=l*i-M*r,e[4]=l*c-M*a,e[5]=l*y-M*s,e[6]=L,e[7]=k,e[8]=d,e}static scale(e,t,n){let r=n[0],a=n[1];return e[0]=r*t[0],e[1]=r*t[1],e[2]=r*t[2],e[3]=a*t[3],e[4]=a*t[4],e[5]=a*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=t[0],e[7]=t[1],e[8]=1,e}static fromRotation(e,t){let n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=-n,e[4]=r,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=t[1],e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static fromMat2d(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e}static fromQuat(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=n+n,c=r+r,y=a+a,L=n*i,k=r*i,d=r*c,M=a*i,l=a*c,b=a*y,h=s*i,m=s*c,o=s*y;return e[0]=1-d-b,e[3]=k-o,e[6]=M+m,e[1]=k+o,e[4]=1-L-b,e[7]=l-h,e[2]=M-m,e[5]=l+h,e[8]=1-L-d,e}static fromMat4(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}static normalFromMat4(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=t[4],c=t[5],y=t[6],L=t[7],k=t[8],d=t[9],M=t[10],l=t[11],b=t[12],h=t[13],m=t[14],o=t[15],g=n*c-r*i,x=n*y-a*i,R=n*L-s*i,z=r*y-a*c,V=r*L-s*c,B=a*L-s*y,A=k*h-d*b,S=k*m-M*b,p=k*o-l*b,Y=d*m-M*h,N=d*o-l*h,F=M*o-l*m,q=g*F-x*N+R*Y+z*p-V*S+B*A;return q?(q=1/q,e[0]=(c*F-y*N+L*Y)*q,e[1]=(y*p-i*F-L*S)*q,e[2]=(i*N-c*p+L*A)*q,e[3]=(a*N-r*F-s*Y)*q,e[4]=(n*F-a*p+s*S)*q,e[5]=(r*p-n*N-s*A)*q,e[6]=(h*B-m*V+o*z)*q,e[7]=(m*R-b*B-o*x)*q,e[8]=(b*V-h*R+o*g)*q,e):null}static projection(e,t,n){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/n,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+e[6]*e[6]+e[7]*e[7]+e[8]*e[8])}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e}static multiplyScalarAndAdd(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e[4]=t[4]+n[4]*r,e[5]=t[5]+n[5]*r,e[6]=t[6]+n[6]*r,e[7]=t[7]+n[7]*r,e[8]=t[8]+n[8]*r,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]}static equals(e,t){let n=e[0],r=e[1],a=e[2],s=e[3],i=e[4],c=e[5],y=e[6],L=e[7],k=e[8],d=t[0],M=t[1],l=t[2],b=t[3],h=t[4],m=t[5],o=t[6],g=t[7],x=t[8];return Math.abs(n-d)<=1e-6*Math.max(1,Math.abs(n),Math.abs(d))&&Math.abs(r-M)<=1e-6*Math.max(1,Math.abs(r),Math.abs(M))&&Math.abs(a-l)<=1e-6*Math.max(1,Math.abs(a),Math.abs(l))&&Math.abs(s-b)<=1e-6*Math.max(1,Math.abs(s),Math.abs(b))&&Math.abs(i-h)<=1e-6*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(c-m)<=1e-6*Math.max(1,Math.abs(c),Math.abs(m))&&Math.abs(y-o)<=1e-6*Math.max(1,Math.abs(y),Math.abs(o))&&Math.abs(L-g)<=1e-6*Math.max(1,Math.abs(L),Math.abs(g))&&Math.abs(k-x)<=1e-6*Math.max(1,Math.abs(k),Math.abs(x))}static str(e){return`Mat3(${e.join(", ")})`}},j=G;P(j,"BYTE_LENGTH",9*Float32Array.BYTES_PER_ELEMENT);j.prototype.mul=j.prototype.multiply;j.mul=j.multiply;j.sub=j.subtract;var ge=j;var W=class extends Float32Array{constructor(...e){switch(e.length){case 3:super(e);break;case 2:super(e[0],e[1],3);break;case 1:{let t=e[0];typeof t=="number"?super([t,t,t]):super(t,0,3);break}default:super(3);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get b(){return this[2]}set b(e){this[2]=e}get magnitude(){let e=this[0],t=this[1],n=this[2];return Math.sqrt(e*e+t*t+n*n)}get mag(){return this.magnitude}get squaredMagnitude(){let e=this[0],t=this[1],n=this[2];return e*e+t*t+n*n}get sqrMag(){return this.squaredMagnitude}get str(){return W.str(this)}copy(e){return this.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this[2]-=e[2],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this[2]*=e[2],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this[2]/=e[2],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this[2]+=e[2]*t,this}distance(e){return W.distance(this,e)}dist(e){return 0}squaredDistance(e){return W.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this[2]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this[2]=1/this[2],this}dot(e){return this[0]*e[0]+this[1]*e[1]+this[2]*e[2]}normalize(){return W.normalize(this,this)}static create(){return new W}static clone(e){return new W(e)}static magnitude(e){let t=e[0],n=e[1],r=e[2];return Math.sqrt(t*t+n*n+r*r)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static fromValues(e,t,n){return new W(e,t,n)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}static set(e,t,n,r){return e[0]=t,e[1]=n,e[2]=r,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}static sub(e,t,n){return[0,0,0]}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e}static mul(e,t,n){return[0,0,0]}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e}static div(e,t,n){return[0,0,0]}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e}static scaleAndAdd(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e}static distance(e,t){let n=t[0]-e[0],r=t[1]-e[1],a=t[2]-e[2];return Math.sqrt(n*n+r*r+a*a)}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],r=t[1]-e[1],a=t[2]-e[2];return n*n+r*r+a*a}static sqrDist(e,t){return 0}static squaredLength(e){let t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r}static sqrLen(e,t){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}static normalize(e,t){let n=t[0],r=t[1],a=t[2],s=n*n+r*r+a*a;return s>0&&(s=1/Math.sqrt(s)),e[0]=t[0]*s,e[1]=t[1]*s,e[2]=t[2]*s,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}static cross(e,t,n){let r=t[0],a=t[1],s=t[2],i=n[0],c=n[1],y=n[2];return e[0]=a*y-s*c,e[1]=s*i-r*y,e[2]=r*c-a*i,e}static lerp(e,t,n,r){let a=t[0],s=t[1],i=t[2];return e[0]=a+r*(n[0]-a),e[1]=s+r*(n[1]-s),e[2]=i+r*(n[2]-i),e}static slerp(e,t,n,r){let a=Math.acos(Math.min(Math.max(W.dot(t,n),-1),1)),s=Math.sin(a),i=Math.sin((1-r)*a)/s,c=Math.sin(r*a)/s;return e[0]=i*t[0]+c*n[0],e[1]=i*t[1]+c*n[1],e[2]=i*t[2]+c*n[2],e}static hermite(e,t,n,r,a,s){let i=s*s,c=i*(2*s-3)+1,y=i*(s-2)+s,L=i*(s-1),k=i*(3-2*s);return e[0]=t[0]*c+n[0]*y+r[0]*L+a[0]*k,e[1]=t[1]*c+n[1]*y+r[1]*L+a[1]*k,e[2]=t[2]*c+n[2]*y+r[2]*L+a[2]*k,e}static bezier(e,t,n,r,a,s){let i=1-s,c=i*i,y=s*s,L=c*i,k=3*s*c,d=3*y*i,M=y*s;return e[0]=t[0]*L+n[0]*k+r[0]*d+a[0]*M,e[1]=t[1]*L+n[1]*k+r[1]*d+a[1]*M,e[2]=t[2]*L+n[2]*k+r[2]*d+a[2]*M,e}static transformMat4(e,t,n){let r=t[0],a=t[1],s=t[2],i=n[3]*r+n[7]*a+n[11]*s+n[15]||1;return e[0]=(n[0]*r+n[4]*a+n[8]*s+n[12])/i,e[1]=(n[1]*r+n[5]*a+n[9]*s+n[13])/i,e[2]=(n[2]*r+n[6]*a+n[10]*s+n[14])/i,e}static transformMat3(e,t,n){let r=t[0],a=t[1],s=t[2];return e[0]=r*n[0]+a*n[3]+s*n[6],e[1]=r*n[1]+a*n[4]+s*n[7],e[2]=r*n[2]+a*n[5]+s*n[8],e}static transformQuat(e,t,n){let r=n[0],a=n[1],s=n[2],i=n[3]*2,c=t[0],y=t[1],L=t[2],k=a*L-s*y,d=s*c-r*L,M=r*y-a*c,l=(a*M-s*d)*2,b=(s*k-r*M)*2,h=(r*d-a*k)*2;return e[0]=c+k*i+l,e[1]=y+d*i+b,e[2]=L+M*i+h,e}static rotateX(e,t,n,r){let a=n[1],s=n[2],i=t[1]-a,c=t[2]-s;return e[0]=t[0],e[1]=i*Math.cos(r)-c*Math.sin(r)+a,e[2]=i*Math.sin(r)+c*Math.cos(r)+s,e}static rotateY(e,t,n,r){let a=n[0],s=n[2],i=t[0]-a,c=t[2]-s;return e[0]=c*Math.sin(r)+i*Math.cos(r)+a,e[1]=t[1],e[2]=c*Math.cos(r)-i*Math.sin(r)+s,e}static rotateZ(e,t,n,r){let a=n[0],s=n[1],i=t[0]-a,c=t[1]-s;return e[0]=i*Math.cos(r)-c*Math.sin(r)+a,e[1]=i*Math.sin(r)+c*Math.cos(r)+s,e[2]=n[2],e}static angle(e,t){let n=e[0],r=e[1],a=e[2],s=t[0],i=t[1],c=t[2],y=Math.sqrt((n*n+r*r+a*a)*(s*s+i*i+c*c)),L=y&&W.dot(e,t)/y;return Math.acos(Math.min(Math.max(L,-1),1))}static zero(e){return e[0]=0,e[1]=0,e[2]=0,e}static str(e){return`Vec3(${e.join(", ")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}static equals(e,t){let n=e[0],r=e[1],a=e[2],s=t[0],i=t[1],c=t[2];return Math.abs(n-s)<=1e-6*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(r-i)<=1e-6*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(a-c)<=1e-6*Math.max(1,Math.abs(a),Math.abs(c))}},f=W;P(f,"BYTE_LENGTH",3*Float32Array.BYTES_PER_ELEMENT);f.prototype.sub=f.prototype.subtract;f.prototype.mul=f.prototype.multiply;f.prototype.div=f.prototype.divide;f.prototype.dist=f.prototype.distance;f.prototype.sqrDist=f.prototype.squaredDistance;f.sub=f.subtract;f.mul=f.multiply;f.div=f.divide;f.dist=f.distance;f.sqrDist=f.squaredDistance;f.sqrLen=f.squaredLength;f.mag=f.magnitude;f.length=f.magnitude;f.len=f.magnitude;var ze=f;var le=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),O=class extends Float32Array{constructor(...e){switch(e.length){case 16:super(e);break;case 2:super(e[0],e[1],16);break;case 1:let t=e[0];typeof t=="number"?super([t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t]):super(t,0,16);break;default:super(le);break}}get str(){return O.str(this)}copy(e){return this.set(e),this}identity(){return this.set(le),this}multiply(e){return O.multiply(this,this,e)}mul(e){return this}transpose(){return O.transpose(this,this)}invert(){return O.invert(this,this)}translate(e){return O.translate(this,this,e)}rotate(e,t){return O.rotate(this,this,e,t)}scale(e){return O.scale(this,this,e)}rotateX(e){return O.rotateX(this,this,e)}rotateY(e){return O.rotateY(this,this,e)}rotateZ(e){return O.rotateZ(this,this,e)}perspectiveNO(e,t,n,r){return O.perspectiveNO(this,e,t,n,r)}perspectiveZO(e,t,n,r){return O.perspectiveZO(this,e,t,n,r)}orthoNO(e,t,n,r,a,s){return O.orthoNO(this,e,t,n,r,a,s)}orthoZO(e,t,n,r,a,s){return O.orthoZO(this,e,t,n,r,a,s)}static create(){return new O}static clone(e){return new O(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static fromValues(...e){return new O(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static transpose(e,t){if(e===t){let n=t[1],r=t[2],a=t[3],s=t[6],i=t[7],c=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=r,e[9]=s,e[11]=t[14],e[12]=a,e[13]=i,e[14]=c}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}static invert(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=t[4],c=t[5],y=t[6],L=t[7],k=t[8],d=t[9],M=t[10],l=t[11],b=t[12],h=t[13],m=t[14],o=t[15],g=n*c-r*i,x=n*y-a*i,R=n*L-s*i,z=r*y-a*c,V=r*L-s*c,B=a*L-s*y,A=k*h-d*b,S=k*m-M*b,p=k*o-l*b,Y=d*m-M*h,N=d*o-l*h,F=M*o-l*m,q=g*F-x*N+R*Y+z*p-V*S+B*A;return q?(q=1/q,e[0]=(c*F-y*N+L*Y)*q,e[1]=(a*N-r*F-s*Y)*q,e[2]=(h*B-m*V+o*z)*q,e[3]=(M*V-d*B-l*z)*q,e[4]=(y*p-i*F-L*S)*q,e[5]=(n*F-a*p+s*S)*q,e[6]=(m*R-b*B-o*x)*q,e[7]=(k*B-M*R+l*x)*q,e[8]=(i*N-c*p+L*A)*q,e[9]=(r*p-n*N-s*A)*q,e[10]=(b*V-h*R+o*g)*q,e[11]=(d*R-k*V-l*g)*q,e[12]=(c*S-i*Y-y*A)*q,e[13]=(n*Y-r*S+a*A)*q,e[14]=(h*x-b*z-m*g)*q,e[15]=(k*z-d*x+M*g)*q,e):null}static adjoint(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=t[4],c=t[5],y=t[6],L=t[7],k=t[8],d=t[9],M=t[10],l=t[11],b=t[12],h=t[13],m=t[14],o=t[15],g=n*c-r*i,x=n*y-a*i,R=n*L-s*i,z=r*y-a*c,V=r*L-s*c,B=a*L-s*y,A=k*h-d*b,S=k*m-M*b,p=k*o-l*b,Y=d*m-M*h,N=d*o-l*h,F=M*o-l*m;return e[0]=c*F-y*N+L*Y,e[1]=a*N-r*F-s*Y,e[2]=h*B-m*V+o*z,e[3]=M*V-d*B-l*z,e[4]=y*p-i*F-L*S,e[5]=n*F-a*p+s*S,e[6]=m*R-b*B-o*x,e[7]=k*B-M*R+l*x,e[8]=i*N-c*p+L*A,e[9]=r*p-n*N-s*A,e[10]=b*V-h*R+o*g,e[11]=d*R-k*V-l*g,e[12]=c*S-i*Y-y*A,e[13]=n*Y-r*S+a*A,e[14]=h*x-b*z-m*g,e[15]=k*z-d*x+M*g,e}static determinant(e){let t=e[0],n=e[1],r=e[2],a=e[3],s=e[4],i=e[5],c=e[6],y=e[7],L=e[8],k=e[9],d=e[10],M=e[11],l=e[12],b=e[13],h=e[14],m=e[15],o=t*i-n*s,g=t*c-r*s,x=n*c-r*i,R=L*b-k*l,z=L*h-d*l,V=k*h-d*b,B=t*V-n*z+r*R,A=s*V-i*z+c*R,S=L*x-k*g+d*o,p=l*x-b*g+h*o;return y*B-a*A+m*S-M*p}static multiply(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=t[4],y=t[5],L=t[6],k=t[7],d=t[8],M=t[9],l=t[10],b=t[11],h=t[12],m=t[13],o=t[14],g=t[15],x=n[0],R=n[1],z=n[2],V=n[3];return e[0]=x*r+R*c+z*d+V*h,e[1]=x*a+R*y+z*M+V*m,e[2]=x*s+R*L+z*l+V*o,e[3]=x*i+R*k+z*b+V*g,x=n[4],R=n[5],z=n[6],V=n[7],e[4]=x*r+R*c+z*d+V*h,e[5]=x*a+R*y+z*M+V*m,e[6]=x*s+R*L+z*l+V*o,e[7]=x*i+R*k+z*b+V*g,x=n[8],R=n[9],z=n[10],V=n[11],e[8]=x*r+R*c+z*d+V*h,e[9]=x*a+R*y+z*M+V*m,e[10]=x*s+R*L+z*l+V*o,e[11]=x*i+R*k+z*b+V*g,x=n[12],R=n[13],z=n[14],V=n[15],e[12]=x*r+R*c+z*d+V*h,e[13]=x*a+R*y+z*M+V*m,e[14]=x*s+R*L+z*l+V*o,e[15]=x*i+R*k+z*b+V*g,e}static mul(e,t,n){return e}static translate(e,t,n){let r=n[0],a=n[1],s=n[2];if(t===e)e[12]=t[0]*r+t[4]*a+t[8]*s+t[12],e[13]=t[1]*r+t[5]*a+t[9]*s+t[13],e[14]=t[2]*r+t[6]*a+t[10]*s+t[14],e[15]=t[3]*r+t[7]*a+t[11]*s+t[15];else{let i=t[0],c=t[1],y=t[2],L=t[3],k=t[4],d=t[5],M=t[6],l=t[7],b=t[8],h=t[9],m=t[10],o=t[11];e[0]=i,e[1]=c,e[2]=y,e[3]=L,e[4]=k,e[5]=d,e[6]=M,e[7]=l,e[8]=b,e[9]=h,e[10]=m,e[11]=o,e[12]=i*r+k*a+b*s+t[12],e[13]=c*r+d*a+h*s+t[13],e[14]=y*r+M*a+m*s+t[14],e[15]=L*r+l*a+o*s+t[15]}return e}static scale(e,t,n){let r=n[0],a=n[1],s=n[2];return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*a,e[5]=t[5]*a,e[6]=t[6]*a,e[7]=t[7]*a,e[8]=t[8]*s,e[9]=t[9]*s,e[10]=t[10]*s,e[11]=t[11]*s,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static rotate(e,t,n,r){let a=r[0],s=r[1],i=r[2],c=Math.sqrt(a*a+s*s+i*i);if(c<1e-6)return null;c=1/c,a*=c,s*=c,i*=c;let y=Math.sin(n),L=Math.cos(n),k=1-L,d=t[0],M=t[1],l=t[2],b=t[3],h=t[4],m=t[5],o=t[6],g=t[7],x=t[8],R=t[9],z=t[10],V=t[11],B=a*a*k+L,A=s*a*k+i*y,S=i*a*k-s*y,p=a*s*k-i*y,Y=s*s*k+L,N=i*s*k+a*y,F=a*i*k+s*y,q=s*i*k-a*y,u=i*i*k+L;return e[0]=d*B+h*A+x*S,e[1]=M*B+m*A+R*S,e[2]=l*B+o*A+z*S,e[3]=b*B+g*A+V*S,e[4]=d*p+h*Y+x*N,e[5]=M*p+m*Y+R*N,e[6]=l*p+o*Y+z*N,e[7]=b*p+g*Y+V*N,e[8]=d*F+h*q+x*u,e[9]=M*F+m*q+R*u,e[10]=l*F+o*q+z*u,e[11]=b*F+g*q+V*u,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e}static rotateX(e,t,n){let r=Math.sin(n),a=Math.cos(n),s=t[4],i=t[5],c=t[6],y=t[7],L=t[8],k=t[9],d=t[10],M=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=s*a+L*r,e[5]=i*a+k*r,e[6]=c*a+d*r,e[7]=y*a+M*r,e[8]=L*a-s*r,e[9]=k*a-i*r,e[10]=d*a-c*r,e[11]=M*a-y*r,e}static rotateY(e,t,n){let r=Math.sin(n),a=Math.cos(n),s=t[0],i=t[1],c=t[2],y=t[3],L=t[8],k=t[9],d=t[10],M=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=s*a-L*r,e[1]=i*a-k*r,e[2]=c*a-d*r,e[3]=y*a-M*r,e[8]=s*r+L*a,e[9]=i*r+k*a,e[10]=c*r+d*a,e[11]=y*r+M*a,e}static rotateZ(e,t,n){let r=Math.sin(n),a=Math.cos(n),s=t[0],i=t[1],c=t[2],y=t[3],L=t[4],k=t[5],d=t[6],M=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=s*a+L*r,e[1]=i*a+k*r,e[2]=c*a+d*r,e[3]=y*a+M*r,e[4]=L*a-s*r,e[5]=k*a-i*r,e[6]=d*a-c*r,e[7]=M*a-y*r,e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromRotation(e,t,n){let r=n[0],a=n[1],s=n[2],i=Math.sqrt(r*r+a*a+s*s);if(i<1e-6)return null;i=1/i,r*=i,a*=i,s*=i;let c=Math.sin(t),y=Math.cos(t),L=1-y;return e[0]=r*r*L+y,e[1]=a*r*L+s*c,e[2]=s*r*L-a*c,e[3]=0,e[4]=r*a*L-s*c,e[5]=a*a*L+y,e[6]=s*a*L+r*c,e[7]=0,e[8]=r*s*L+a*c,e[9]=a*s*L-r*c,e[10]=s*s*L+y,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromXRotation(e,t){let n=Math.sin(t),r=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=r,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromYRotation(e,t){let n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromZRotation(e,t){let n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=r,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromRotationTranslation(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=r+r,y=a+a,L=s+s,k=r*c,d=r*y,M=r*L,l=a*y,b=a*L,h=s*L,m=i*c,o=i*y,g=i*L;return e[0]=1-(l+h),e[1]=d+g,e[2]=M-o,e[3]=0,e[4]=d-g,e[5]=1-(k+h),e[6]=b+m,e[7]=0,e[8]=M+o,e[9]=b-m,e[10]=1-(k+l),e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}static fromQuat2(e,t){let n=new f,r=-t[0],a=-t[1],s=-t[2],i=t[3],c=t[4],y=t[5],L=t[6],k=t[7],d=r*r+a*a+s*s+i*i;return d>0?(n[0]=(c*i+k*r+y*s-L*a)*2/d,n[1]=(y*i+k*a+L*r-c*s)*2/d,n[2]=(L*i+k*s+c*a-y*r)*2/d):(n[0]=(c*i+k*r+y*s-L*a)*2,n[1]=(y*i+k*a+L*r-c*s)*2,n[2]=(L*i+k*s+c*a-y*r)*2),O.fromRotationTranslation(e,t,n),e}static getTranslation(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}static getScaling(e,t){let n=t[0],r=t[1],a=t[2],s=t[4],i=t[5],c=t[6],y=t[8],L=t[9],k=t[10];return e[0]=Math.sqrt(n*n+r*r+a*a),e[1]=Math.sqrt(s*s+i*i+c*c),e[2]=Math.sqrt(y*y+L*L+k*k),e}static getRotation(e,t){O.getScaling(ae,t);let n=1/ae[0],r=1/ae[1],a=1/ae[2],s=t[0]*n,i=t[1]*r,c=t[2]*a,y=t[4]*n,L=t[5]*r,k=t[6]*a,d=t[8]*n,M=t[9]*r,l=t[10]*a,b=s+L+l,h=0;return b>0?(h=Math.sqrt(b+1)*2,e[3]=.25*h,e[0]=(k-M)/h,e[1]=(d-c)/h,e[2]=(i-y)/h):s>L&&s>l?(h=Math.sqrt(1+s-L-l)*2,e[3]=(k-M)/h,e[0]=.25*h,e[1]=(i+y)/h,e[2]=(d+c)/h):L>l?(h=Math.sqrt(1+L-s-l)*2,e[3]=(d-c)/h,e[0]=(i+y)/h,e[1]=.25*h,e[2]=(k+M)/h):(h=Math.sqrt(1+l-s-L)*2,e[3]=(i-y)/h,e[0]=(d+c)/h,e[1]=(k+M)/h,e[2]=.25*h),e}static decompose(e,t,n,r){t[0]=r[12],t[1]=r[13],t[2]=r[14];let a=r[0],s=r[1],i=r[2],c=r[4],y=r[5],L=r[6],k=r[8],d=r[9],M=r[10];n[0]=Math.sqrt(a*a+s*s+i*i),n[1]=Math.sqrt(c*c+y*y+L*L),n[2]=Math.sqrt(k*k+d*d+M*M);let l=1/n[0],b=1/n[1],h=1/n[2],m=a*l,o=s*b,g=i*h,x=c*l,R=y*b,z=L*h,V=k*l,B=d*b,A=M*h,S=m+R+A,p=0;return S>0?(p=Math.sqrt(S+1)*2,e[3]=.25*p,e[0]=(z-B)/p,e[1]=(V-g)/p,e[2]=(o-x)/p):m>R&&m>A?(p=Math.sqrt(1+m-R-A)*2,e[3]=(z-B)/p,e[0]=.25*p,e[1]=(o+x)/p,e[2]=(V+g)/p):R>A?(p=Math.sqrt(1+R-m-A)*2,e[3]=(V-g)/p,e[0]=(o+x)/p,e[1]=.25*p,e[2]=(z+B)/p):(p=Math.sqrt(1+A-m-R)*2,e[3]=(o-x)/p,e[0]=(V+g)/p,e[1]=(z+B)/p,e[2]=.25*p),e}static fromRotationTranslationScale(e,t,n,r){let a=t[0],s=t[1],i=t[2],c=t[3],y=a+a,L=s+s,k=i+i,d=a*y,M=a*L,l=a*k,b=s*L,h=s*k,m=i*k,o=c*y,g=c*L,x=c*k,R=r[0],z=r[1],V=r[2];return e[0]=(1-(b+m))*R,e[1]=(M+x)*R,e[2]=(l-g)*R,e[3]=0,e[4]=(M-x)*z,e[5]=(1-(d+m))*z,e[6]=(h+o)*z,e[7]=0,e[8]=(l+g)*V,e[9]=(h-o)*V,e[10]=(1-(d+b))*V,e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}static fromRotationTranslationScaleOrigin(e,t,n,r,a){let s=t[0],i=t[1],c=t[2],y=t[3],L=s+s,k=i+i,d=c+c,M=s*L,l=s*k,b=s*d,h=i*k,m=i*d,o=c*d,g=y*L,x=y*k,R=y*d,z=r[0],V=r[1],B=r[2],A=a[0],S=a[1],p=a[2],Y=(1-(h+o))*z,N=(l+R)*z,F=(b-x)*z,q=(l-R)*V,u=(1-(M+o))*V,ne=(m+g)*V,re=(b+x)*B,ie=(m-g)*B,ce=(1-(M+h))*B;return e[0]=Y,e[1]=N,e[2]=F,e[3]=0,e[4]=q,e[5]=u,e[6]=ne,e[7]=0,e[8]=re,e[9]=ie,e[10]=ce,e[11]=0,e[12]=n[0]+A-(Y*A+q*S+re*p),e[13]=n[1]+S-(N*A+u*S+ie*p),e[14]=n[2]+p-(F*A+ne*S+ce*p),e[15]=1,e}static fromQuat(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=n+n,c=r+r,y=a+a,L=n*i,k=r*i,d=r*c,M=a*i,l=a*c,b=a*y,h=s*i,m=s*c,o=s*y;return e[0]=1-d-b,e[1]=k+o,e[2]=M-m,e[3]=0,e[4]=k-o,e[5]=1-L-b,e[6]=l+h,e[7]=0,e[8]=M+m,e[9]=l-h,e[10]=1-L-d,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static frustum(e,t,n,r,a,s,i){let c=1/(n-t),y=1/(a-r),L=1/(s-i);return e[0]=s*2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s*2*y,e[6]=0,e[7]=0,e[8]=(n+t)*c,e[9]=(a+r)*y,e[10]=(i+s)*L,e[11]=-1,e[12]=0,e[13]=0,e[14]=i*s*2*L,e[15]=0,e}static perspectiveNO(e,t,n,r,a){let s=1/Math.tan(t/2);if(e[0]=s/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,a!=null&&a!==1/0){let i=1/(r-a);e[10]=(a+r)*i,e[14]=2*a*r*i}else e[10]=-1,e[14]=-2*r;return e}static perspective(e,t,n,r,a){return e}static perspectiveZO(e,t,n,r,a){let s=1/Math.tan(t/2);if(e[0]=s/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,a!=null&&a!==1/0){let i=1/(r-a);e[10]=a*i,e[14]=a*r*i}else e[10]=-1,e[14]=-r;return e}static perspectiveFromFieldOfView(e,t,n,r){let a=Math.tan(t.upDegrees*Math.PI/180),s=Math.tan(t.downDegrees*Math.PI/180),i=Math.tan(t.leftDegrees*Math.PI/180),c=Math.tan(t.rightDegrees*Math.PI/180),y=2/(i+c),L=2/(a+s);return e[0]=y,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=L,e[6]=0,e[7]=0,e[8]=-((i-c)*y*.5),e[9]=(a-s)*L*.5,e[10]=r/(n-r),e[11]=-1,e[12]=0,e[13]=0,e[14]=r*n/(n-r),e[15]=0,e}static orthoNO(e,t,n,r,a,s,i){let c=1/(t-n),y=1/(r-a),L=1/(s-i);return e[0]=-2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*y,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*L,e[11]=0,e[12]=(t+n)*c,e[13]=(a+r)*y,e[14]=(i+s)*L,e[15]=1,e}static ortho(e,t,n,r,a,s,i){return e}static orthoZO(e,t,n,r,a,s,i){let c=1/(t-n),y=1/(r-a),L=1/(s-i);return e[0]=-2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*y,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=L,e[11]=0,e[12]=(t+n)*c,e[13]=(a+r)*y,e[14]=s*L,e[15]=1,e}static lookAt(e,t,n,r){let a=t[0],s=t[1],i=t[2],c=r[0],y=r[1],L=r[2],k=n[0],d=n[1],M=n[2];if(Math.abs(a-k)<1e-6&&Math.abs(s-d)<1e-6&&Math.abs(i-M)<1e-6)return O.identity(e);let l=a-k,b=s-d,h=i-M,m=1/Math.sqrt(l*l+b*b+h*h);l*=m,b*=m,h*=m;let o=y*h-L*b,g=L*l-c*h,x=c*b-y*l;m=Math.sqrt(o*o+g*g+x*x),m?(m=1/m,o*=m,g*=m,x*=m):(o=0,g=0,x=0);let R=b*x-h*g,z=h*o-l*x,V=l*g-b*o;return m=Math.sqrt(R*R+z*z+V*V),m?(m=1/m,R*=m,z*=m,V*=m):(R=0,z=0,V=0),e[0]=o,e[1]=R,e[2]=l,e[3]=0,e[4]=g,e[5]=z,e[6]=b,e[7]=0,e[8]=x,e[9]=V,e[10]=h,e[11]=0,e[12]=-(o*a+g*s+x*i),e[13]=-(R*a+z*s+V*i),e[14]=-(l*a+b*s+h*i),e[15]=1,e}static targetTo(e,t,n,r){let a=t[0],s=t[1],i=t[2],c=r[0],y=r[1],L=r[2],k=a-n[0],d=s-n[1],M=i-n[2],l=k*k+d*d+M*M;l>0&&(l=1/Math.sqrt(l),k*=l,d*=l,M*=l);let b=y*M-L*d,h=L*k-c*M,m=c*d-y*k;return l=b*b+h*h+m*m,l>0&&(l=1/Math.sqrt(l),b*=l,h*=l,m*=l),e[0]=b,e[1]=h,e[2]=m,e[3]=0,e[4]=d*m-M*h,e[5]=M*b-k*m,e[6]=k*h-d*b,e[7]=0,e[8]=k,e[9]=d,e[10]=M,e[11]=0,e[12]=a,e[13]=s,e[14]=i,e[15]=1,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+e[6]*e[6]+e[7]*e[7]+e[8]*e[8]+e[9]*e[9]+e[10]*e[10]+e[11]*e[11]+e[12]*e[12]+e[13]*e[13]+e[14]*e[14]+e[15]*e[15])}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e[9]=t[9]+n[9],e[10]=t[10]+n[10],e[11]=t[11]+n[11],e[12]=t[12]+n[12],e[13]=t[13]+n[13],e[14]=t[14]+n[14],e[15]=t[15]+n[15],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e[9]=t[9]-n[9],e[10]=t[10]-n[10],e[11]=t[11]-n[11],e[12]=t[12]-n[12],e[13]=t[13]-n[13],e[14]=t[14]-n[14],e[15]=t[15]-n[15],e}static sub(e,t,n){return e}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e[9]=t[9]*n,e[10]=t[10]*n,e[11]=t[11]*n,e[12]=t[12]*n,e[13]=t[13]*n,e[14]=t[14]*n,e[15]=t[15]*n,e}static multiplyScalarAndAdd(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e[4]=t[4]+n[4]*r,e[5]=t[5]+n[5]*r,e[6]=t[6]+n[6]*r,e[7]=t[7]+n[7]*r,e[8]=t[8]+n[8]*r,e[9]=t[9]+n[9]*r,e[10]=t[10]+n[10]*r,e[11]=t[11]+n[11]*r,e[12]=t[12]+n[12]*r,e[13]=t[13]+n[13]*r,e[14]=t[14]+n[14]*r,e[15]=t[15]+n[15]*r,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]}static equals(e,t){let n=e[0],r=e[1],a=e[2],s=e[3],i=e[4],c=e[5],y=e[6],L=e[7],k=e[8],d=e[9],M=e[10],l=e[11],b=e[12],h=e[13],m=e[14],o=e[15],g=t[0],x=t[1],R=t[2],z=t[3],V=t[4],B=t[5],A=t[6],S=t[7],p=t[8],Y=t[9],N=t[10],F=t[11],q=t[12],u=t[13],ne=t[14],re=t[15];return Math.abs(n-g)<=1e-6*Math.max(1,Math.abs(n),Math.abs(g))&&Math.abs(r-x)<=1e-6*Math.max(1,Math.abs(r),Math.abs(x))&&Math.abs(a-R)<=1e-6*Math.max(1,Math.abs(a),Math.abs(R))&&Math.abs(s-z)<=1e-6*Math.max(1,Math.abs(s),Math.abs(z))&&Math.abs(i-V)<=1e-6*Math.max(1,Math.abs(i),Math.abs(V))&&Math.abs(c-B)<=1e-6*Math.max(1,Math.abs(c),Math.abs(B))&&Math.abs(y-A)<=1e-6*Math.max(1,Math.abs(y),Math.abs(A))&&Math.abs(L-S)<=1e-6*Math.max(1,Math.abs(L),Math.abs(S))&&Math.abs(k-p)<=1e-6*Math.max(1,Math.abs(k),Math.abs(p))&&Math.abs(d-Y)<=1e-6*Math.max(1,Math.abs(d),Math.abs(Y))&&Math.abs(M-N)<=1e-6*Math.max(1,Math.abs(M),Math.abs(N))&&Math.abs(l-F)<=1e-6*Math.max(1,Math.abs(l),Math.abs(F))&&Math.abs(b-q)<=1e-6*Math.max(1,Math.abs(b),Math.abs(q))&&Math.abs(h-u)<=1e-6*Math.max(1,Math.abs(h),Math.abs(u))&&Math.abs(m-ne)<=1e-6*Math.max(1,Math.abs(m),Math.abs(ne))&&Math.abs(o-re)<=1e-6*Math.max(1,Math.abs(o),Math.abs(re))}static str(e){return`Mat4(${e.join(", ")})`}},Z=O;P(Z,"BYTE_LENGTH",16*Float32Array.BYTES_PER_ELEMENT);var ae=new f;Z.prototype.mul=Z.prototype.multiply;Z.sub=Z.subtract;Z.mul=Z.multiply;Z.perspective=Z.perspectiveNO;Z.ortho=Z.orthoNO;var we=Z;var _=class extends Float32Array{constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:{let t=e[0];typeof t=="number"?super([t,t,t,t]):super(t,0,4);break}default:super(4);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get w(){return this[3]}set w(e){this[3]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get b(){return this[2]}set b(e){this[2]=e}get a(){return this[3]}set a(e){this[3]=e}get magnitude(){let e=this[0],t=this[1],n=this[2],r=this[3];return Math.sqrt(e*e+t*t+n*n+r*r)}get mag(){return this.magnitude}get str(){return _.str(this)}copy(e){return super.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],this[3]+=e[3],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this[2]-=e[2],this[3]-=e[3],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this[2]*=e[2],this[3]*=e[3],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this[2]/=e[2],this[3]/=e[3],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this[3]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this[2]+=e[2]*t,this[3]+=e[3]*t,this}distance(e){return _.distance(this,e)}dist(e){return 0}squaredDistance(e){return _.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this[2]*=-1,this[3]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this[2]=1/this[2],this[3]=1/this[3],this}dot(e){return this[0]*e[0]+this[1]*e[1]+this[2]*e[2]+this[3]*e[3]}normalize(){return _.normalize(this,this)}static create(){return new _}static clone(e){return new _(e)}static fromValues(e,t,n,r){return new _(e,t,n,r)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static set(e,t,n,r,a){return e[0]=t,e[1]=n,e[2]=r,e[3]=a,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e[3]=t[3]*n[3],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e[3]=t[3]/n[3],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e[3]=Math.min(t[3],n[3]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e[3]=Math.max(t[3],n[3]),e}static round(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static scaleAndAdd(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e}static distance(e,t){let n=t[0]-e[0],r=t[1]-e[1],a=t[2]-e[2],s=t[3]-e[3];return Math.hypot(n,r,a,s)}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],r=t[1]-e[1],a=t[2]-e[2],s=t[3]-e[3];return n*n+r*r+a*a+s*s}static sqrDist(e,t){return 0}static magnitude(e){let t=e[0],n=e[1],r=e[2],a=e[3];return Math.sqrt(t*t+n*n+r*r+a*a)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){let t=e[0],n=e[1],r=e[2],a=e[3];return t*t+n*n+r*r+a*a}static sqrLen(e){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}static normalize(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=n*n+r*r+a*a+s*s;return i>0&&(i=1/Math.sqrt(i)),e[0]=n*i,e[1]=r*i,e[2]=a*i,e[3]=s*i,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}static cross(e,t,n,r){let a=n[0]*r[1]-n[1]*r[0],s=n[0]*r[2]-n[2]*r[0],i=n[0]*r[3]-n[3]*r[0],c=n[1]*r[2]-n[2]*r[1],y=n[1]*r[3]-n[3]*r[1],L=n[2]*r[3]-n[3]*r[2],k=t[0],d=t[1],M=t[2],l=t[3];return e[0]=d*L-M*y+l*c,e[1]=-(k*L)+M*i-l*s,e[2]=k*y-d*i+l*a,e[3]=-(k*c)+d*s-M*a,e}static lerp(e,t,n,r){let a=t[0],s=t[1],i=t[2],c=t[3];return e[0]=a+r*(n[0]-a),e[1]=s+r*(n[1]-s),e[2]=i+r*(n[2]-i),e[3]=c+r*(n[3]-c),e}static transformMat4(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3];return e[0]=n[0]*r+n[4]*a+n[8]*s+n[12]*i,e[1]=n[1]*r+n[5]*a+n[9]*s+n[13]*i,e[2]=n[2]*r+n[6]*a+n[10]*s+n[14]*i,e[3]=n[3]*r+n[7]*a+n[11]*s+n[15]*i,e}static transformQuat(e,t,n){let r=t[0],a=t[1],s=t[2],i=n[0],c=n[1],y=n[2],L=n[3],k=L*r+c*s-y*a,d=L*a+y*r-i*s,M=L*s+i*a-c*r,l=-i*r-c*a-y*s;return e[0]=k*L+l*-i+d*-y-M*-c,e[1]=d*L+l*-c+M*-i-k*-y,e[2]=M*L+l*-y+k*-c-d*-i,e[3]=t[3],e}static zero(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e}static str(e){return`Vec4(${e.join(", ")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}static equals(e,t){let n=e[0],r=e[1],a=e[2],s=e[3],i=t[0],c=t[1],y=t[2],L=t[3];return Math.abs(n-i)<=1e-6*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(r-c)<=1e-6*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(a-y)<=1e-6*Math.max(1,Math.abs(a),Math.abs(y))&&Math.abs(s-L)<=1e-6*Math.max(1,Math.abs(s),Math.abs(L))}},Q=_;P(Q,"BYTE_LENGTH",4*Float32Array.BYTES_PER_ELEMENT);Q.prototype.sub=Q.prototype.subtract;Q.prototype.mul=Q.prototype.multiply;Q.prototype.div=Q.prototype.divide;Q.prototype.dist=Q.prototype.distance;Q.prototype.sqrDist=Q.prototype.squaredDistance;Q.sub=Q.subtract;Q.mul=Q.multiply;Q.div=Q.divide;Q.dist=Q.distance;Q.sqrDist=Q.squaredDistance;Q.sqrLen=Q.squaredLength;Q.mag=Q.magnitude;Q.length=Q.magnitude;Q.len=Q.magnitude;var pe=Q;var I=class extends Float32Array{constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:{let t=e[0];typeof t=="number"?super([t,t,t,t]):super(t,0,4);break}default:super(4),this[3]=1;break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get w(){return this[3]}set w(e){this[3]=e}get magnitude(){let e=this[0],t=this[1],n=this[2],r=this[3];return Math.sqrt(e*e+t*t+n*n+r*r)}get mag(){return this.magnitude}get str(){return I.str(this)}copy(e){return super.set(e),this}identity(){return this[0]=0,this[1]=0,this[2]=0,this[3]=1,this}multiply(e){return I.multiply(this,this,e)}mul(e){return this}rotateX(e){return I.rotateX(this,this,e)}rotateY(e){return I.rotateY(this,this,e)}rotateZ(e){return I.rotateZ(this,this,e)}invert(){return I.invert(this,this)}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this[3]*=e,this}dot(e){return I.dot(this,e)}static create(){return new I}static identity(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}static setAxisAngle(e,t,n){n=n*.5;let r=Math.sin(n);return e[0]=r*t[0],e[1]=r*t[1],e[2]=r*t[2],e[3]=Math.cos(n),e}static getAxisAngle(e,t){let n=Math.acos(t[3])*2,r=Math.sin(n/2);return r>1e-6?(e[0]=t[0]/r,e[1]=t[1]/r,e[2]=t[2]/r):(e[0]=1,e[1]=0,e[2]=0),n}static getAngle(e,t){let n=I.dot(e,t);return Math.acos(2*n*n-1)}static multiply(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=n[0],y=n[1],L=n[2],k=n[3];return e[0]=r*k+i*c+a*L-s*y,e[1]=a*k+i*y+s*c-r*L,e[2]=s*k+i*L+r*y-a*c,e[3]=i*k-r*c-a*y-s*L,e}static rotateX(e,t,n){n*=.5;let r=t[0],a=t[1],s=t[2],i=t[3],c=Math.sin(n),y=Math.cos(n);return e[0]=r*y+i*c,e[1]=a*y+s*c,e[2]=s*y-a*c,e[3]=i*y-r*c,e}static rotateY(e,t,n){n*=.5;let r=t[0],a=t[1],s=t[2],i=t[3],c=Math.sin(n),y=Math.cos(n);return e[0]=r*y-s*c,e[1]=a*y+i*c,e[2]=s*y+r*c,e[3]=i*y-a*c,e}static rotateZ(e,t,n){n*=.5;let r=t[0],a=t[1],s=t[2],i=t[3],c=Math.sin(n),y=Math.cos(n);return e[0]=r*y+a*c,e[1]=a*y-r*c,e[2]=s*y+i*c,e[3]=i*y-s*c,e}static calculateW(e,t){let n=t[0],r=t[1],a=t[2];return e[0]=n,e[1]=r,e[2]=a,e[3]=Math.sqrt(Math.abs(1-n*n-r*r-a*a)),e}static exp(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=Math.sqrt(n*n+r*r+a*a),c=Math.exp(s),y=i>0?c*Math.sin(i)/i:0;return e[0]=n*y,e[1]=r*y,e[2]=a*y,e[3]=c*Math.cos(i),e}static ln(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=Math.sqrt(n*n+r*r+a*a),c=i>0?Math.atan2(i,s)/i:0;return e[0]=n*c,e[1]=r*c,e[2]=a*c,e[3]=.5*Math.log(n*n+r*r+a*a+s*s),e}static pow(e,t,n){return I.ln(e,t),I.scale(e,e,n),I.exp(e,e),e}static slerp(e,t,n,r){let a=t[0],s=t[1],i=t[2],c=t[3],y=n[0],L=n[1],k=n[2],d=n[3],M,l,b=a*y+s*L+i*k+c*d;if(b<0&&(b=-b,y=-y,L=-L,k=-k,d=-d),1-b>1e-6){let h=Math.acos(b),m=Math.sin(h);M=Math.sin((1-r)*h)/m,l=Math.sin(r*h)/m}else M=1-r,l=r;return e[0]=M*a+l*y,e[1]=M*s+l*L,e[2]=M*i+l*k,e[3]=M*c+l*d,e}static invert(e,t){let n=t[0],r=t[1],a=t[2],s=t[3],i=n*n+r*r+a*a+s*s,c=i?1/i:0;return e[0]=-n*c,e[1]=-r*c,e[2]=-a*c,e[3]=s*c,e}static conjugate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}static fromMat3(e,t){let n=t[0]+t[4]+t[8],r;if(n>0)r=Math.sqrt(n+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{let a=0;t[4]>t[0]&&(a=1),t[8]>t[a*3+a]&&(a=2);let s=(a+1)%3,i=(a+2)%3;r=Math.sqrt(t[a*3+a]-t[s*3+s]-t[i*3+i]+1),e[a]=.5*r,r=.5/r,e[3]=(t[s*3+i]-t[i*3+s])*r,e[s]=(t[s*3+a]+t[a*3+s])*r,e[i]=(t[i*3+a]+t[a*3+i])*r}return e}static fromEuler(e,t,n,r){let a=.5*Math.PI/180;t*=a,n*=a,r*=a;let s=Math.sin(t),i=Math.cos(t),c=Math.sin(n),y=Math.cos(n),L=Math.sin(r),k=Math.cos(r);return e[0]=s*y*k-i*c*L,e[1]=i*c*k+s*y*L,e[2]=i*y*L-s*c*k,e[3]=i*y*k+s*c*L,e}static str(e){return`Quat(${e.join(", ")})`}static clone(e){return new I(e)}static fromValues(e,t,n,r){return new I(e,t,n,r)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static set(e,t,n,r,a){return e}static add(e,t,n){return e}static mul(e,t,n){return e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}static lerp(e,t,n,r){return e}static magnitude(e){return 0}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){return 0}static sqrLen(e){return 0}static normalize(e,t){return e}static exactEquals(e,t){return!1}static equals(e,t){return!1}static rotationTo(e,t,n){let r=f.dot(t,n);return r<-.999999?(f.cross(U,fe,t),f.len(U)<1e-6&&f.cross(U,Qe,t),f.normalize(U,U),I.setAxisAngle(e,U,Math.PI),e):r>.999999?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(f.cross(U,t,n),e[0]=U[0],e[1]=U[1],e[2]=U[2],e[3]=1+r,I.normalize(e,e))}static sqlerp(e,t,n,r,a,s){return I.slerp(Me,t,a,s),I.slerp(de,n,r,s),I.slerp(e,Me,de,2*s*(1-s)),e}static setAxes(e,t,n,r){return K[0]=n[0],K[3]=n[1],K[6]=n[2],K[1]=r[0],K[4]=r[1],K[7]=r[2],K[2]=-t[0],K[5]=-t[1],K[8]=-t[2],I.normalize(e,I.fromMat3(e,K))}},E=I;P(E,"BYTE_LENGTH",4*Float32Array.BYTES_PER_ELEMENT);var Me=new E,de=new E,K=new j,U=new f,fe=new f(1,0,0),Qe=new f(0,1,0);E.set=Q.set;E.add=Q.add;E.lerp=Q.lerp;E.normalize=Q.normalize;E.squaredLength=Q.squaredLength;E.sqrLen=Q.squaredLength;E.exactEquals=Q.exactEquals;E.equals=Q.equals;E.magnitude=Q.magnitude;E.prototype.mul=E.prototype.multiply;E.mul=E.multiply;E.mag=E.magnitude;E.length=E.magnitude;E.len=E.magnitude;var qe=E;var H=class extends Float32Array{constructor(...e){switch(e.length){case 8:super(e);break;case 2:super(e[0],e[1],8);break;case 1:{let t=e[0];typeof t=="number"?super([t,t,t,t,t,t,t,t]):super(t,0,8);break}default:super(8),this[3]=1;break}}get str(){return H.str(this)}copy(e){return super.set(e),this}static create(){return new H}static clone(e){return new H(e)}static fromValues(e,t,n,r,a,s,i,c){return new H(e,t,n,r,a,s,i,c)}static fromRotationTranslationValues(e,t,n,r,a,s,i){let c=a*.5,y=s*.5,L=i*.5;return new H(e,t,n,r,c*r+y*n-L*t,y*r+L*e-c*n,L*r+c*t-y*e,-c*e-y*t-L*n)}static fromRotationTranslation(e,t,n){let r=n[0]*.5,a=n[1]*.5,s=n[2]*.5,i=t[0],c=t[1],y=t[2],L=t[3];return e[0]=i,e[1]=c,e[2]=y,e[3]=L,e[4]=r*L+a*y-s*c,e[5]=a*L+s*i-r*y,e[6]=s*L+r*c-a*i,e[7]=-r*i-a*c-s*y,e}static fromTranslation(e,t){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0]*.5,e[5]=t[1]*.5,e[6]=t[2]*.5,e[7]=0,e}static fromRotation(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}static fromMat4(e,t){return Z.getRotation(be,t),Z.getTranslation(he,t),H.fromRotationTranslation(e,be,he)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}static identity(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}static set(e,t,n,r,a,s,i,c,y){return e[0]=t,e[1]=n,e[2]=r,e[3]=a,e[4]=s,e[5]=i,e[6]=c,e[7]=y,e}static getReal(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static getDual(e,t){return e[0]=t[4],e[1]=t[5],e[2]=t[6],e[3]=t[7],e}static setReal(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static setDual(e,t){return e[4]=t[0],e[5]=t[1],e[6]=t[2],e[7]=t[3],e}static getTranslation(e,t){let n=t[4],r=t[5],a=t[6],s=t[7],i=-t[0],c=-t[1],y=-t[2],L=t[3];return e[0]=(n*L+s*i+r*y-a*c)*2,e[1]=(r*L+s*c+a*i-n*y)*2,e[2]=(a*L+s*y+n*c-r*i)*2,e}static translate(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=n[0]*.5,y=n[1]*.5,L=n[2]*.5,k=t[4],d=t[5],M=t[6],l=t[7];return e[0]=r,e[1]=a,e[2]=s,e[3]=i,e[4]=i*c+a*L-s*y+k,e[5]=i*y+s*c-r*L+d,e[6]=i*L+r*y-a*c+M,e[7]=-r*c-a*y-s*L+l,e}static rotateX(e,t,n){let r=-t[0],a=-t[1],s=-t[2],i=t[3],c=t[4],y=t[5],L=t[6],k=t[7],d=c*i+k*r+y*s-L*a,M=y*i+k*a+L*r-c*s,l=L*i+k*s+c*a-y*r,b=k*i-c*r-y*a-L*s;return E.rotateX(e,t,n),r=e[0],a=e[1],s=e[2],i=e[3],e[4]=d*i+b*r+M*s-l*a,e[5]=M*i+b*a+l*r-d*s,e[6]=l*i+b*s+d*a-M*r,e[7]=b*i-d*r-M*a-l*s,e}static rotateY(e,t,n){let r=-t[0],a=-t[1],s=-t[2],i=t[3],c=t[4],y=t[5],L=t[6],k=t[7],d=c*i+k*r+y*s-L*a,M=y*i+k*a+L*r-c*s,l=L*i+k*s+c*a-y*r,b=k*i-c*r-y*a-L*s;return E.rotateY(e,t,n),r=e[0],a=e[1],s=e[2],i=e[3],e[4]=d*i+b*r+M*s-l*a,e[5]=M*i+b*a+l*r-d*s,e[6]=l*i+b*s+d*a-M*r,e[7]=b*i-d*r-M*a-l*s,e}static rotateZ(e,t,n){let r=-t[0],a=-t[1],s=-t[2],i=t[3],c=t[4],y=t[5],L=t[6],k=t[7],d=c*i+k*r+y*s-L*a,M=y*i+k*a+L*r-c*s,l=L*i+k*s+c*a-y*r,b=k*i-c*r-y*a-L*s;return E.rotateZ(e,t,n),r=e[0],a=e[1],s=e[2],i=e[3],e[4]=d*i+b*r+M*s-l*a,e[5]=M*i+b*a+l*r-d*s,e[6]=l*i+b*s+d*a-M*r,e[7]=b*i-d*r-M*a-l*s,e}static rotateByQuatAppend(e,t,n){let r=n[0],a=n[1],s=n[2],i=n[3],c=t[0],y=t[1],L=t[2],k=t[3];return e[0]=c*i+k*r+y*s-L*a,e[1]=y*i+k*a+L*r-c*s,e[2]=L*i+k*s+c*a-y*r,e[3]=k*i-c*r-y*a-L*s,c=t[4],y=t[5],L=t[6],k=t[7],e[4]=c*i+k*r+y*s-L*a,e[5]=y*i+k*a+L*r-c*s,e[6]=L*i+k*s+c*a-y*r,e[7]=k*i-c*r-y*a-L*s,e}static rotateByQuatPrepend(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=n[0],y=n[1],L=n[2],k=n[3];return e[0]=r*k+i*c+a*L-s*y,e[1]=a*k+i*y+s*c-r*L,e[2]=s*k+i*L+r*y-a*c,e[3]=i*k-r*c-a*y-s*L,c=n[4],y=n[5],L=n[6],k=n[7],e[4]=r*k+i*c+a*L-s*y,e[5]=a*k+i*y+s*c-r*L,e[6]=s*k+i*L+r*y-a*c,e[7]=i*k-r*c-a*y-s*L,e}static rotateAroundAxis(e,t,n,r){if(Math.abs(r)<1e-6)return H.copy(e,t);let a=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);r=r*.5;let s=Math.sin(r),i=s*n[0]/a,c=s*n[1]/a,y=s*n[2]/a,L=Math.cos(r),k=t[0],d=t[1],M=t[2],l=t[3];e[0]=k*L+l*i+d*y-M*c,e[1]=d*L+l*c+M*i-k*y,e[2]=M*L+l*y+k*c-d*i,e[3]=l*L-k*i-d*c-M*y;let b=t[4],h=t[5],m=t[6],o=t[7];return e[4]=b*L+o*i+h*y-m*c,e[5]=h*L+o*c+m*i-b*y,e[6]=m*L+o*y+b*c-h*i,e[7]=o*L-b*i-h*c-m*y,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e}static multiply(e,t,n){let r=t[0],a=t[1],s=t[2],i=t[3],c=n[4],y=n[5],L=n[6],k=n[7],d=t[4],M=t[5],l=t[6],b=t[7],h=n[0],m=n[1],o=n[2],g=n[3];return e[0]=r*g+i*h+a*o-s*m,e[1]=a*g+i*m+s*h-r*o,e[2]=s*g+i*o+r*m-a*h,e[3]=i*g-r*h-a*m-s*o,e[4]=r*k+i*c+a*L-s*y+d*g+b*h+M*o-l*m,e[5]=a*k+i*y+s*c-r*L+M*g+b*m+l*h-d*o,e[6]=s*k+i*L+r*y-a*c+l*g+b*o+d*m-M*h,e[7]=i*k-r*c-a*y-s*L+b*g-d*h-M*m-l*o,e}static mul(e,t,n){return e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e}static dot(e,t){return 0}static lerp(e,t,n,r){let a=1-r;return H.dot(t,n)<0&&(r=-r),e[0]=t[0]*a+n[0]*r,e[1]=t[1]*a+n[1]*r,e[2]=t[2]*a+n[2]*r,e[3]=t[3]*a+n[3]*r,e[4]=t[4]*a+n[4]*r,e[5]=t[5]*a+n[5]*r,e[6]=t[6]*a+n[6]*r,e[7]=t[7]*a+n[7]*r,e}static invert(e,t){let n=H.squaredLength(t);return e[0]=-t[0]/n,e[1]=-t[1]/n,e[2]=-t[2]/n,e[3]=t[3]/n,e[4]=-t[4]/n,e[5]=-t[5]/n,e[6]=-t[6]/n,e[7]=t[7]/n,e}static conjugate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=t[7],e}static magnitude(e){return 0}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){return 0}static sqrLen(e){return 0}static normalize(e,t){let n=H.squaredLength(t);if(n>0){n=Math.sqrt(n);let r=t[0]/n,a=t[1]/n,s=t[2]/n,i=t[3]/n,c=t[4],y=t[5],L=t[6],k=t[7],d=r*c+a*y+s*L+i*k;e[0]=r,e[1]=a,e[2]=s,e[3]=i,e[4]=(c-r*d)/n,e[5]=(y-a*d)/n,e[6]=(L-s*d)/n,e[7]=(k-i*d)/n}return e}static str(e){return`Quat2(${e.join(", ")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]}static equals(e,t){let n=e[0],r=e[1],a=e[2],s=e[3],i=e[4],c=e[5],y=e[6],L=e[7],k=t[0],d=t[1],M=t[2],l=t[3],b=t[4],h=t[5],m=t[6],o=t[7];return Math.abs(n-k)<=1e-6*Math.max(1,Math.abs(n),Math.abs(k))&&Math.abs(r-d)<=1e-6*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(a-M)<=1e-6*Math.max(1,Math.abs(a),Math.abs(M))&&Math.abs(s-l)<=1e-6*Math.max(1,Math.abs(s),Math.abs(l))&&Math.abs(i-b)<=1e-6*Math.max(1,Math.abs(i),Math.abs(b))&&Math.abs(c-h)<=1e-6*Math.max(1,Math.abs(c),Math.abs(h))&&Math.abs(y-m)<=1e-6*Math.max(1,Math.abs(y),Math.abs(m))&&Math.abs(L-o)<=1e-6*Math.max(1,Math.abs(L),Math.abs(o))}},X=H;P(X,"BYTE_LENGTH",8*Float32Array.BYTES_PER_ELEMENT);var be=new E,he=new f;X.dot=E.dot;X.squaredLength=E.squaredLength;X.sqrLen=E.squaredLength;X.mag=E.magnitude;X.length=E.magnitude;X.len=E.magnitude;X.mul=X.multiply;var Ee=X;var ee=class extends Float32Array{constructor(...e){switch(e.length){case 2:{let t=e[0];typeof t=="number"?super([t,e[1]]):super(t,e[1],2);break}case 1:{let t=e[0];typeof t=="number"?super([t,t]):super(t,0,2);break}default:super(2);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get magnitude(){return Math.hypot(this[0],this[1])}get mag(){return this.magnitude}get squaredMagnitude(){let e=this[0],t=this[1];return e*e+t*t}get sqrMag(){return this.squaredMagnitude}get str(){return ee.str(this)}copy(e){return this.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this}distance(e){return ee.distance(this,e)}dist(e){return 0}squaredDistance(e){return ee.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this}dot(e){return this[0]*e[0]+this[1]*e[1]}normalize(){return ee.normalize(this,this)}static create(){return new ee}static clone(e){return new ee(e)}static fromValues(e,t){return new ee(e,t)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e}static set(e,t,n){return e[0]=t,e[1]=n,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e}static sub(e,t,n){return[0,0]}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e}static mul(e,t,n){return[0,0]}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e}static div(e,t,n){return[0,0]}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e}static round(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e}static scaleAndAdd(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e}static distance(e,t){return Math.hypot(t[0]-e[0],t[1]-e[1])}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],r=t[1]-e[1];return n*n+r*r}static sqrDist(e,t){return 0}static magnitude(e){let t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){let t=e[0],n=e[1];return t*t+n*n}static sqrLen(e,t){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e}static normalize(e,t){let n=t[0],r=t[1],a=n*n+r*r;return a>0&&(a=1/Math.sqrt(a)),e[0]=t[0]*a,e[1]=t[1]*a,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]}static cross(e,t,n){let r=t[0]*n[1]-t[1]*n[0];return e[0]=e[1]=0,e[2]=r,e}static lerp(e,t,n,r){let a=t[0],s=t[1];return e[0]=a+r*(n[0]-a),e[1]=s+r*(n[1]-s),e}static transformMat2(e,t,n){let r=t[0],a=t[1];return e[0]=n[0]*r+n[2]*a,e[1]=n[1]*r+n[3]*a,e}static transformMat2d(e,t,n){let r=t[0],a=t[1];return e[0]=n[0]*r+n[2]*a+n[4],e[1]=n[1]*r+n[3]*a+n[5],e}static transformMat3(e,t,n){let r=t[0],a=t[1];return e[0]=n[0]*r+n[3]*a+n[6],e[1]=n[1]*r+n[4]*a+n[7],e}static transformMat4(e,t,n){let r=t[0],a=t[1];return e[0]=n[0]*r+n[4]*a+n[12],e[1]=n[1]*r+n[5]*a+n[13],e}static rotate(e,t,n,r){let a=t[0]-n[0],s=t[1]-n[1],i=Math.sin(r),c=Math.cos(r);return e[0]=a*c-s*i+n[0],e[1]=a*i+s*c+n[1],e}static angle(e,t){let n=e[0],r=e[1],a=t[0],s=t[1],i=Math.sqrt(n*n+r*r)*Math.sqrt(a*a+s*s),c=i&&(n*a+r*s)/i;return Math.acos(Math.min(Math.max(c,-1),1))}static zero(e){return e[0]=0,e[1]=0,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]}static equals(e,t){let n=e[0],r=e[1],a=t[0],s=t[1];return Math.abs(n-a)<=1e-6*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(r-s)<=1e-6*Math.max(1,Math.abs(r),Math.abs(s))}static str(e){return`Vec2(${e.join(", ")})`}},T=ee;P(T,"BYTE_LENGTH",2*Float32Array.BYTES_PER_ELEMENT);T.prototype.sub=T.prototype.subtract;T.prototype.mul=T.prototype.multiply;T.prototype.div=T.prototype.divide;T.prototype.dist=T.prototype.distance;T.prototype.sqrDist=T.prototype.squaredDistance;T.sub=T.subtract;T.mul=T.multiply;T.div=T.divide;T.dist=T.distance;T.sqrDist=T.squaredDistance;T.sqrLen=T.squaredLength;T.mag=T.magnitude;T.length=T.magnitude;T.len=T.magnitude;var Ae=T;var Te=["xx","xy","yx","yy","xxx","xxy","xyx","xyy","yxx","yxy","yyx","yyy","xxxx","xxxy","xxyx","xxyy","xyxx","xyxy","xyyx","xyyy","yxxx","yxxy","yxyx","yxyy","yyxx","yyxy","yyyx","yyyy","rr","rg","gr","gg","rrr","rrg","rgr","rgg","grr","grg","ggr","ggg","rrrr","rrrg","rrgr","rrgg","rgrr","rgrg","rggr","rggg","grrr","grrg","grgr","grgg","ggrr","ggrg","gggr","gggg"],Be=["xz","yz","zx","zy","zz","xxz","xyz","xzx","xzy","xzz","yxz","yyz","yzx","yzy","yzz","zxx","zxy","zxz","zyx","zyy","zyz","zzx","zzy","zzz","xxxz","xxyz","xxzx","xxzy","xxzz","xyxz","xyyz","xyzx","xyzy","xyzz","xzxx","xzxy","xzxz","xzyx","xzyy","xzyz","xzzx","xzzy","xzzz","yxxz","yxyz","yxzx","yxzy","yxzz","yyxz","yyyz","yyzx","yyzy","yyzz","yzxx","yzxy","yzxz","yzyx","yzyy","yzyz","yzzx","yzzy","yzzz","zxxx","zxxy","zxxz","zxyx","zxyy","zxyz","zxzx","zxzy","zxzz","zyxx","zyxy","zyxz","zyyx","zyyy","zyyz","zyzx","zyzy","zyzz","zzxx","zzxy","zzxz","zzyx","zzyy","zzyz","zzzx","zzzy","zzzz","rb","gb","br","bg","bb","rrb","rgb","rbr","rbg","rbb","grb","ggb","gbr","gbg","gbb","brr","brg","brb","bgr","bgg","bgb","bbr","bbg","bbb","rrrb","rrgb","rrbr","rrbg","rrbb","rgrb","rggb","rgbr","rgbg","rgbb","rbrr","rbrg","rbrb","rbgr","rbgg","rbgb","rbbr","rbbg","rbbb","grrb","grgb","grbr","grbg","grbb","ggrb","gggb","ggbr","ggbg","ggbb","gbrr","gbrg","gbrb","gbgr","gbgg","gbgb","gbbr","gbbg","gbbb","brrr","brrg","brrb","brgr","brgg","brgb","brbr","brbg","brbb","bgrr","bgrg","bgrb","bggr","bggg","bggb","bgbr","bgbg","bgbb","bbrr","bbrg","bbrb","bbgr","bbgg","bbgb","bbbr","bbbg","bbbb"],Se=["xw","yw","zw","wx","wy","wz","ww","xxw","xyw","xzw","xwx","xwy","xwz","xww","yxw","yyw","yzw","ywx","ywy","ywz","yww","zxw","zyw","zzw","zwx","zwy","zwz","zww","wxx","wxy","wxz","wxw","wyx","wyy","wyz","wyw","wzx","wzy","wzz","wzw","wwx","wwy","wwz","www","xxxw","xxyw","xxzw","xxwx","xxwy","xxwz","xxww","xyxw","xyyw","xyzw","xywx","xywy","xywz","xyww","xzxw","xzyw","xzzw","xzwx","xzwy","xzwz","xzww","xwxx","xwxy","xwxz","xwxw","xwyx","xwyy","xwyz","xwyw","xwzx","xwzy","xwzz","xwzw","xwwx","xwwy","xwwz","xwww","yxxw","yxyw","yxzw","yxwx","yxwy","yxwz","yxww","yyxw","yyyw","yyzw","yywx","yywy","yywz","yyww","yzxw","yzyw","yzzw","yzwx","yzwy","yzwz","yzww","ywxx","ywxy","ywxz","ywxw","ywyx","ywyy","ywyz","ywyw","ywzx","ywzy","ywzz","ywzw","ywwx","ywwy","ywwz","ywww","zxxw","zxyw","zxzw","zxwx","zxwy","zxwz","zxww","zyxw","zyyw","zyzw","zywx","zywy","zywz","zyww","zzxw","zzyw","zzzw","zzwx","zzwy","zzwz","zzww","zwxx","zwxy","zwxz","zwxw","zwyx","zwyy","zwyz","zwyw","zwzx","zwzy","zwzz","zwzw","zwwx","zwwy","zwwz","zwww","wxxx","wxxy","wxxz","wxxw","wxyx","wxyy","wxyz","wxyw","wxzx","wxzy","wxzz","wxzw","wxwx","wxwy","wxwz","wxww","wyxx","wyxy","wyxz","wyxw","wyyx","wyyy","wyyz","wyyw","wyzx","wyzy","wyzz","wyzw","wywx","wywy","wywz","wyww","wzxx","wzxy","wzxz","wzxw","wzyx","wzyy","wzyz","wzyw","wzzx","wzzy","wzzz","wzzw","wzwx","wzwy","wzwz","wzww","wwxx","wwxy","wwxz","wwxw","wwyx","wwyy","wwyz","wwyw","wwzx","wwzy","wwzz","wwzw","wwwx","wwwy","wwwz","wwww","ra","ga","ba","ar","ag","ab","aa","rra","rga","rba","rar","rag","rab","raa","gra","gga","gba","gar","gag","gab","gaa","bra","bga","bba","bar","bag","bab","baa","arr","arg","arb","ara","agr","agg","agb","aga","abr","abg","abb","aba","aar","aag","aab","aaa","rrra","rrga","rrba","rrar","rrag","rrab","rraa","rgra","rgga","rgba","rgar","rgag","rgab","rgaa","rbra","rbga","rbba","rbar","rbag","rbab","rbaa","rarr","rarg","rarb","rara","ragr","ragg","ragb","raga","rabr","rabg","rabb","raba","raar","raag","raab","raaa","grra","grga","grba","grar","grag","grab","graa","ggra","ggga","ggba","ggar","ggag","ggab","ggaa","gbra","gbga","gbba","gbar","gbag","gbab","gbaa","garr","garg","garb","gara","gagr","gagg","gagb","gaga","gabr","gabg","gabb","gaba","gaar","gaag","gaab","gaaa","brra","brga","brba","brar","brag","brab","braa","bgra","bgga","bgba","bgar","bgag","bgab","bgaa","bbra","bbga","bbba","bbar","bbag","bbab","bbaa","barr","barg","barb","bara","bagr","bagg","bagb","baga","babr","babg","babb","baba","baar","baag","baab","baaa","arrr","arrg","arrb","arra","argr","argg","argb","arga","arbr","arbg","arbb","arba","arar","arag","arab","araa","agrr","agrg","agrb","agra","aggr","aggg","aggb","agga","agbr","agbg","agbb","agba","agar","agag","agab","agaa","abrr","abrg","abrb","abra","abgr","abgg","abgb","abga","abbr","abbg","abbb","abba","abar","abag","abab","abaa","aarr","aarg","aarb","aara","aagr","aagg","aagb","aaga","aabr","aabg","aabb","aaba","aaar","aaag","aaab","aaaa"],te={x:0,r:0,y:1,g:1,z:2,b:2,w:3,a:3};function se(D){switch(D.length){case 2:return function(){return new T(this[te[D[0]]],this[te[D[1]]])};case 3:return function(){return new f(this[te[D[0]]],this[te[D[1]]],this[te[D[2]]])};case 4:return function(){return new Q(this[te[D[0]]],this[te[D[1]]],this[te[D[2]]],this[te[D[3]]])}}}var me=!1;function De(){if(!me){for(let D of Te){let e=se(D);Object.defineProperty(T.prototype,D,{get:e}),Object.defineProperty(f.prototype,D,{get:e}),Object.defineProperty(Q.prototype,D,{get:e})}for(let D of Be){let e=se(D);Object.defineProperty(f.prototype,D,{get:e}),Object.defineProperty(Q.prototype,D,{get:e})}for(let D of Se){let e=se(D);Object.defineProperty(Q.prototype,D,{get:e})}me=!0}}export{De as EnableSwizzles,C as Mat2,v as Mat2d,j as Mat3,Z as Mat4,E as Quat,X as Quat2,T as Vec2,f as Vec3,Q as Vec4,Re as mat2,Ve as mat2d,ge as mat3,we as mat4,qe as quat,Ee as quat2,Ae as vec2,ze as vec3,pe as vec4};
//# sourceMappingURL=gl-matrix.js.map
