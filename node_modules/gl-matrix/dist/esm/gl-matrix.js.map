{
  "version": 3,
  "sources": ["../../src/mat2.ts", "../../src/mat2d.ts", "../../src/mat3.ts", "../../src/vec3.ts", "../../src/mat4.ts", "../../src/vec4.ts", "../../src/quat.ts", "../../src/quat2.ts", "../../src/vec2.ts", "../../src/swizzle.ts"],
  "sourcesContent": ["import { EPSILON } from './common.js';\nimport { Vec2Like } from './vec2.js';\n\n/**\n * A 2x2 Matrix given as a {@link Mat2}, a 4-element Float32Array, or an array\n * of 4 numbers.\n */\nexport type Mat2Like = [\n  number, number,\n  number, number\n] | Float32Array;\n\nconst IDENTITY_2X2 = new Float32Array([\n  1, 0,\n  0, 1\n]);\n\n/**\n * A 2x2 Matrix\n */\nexport class Mat2 extends Float32Array {\n  /**\n   * The number of bytes in a {@link Mat2}.\n   */\n  static readonly BYTE_LENGTH = 4 * Float32Array.BYTES_PER_ELEMENT;\n\n  /**\n   * Create a {@link Mat2}.\n   */\n  constructor(...values: [Readonly<Mat2Like> | ArrayBufferLike, number?] | number[] ) {\n    switch(values.length) {\n      case 4:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 4); break;\n      case 1:\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([\n            v, v,\n            v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 4);\n        }\n        break;\n      default:\n        super(IDENTITY_2X2); break;\n    }\n  }\n\n  //============\n  // Attributes\n  //============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Mat2.str(this);`\n   */\n   get str(): string {\n    return Mat2.str(this);\n  }\n\n  //===================\n  // Instance methods\n  //===================\n\n  /**\n   * Copy the values from another {@link Mat2} into `this`.\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Mat2Like>): Mat2 {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity matrix\n   * Equivalent to Mat2.identity(this)\n   *\n   * @returns `this`\n   */\n  identity(): Mat2 {\n    this.set(IDENTITY_2X2);\n    return this;\n  }\n\n  /**\n   * Multiplies this {@link Mat2} against another one\n   * Equivalent to `Mat2.multiply(this, this, b);`\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `this`\n   */\n  multiply(b: Readonly<Mat2Like>): Mat2 {\n    return Mat2.multiply(this, this, b) as Mat2;\n  }\n\n  /**\n   * Alias for {@link Mat2.multiply}\n   */\n  mul(b: Readonly<Mat2Like>): Mat2 { return this; }\n\n  /**\n   * Transpose this {@link Mat2}\n   * Equivalent to `Mat2.transpose(this, this);`\n   *\n   * @returns `this`\n   */\n  transpose(): Mat2 {\n    return Mat2.transpose(this, this) as Mat2;\n  }\n\n  /**\n   * Inverts this {@link Mat2}\n   * Equivalent to `Mat4.invert(this, this);`\n   *\n   * @returns `this`\n   */\n  invert(): Mat2 {\n    return Mat2.invert(this, this) as Mat2;\n  }\n\n  /**\n   * Scales this {@link Mat2} by the dimensions in the given vec3 not using vectorization\n   * Equivalent to `Mat2.scale(this, this, v);`\n   *\n   * @param v - The {@link Vec2} to scale the matrix by\n   * @returns `this`\n   */\n  scale(v: Readonly<Vec2Like>): Mat2 {\n    return Mat2.scale(this, this, v) as Mat2;\n  }\n\n  /**\n   * Rotates this {@link Mat2} by the given angle around the given axis\n   * Equivalent to `Mat2.rotate(this, this, rad);`\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  rotate(rad: number): Mat2 {\n    return Mat2.rotate(this, this, rad) as Mat2;\n  }\n\n  //================\n  // Static methods\n  //================\n\n  /**\n   * Creates a new, identity {@link Mat2}\n   * @category Static\n   *\n   * @returns A new {@link Mat2}\n   */\n  static create(): Mat2 {\n    return new Mat2();\n  }\n\n  /**\n   * Creates a new {@link Mat2} initialized with values from an existing matrix\n   * @category Static\n   *\n   * @param a - Matrix to clone\n   * @returns A new {@link Mat2}\n   */\n  static clone(a: Readonly<Mat2Like>): Mat2 {\n    return new Mat2(a);\n  }\n\n  /**\n   * Copy the values from one {@link Mat2} to another\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - Matrix to copy\n   * @returns `out`\n   */\n  static copy(out: Mat2Like, a: Readonly<Mat2Like>): Mat2Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Create a new {@link Mat2} with the given values\n   * @category Static\n   *\n   * @param values - Matrix components\n   * @returns A new {@link Mat2}\n   */\n  static fromValues(...values: number[]): Mat2 {\n    return new Mat2(...values);\n  }\n\n  /**\n   * Set the components of a {@link Mat2} to the given values\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @param values - Matrix components\n   * @returns `out`\n   */\n  static set(out: Mat2Like, ...values: number[]): Mat2Like {\n    out[0] = values[0];\n    out[1] = values[1];\n    out[2] = values[2];\n    out[3] = values[3];\n    return out;\n  }\n\n  /**\n   * Set a {@link Mat2} to the identity matrix\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @returns `out`\n   */\n  static identity(out: Mat2Like): Mat2Like {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n  }\n\n  /**\n   * Transpose the values of a {@link Mat2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static transpose(out: Mat2Like, a: Readonly<Mat2Like>): Mat2Like {\n    // If we are transposing ourselves we can skip a few steps but have to cache\n    // some values\n    if (out === a) {\n      let a1 = a[1];\n      out[1] = a[2];\n      out[2] = a1;\n    } else {\n      out[0] = a[0];\n      out[1] = a[2];\n      out[2] = a[1];\n      out[3] = a[3];\n    }\n\n    return out;\n  }\n\n  /**\n   * Inverts a {@link Mat2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static invert(out: Mat2Like, a: Mat2Like): Mat2Like {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n\n    // Calculate the determinant\n    let det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] = a0 * det;\n\n    return out;\n  }\n\n  /**\n   * Calculates the adjugate of a {@link Mat2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static adjoint(out: Mat2Like, a: Mat2Like): Mat2Like {\n    // Caching this value is necessary if out == a\n    const a0 = a[0];\n    out[0] = a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a0;\n    return out;\n  }\n\n  /**\n   * Calculates the determinant of a {@link Mat2}\n   * @category Static\n   *\n   * @param a - the source matrix\n   * @returns determinant of a\n   */\n  static determinant(a: Readonly<Mat2Like>): number {\n    return a[0] * a[3] - a[2] * a[1];\n  }\n\n  /**\n   * Adds two {@link Mat2}'s\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n  }\n\n  /**\n   * Subtracts matrix b from matrix a\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat2.subtract}\n   * @category Static\n   */\n  static sub(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like { return out; }\n\n  /**\n   * Multiplies two {@link Mat2}s\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat2.multiply}\n   * @category Static\n   */\n  static mul(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like { return out; }\n\n  /**\n   * Rotates a {@link Mat2} by the given angle\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotate(out: Mat2Like, a: Readonly<Mat2Like>, rad: number): Mat2Like {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    out[0] = a0 * c + a2 * s;\n    out[1] = a1 * c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n  }\n\n  /**\n   * Scales the {@link Mat2} by the dimensions in the given {@link Vec2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param v - the {@link Vec2} to scale the matrix by\n   * @returns `out`\n   **/\n  static scale(out: Mat2Like, a: Readonly<Mat2Like>, v: Readonly<Vec2Like>): Mat2Like {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const v0 = v[0];\n    const v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat2} from a given angle around a given axis\n   * This is equivalent to (but much faster than):\n   *\n   *     mat2.identity(dest);\n   *     mat2.rotate(dest, dest, rad);\n   * @category Static\n   *\n   * @param out - {@link Mat2} receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromRotation(out: Mat2Like, rad: number): Mat2Like {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat2} from a vector scaling\n   * This is equivalent to (but much faster than):\n   *\n   *     mat2.identity(dest);\n   *     mat2.scale(dest, dest, vec);\n   * @category Static\n   *\n   * @param out - {@link Mat2} receiving operation result\n   * @param v - Scaling vector\n   * @returns `out`\n   */\n  static fromScaling(out: Mat2Like, v: Readonly<Vec2Like>): Mat2Like {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n  }\n\n  /**\n   * Returns Frobenius norm of a {@link Mat2}\n   * @category Static\n   *\n   * @param a - the matrix to calculate Frobenius norm of\n   * @returns Frobenius norm\n   */\n  static frob(a: Readonly<Mat2Like>): number {\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3]);\n  }\n\n  /**\n   * Multiply each element of a {@link Mat2} by a scalar.\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param b - amount to scale the matrix's elements by\n   * @returns `out`\n   */\n  static multiplyScalar(out: Mat2Like, a: Readonly<Mat2Like>, b: number): Mat2Like {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Mat2}'s after multiplying each element of the second operand by a scalar value.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b's elements by before adding\n   * @returns `out`\n   */\n  static multiplyScalarAndAdd(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>, scale: number): Mat2Like {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    return out;\n  }\n\n  /**\n   * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n   * @category Static\n   *\n   * @param L - the lower triangular matrix\n   * @param D - the diagonal matrix\n   * @param U - the upper triangular matrix\n   * @param a - the input matrix to factorize\n   */\n\n  static LDU(L: Mat2Like, D: Readonly<Mat2Like>, U: Mat2Like, a: Readonly<Mat2Like>) {\n    L[2] = a[2] / a[0];\n    U[0] = a[0];\n    U[1] = a[1];\n    U[3] = a[3] - L[2] * U[1];\n    return [L, D, U];\n  }\n\n  /**\n   * Returns whether or not two {@link Mat2}s have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3]\n    );\n  }\n\n  /**\n   * Returns whether or not two {@link Mat2}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static equals(a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n\n    return (\n      Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3))\n    );\n  }\n\n  /**\n   * Returns a string representation of a {@link Mat2}\n   * @category Static\n   *\n   * @param a - matrix to represent as a string\n   * @returns string representation of the matrix\n   */\n  static str(a: Readonly<Mat2Like>): string {\n    return `Mat2(${a.join(', ')})`;\n  }\n\n}\n\n// Instance method alias assignments\nMat2.prototype.mul = Mat2.prototype.multiply;\n\n// Static method alias assignments\nMat2.mul = Mat2.multiply;\nMat2.sub = Mat2.subtract;\n\n/**\n * {@link Mat2} alias for backwards compatibility\n */\nexport const mat2 = Mat2;", "import { EPSILON } from './common.js';\nimport { Vec2Like } from './vec2.js';\n\n/**\n * A 2x3 Matrix given as a {@link Mat2d}, a 6-element Float32Array, or an array\n * of 6 numbers.\n */\nexport type Mat2dLike = [\n  number, number,\n  number, number,\n  number, number\n] | Float32Array;\n\nconst IDENTITY_2X3 = new Float32Array([\n  1, 0,\n  0, 1,\n  0, 0,\n]);\n\n/**\n * A 2x3 Matrix\n */\nexport class Mat2d extends Float32Array {\n  /**\n   * The number of bytes in a {@link Mat2d}.\n   */\n  static readonly BYTE_LENGTH = 6 * Float32Array.BYTES_PER_ELEMENT;\n\n  /**\n   * Create a {@link Mat2}.\n   */\n  constructor(...values: [Readonly<Mat2dLike> | ArrayBufferLike, number?] | number[] ) {\n    switch(values.length) {\n      case 6:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 6); break;\n      case 1:\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([\n            v, v,\n            v, v,\n            v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 6);\n        }\n        break;\n      default:\n        super(IDENTITY_2X3); break;\n    }\n  }\n\n  //============\n  // Attributes\n  //============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Mat2d.str(this);`\n   */\n   get str(): string {\n    return Mat2d.str(this);\n  }\n\n  //===================\n  // Instances methods\n  //===================\n\n  /**\n   * Copy the values from another {@link Mat2d} into `this`.\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Mat2dLike>): Mat2d {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity matrix\n   * Equivalent to Mat2d.identity(this)\n   *\n   * @returns `this`\n   */\n  identity(): Mat2d {\n    this.set(IDENTITY_2X3);\n    return this;\n  }\n\n  /**\n   * Multiplies this {@link Mat2d} against another one\n   * Equivalent to `Mat2d.multiply(this, this, b);`\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `this`\n   */\n  multiply(b: Readonly<Mat2dLike>): Mat2d {\n    return Mat2d.multiply(this, this, b) as Mat2d;\n  }\n\n  /**\n   * Alias for {@link Mat2d.multiply}\n   */\n  mul(b: Readonly<Mat2dLike>): Mat2d { return this; }\n\n  /**\n   * Translate this {@link Mat2d} by the given vector\n   * Equivalent to `Mat2d.translate(this, this, v);`\n   *\n   * @param v - The {@link Vec2} to translate by\n   * @returns `this`\n   */\n  translate(v: Readonly<Vec2Like>): Mat2d {\n    return Mat2d.translate(this, this, v) as Mat2d;\n  }\n\n  /**\n   * Rotates this {@link Mat2d} by the given angle around the given axis\n   * Equivalent to `Mat2d.rotate(this, this, rad);`\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  rotate(rad: number): Mat2d {\n    return Mat2d.rotate(this, this, rad) as Mat2d;\n  }\n\n  /**\n   * Scales this {@link Mat2d} by the dimensions in the given vec3 not using vectorization\n   * Equivalent to `Mat2d.scale(this, this, v);`\n   *\n   * @param v - The {@link Vec2} to scale the matrix by\n   * @returns `this`\n   */\n  scale(v: Readonly<Vec2Like>): Mat2d {\n    return Mat2d.scale(this, this, v) as Mat2d;\n  }\n\n  //================\n  // Static methods\n  //================\n\n  /**\n   * Creates a new, identity {@link Mat2d}\n   * @category Static\n   *\n   * @returns A new {@link Mat2d}\n   */\n  static create(): Mat2d {\n    return new Mat2d();\n  }\n\n  /**\n   * Creates a new {@link Mat2d} initialized with values from an existing matrix\n   * @category Static\n   *\n   * @param a - Matrix to clone\n   * @returns A new {@link Mat2d}\n   */\n  static clone(a: Readonly<Mat2dLike>): Mat2d {\n    return new Mat2d(a);\n  }\n\n  /**\n   * Copy the values from one {@link Mat2d} to another\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - Matrix to copy\n   * @returns `out`\n   */\n  static copy(out: Mat2dLike, a: Readonly<Mat2dLike>): Mat2dLike {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n  }\n\n  /**\n   * Create a new {@link Mat2d} with the given values\n   * @category Static\n   *\n   * @param values - Matrix components\n   * @returns A new {@link Mat2d}\n   */\n  static fromValues(...values: number[]): Mat2d {\n    return new Mat2d(...values);\n  }\n\n  /**\n   * Set the components of a {@link Mat2d} to the given values\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @param values - Matrix components\n   * @returns `out`\n   */\n  static set(out: Mat2dLike, ...values: number[]): Mat2dLike {\n    out[0] = values[0];\n    out[1] = values[1];\n    out[2] = values[2];\n    out[3] = values[3];\n    out[4] = values[4];\n    out[5] = values[5];\n    return out;\n  }\n\n  /**\n   * Set a {@link Mat2d} to the identity matrix\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @returns `out`\n   */\n  static identity(out: Mat2dLike): Mat2dLike {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n  }\n\n  /**\n   * Inverts a {@link Mat2d}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static invert(out: Mat2dLike, a: Mat2dLike): Mat2dLike {\n    const aa = a[0];\n    const ab = a[1];\n    const ac = a[2];\n    const ad = a[3];\n    const atx = a[4];\n    const aty = a[5];\n\n    let det = aa * ad - ab * ac;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n  }\n\n  /**\n   * Calculates the determinant of a {@link Mat2d}\n   * @category Static\n   *\n   * @param a - the source matrix\n   * @returns determinant of a\n   */\n  static determinant(a: Readonly<Mat2dLike>): number {\n    return a[0] * a[3] - a[1] * a[2];\n  }\n\n  /**\n   * Adds two {@link Mat2d}'s\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    return out;\n  }\n\n  /**\n   * Subtracts matrix b from matrix a\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat2d.subtract}\n   * @category Static\n   */\n  static sub(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike { return out; }\n\n  /**\n   * Multiplies two {@link Mat2d}s\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat2d.multiply}\n   * @category Static\n   */\n  static mul(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike { return out; }\n\n  /**\n   * Translate a {@link Mat2d} by the given vector\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to translate\n   * @param v - vector to translate by\n   * @returns `out`\n   */\n  static translate(out: Mat2dLike, a: Readonly<Mat2dLike>, v: Readonly<Vec2Like>): Mat2dLike {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const v0 = v[0];\n    const v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Mat2d} by the given angle\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotate(out: Mat2dLike, a: Readonly<Mat2dLike>, rad: number): Mat2dLike {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    out[0] = a0 * c + a2 * s;\n    out[1] = a1 * c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n  }\n\n  /**\n   * Scales the {@link Mat2d} by the dimensions in the given {@link Vec2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param v - the {@link Vec2} to scale the matrix by\n   * @returns `out`\n   **/\n  static scale(out: Mat2dLike, a: Readonly<Mat2dLike>, v: Readonly<Vec2Like>): Mat2dLike {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const v0 = v[0];\n    const v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n  }\n\n  // TODO: Got to fromRotation\n\n  /**\n   * Creates a {@link Mat2d} from a vector translation\n   * This is equivalent to (but much faster than):\n   *\n   *     Mat2d.identity(dest);\n   *     Mat2d.translate(dest, dest, vec);\n   * @category Static\n   *\n   * @param out - {@link Mat2d} receiving operation result\n   * @param v - Translation vector\n   * @returns `out`\n   */\n  static fromTranslation(out: Mat2dLike, v: Readonly<Vec2Like>): Mat2dLike {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat2d} from a given angle around a given axis\n   * This is equivalent to (but much faster than):\n   *\n   *     Mat2d.identity(dest);\n   *     Mat2d.rotate(dest, dest, rad);\n   * @category Static\n   *\n   * @param out - {@link Mat2d} receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromRotation(out: Mat2dLike, rad: number): Mat2dLike {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat2d} from a vector scaling\n   * This is equivalent to (but much faster than):\n   *\n   *     Mat2d.identity(dest);\n   *     Mat2d.scale(dest, dest, vec);\n   * @category Static\n   *\n   * @param out - {@link Mat2d} receiving operation result\n   * @param v - Scaling vector\n   * @returns `out`\n   */\n  static fromScaling(out: Mat2dLike, v: Readonly<Vec2Like>): Mat2dLike {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n  }\n\n  /**\n   * Returns Frobenius norm of a {@link Mat2d}\n   * @category Static\n   *\n   * @param a - the matrix to calculate Frobenius norm of\n   * @returns Frobenius norm\n   */\n  static frob(a: Readonly<Mat2dLike>): number {\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3] + a[4] * a[4] + a[5] * a[5] + 1);\n  }\n\n  /**\n   * Multiply each element of a {@link Mat2d} by a scalar.\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param b - amount to scale the matrix's elements by\n   * @returns `out`\n   */\n  static multiplyScalar(out: Mat2dLike, a: Readonly<Mat2dLike>, b: number): Mat2dLike {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Mat2d}'s after multiplying each element of the second operand by a scalar value.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b's elements by before adding\n   * @returns `out`\n   */\n  static multiplyScalarAndAdd(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>, scale: number): Mat2dLike {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    out[4] = a[4] + b[4] * scale;\n    out[5] = a[5] + b[5] * scale;\n    return out;\n  }\n\n  /**\n   * Returns whether or not two {@link Mat2d}s have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3] &&\n      a[4] === b[4] &&\n      a[5] === b[5]\n    );\n  }\n\n  /**\n   * Returns whether or not two {@link Mat2d}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static equals(a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n\n    return (\n      Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) &&\n      Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) &&\n      Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5))\n    );\n  }\n\n  /**\n   * Returns a string representation of a {@link Mat2d}\n   * @category Static\n   *\n   * @param a - matrix to represent as a string\n   * @returns string representation of the matrix\n   */\n  static str(a: Readonly<Mat2dLike>): string {\n    return `Mat2d(${a.join(', ')})`;\n  }\n\n}\n\n// Static method alias assignments\nMat2d.mul = Mat2d.multiply;\nMat2d.sub = Mat2d.subtract;\n\n/**\n * {@link Mat2d} alias for backwards compatibility\n */\nexport const mat2d = Mat2d;", "import { EPSILON } from './common.js';\nimport { Mat2dLike } from './mat2d.js';\nimport { Mat4Like } from './mat4.js';\nimport { Vec2Like } from './vec2.js';\nimport { QuatLike } from './quat.js';\n\n/**\n * A 3x3 Matrix given as a {@link Mat3}, a 9-element Float32Array, or an array\n * of 9 numbers.\n */\nexport type Mat3Like = [\n  number, number, number,\n  number, number, number,\n  number, number, number\n] | Float32Array;\n\nconst IDENTITY_3X3 = new Float32Array([\n  1, 0, 0,\n  0, 1, 0,\n  0, 0, 1,\n]);\n\n/**\n * A 3x3 Matrix\n */\nexport class Mat3 extends Float32Array {\n  /**\n   * The number of bytes in a {@link Mat3}.\n   */\n  static readonly BYTE_LENGTH = 9 * Float32Array.BYTES_PER_ELEMENT;\n\n  /**\n   * Create a {@link Mat3}.\n   */\n  constructor(...values: [Readonly<Mat3Like> | ArrayBufferLike, number?] | number[] ) {\n    switch(values.length) {\n      case 9:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 9); break;\n      case 1:\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([\n            v, v, v,\n            v, v, v,\n            v, v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 9);\n        }\n        break;\n      default:\n        super(IDENTITY_3X3); break;\n    }\n  }\n\n  //============\n  // Attributes\n  //============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Mat3.str(this);`\n   */\n   get str(): string {\n    return Mat3.str(this);\n  }\n\n  //===================\n  // Instance methods\n  //===================\n\n  /**\n   * Copy the values from another {@link Mat3} into `this`.\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Mat3Like>): Mat3 {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity matrix\n   * Equivalent to Mat3.identity(this)\n   *\n   * @returns `this`\n   */\n  identity(): Mat3 {\n    this.set(IDENTITY_3X3);\n    return this;\n  }\n\n  /**\n   * Multiplies this {@link Mat3} against another one\n   * Equivalent to `Mat3.multiply(this, this, b);`\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `this`\n   */\n  multiply(b: Readonly<Mat3Like>): Mat3 {\n    return Mat3.multiply(this, this, b) as Mat3;\n  }\n\n  /**\n   * Alias for {@link Mat3.multiply}\n   */\n  mul(b: Readonly<Mat3Like>): Mat3 { return this; }\n\n  /**\n   * Transpose this {@link Mat3}\n   * Equivalent to `Mat3.transpose(this, this);`\n   *\n   * @returns `this`\n   */\n  transpose(): Mat3 {\n    return Mat3.transpose(this, this) as Mat3;\n  }\n\n  /**\n   * Inverts this {@link Mat3}\n   * Equivalent to `Mat4.invert(this, this);`\n   *\n   * @returns `this`\n   */\n  invert(): Mat3 {\n    return Mat3.invert(this, this) as Mat3;\n  }\n\n  /**\n   * Translate this {@link Mat3} by the given vector\n   * Equivalent to `Mat3.translate(this, this, v);`\n   *\n   * @param v - The {@link Vec2} to translate by\n   * @returns `this`\n   */\n  translate(v: Readonly<Vec2Like>): Mat3 {\n    return Mat3.translate(this, this, v) as Mat3;\n  }\n\n  /**\n   * Rotates this {@link Mat3} by the given angle around the given axis\n   * Equivalent to `Mat3.rotate(this, this, rad);`\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  rotate(rad: number): Mat3 {\n    return Mat3.rotate(this, this, rad) as Mat3;\n  }\n\n  /**\n   * Scales this {@link Mat3} by the dimensions in the given vec3 not using vectorization\n   * Equivalent to `Mat3.scale(this, this, v);`\n   *\n   * @param v - The {@link Vec2} to scale the matrix by\n   * @returns `this`\n   */\n  scale(v: Readonly<Vec2Like>): Mat3 {\n    return Mat3.scale(this, this, v) as Mat3;\n  }\n\n  //================\n  // Static methods\n  //================\n\n  /**\n   * Creates a new, identity {@link Mat3}\n   * @category Static\n   *\n   * @returns A new {@link Mat3}\n   */\n  static create(): Mat3 {\n    return new Mat3();\n  }\n\n  /**\n   * Creates a new {@link Mat3} initialized with values from an existing matrix\n   * @category Static\n   *\n   * @param a - Matrix to clone\n   * @returns A new {@link Mat3}\n   */\n  static clone(a: Readonly<Mat3Like>): Mat3 {\n    return new Mat3(a);\n  }\n\n  /**\n   * Copy the values from one {@link Mat3} to another\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - Matrix to copy\n   * @returns `out`\n   */\n  static copy(out: Mat3Like, a: Readonly<Mat3Like>): Mat3Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n  }\n\n  /**\n   * Create a new {@link Mat3} with the given values\n   * @category Static\n   *\n   * @param values - Matrix components\n   * @returns A new {@link Mat3}\n   */\n  static fromValues(...values: number[]): Mat3 {\n    return new Mat3(...values);\n  }\n\n  /**\n   * Set the components of a {@link Mat3} to the given values\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @param values - Matrix components\n   * @returns `out`\n   */\n  static set(out: Mat3Like, ...values: number[]): Mat3Like {\n    out[0] = values[0];\n    out[1] = values[1];\n    out[2] = values[2];\n    out[3] = values[3];\n    out[4] = values[4];\n    out[5] = values[5];\n    out[6] = values[6];\n    out[7] = values[7];\n    out[8] = values[8];\n    return out;\n  }\n\n  /**\n   * Set a {@link Mat3} to the identity matrix\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @returns `out`\n   */\n  static identity(out: Mat3Like): Mat3Like {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Transpose the values of a {@link Mat3}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static transpose(out: Mat3Like, a: Readonly<Mat3Like>): Mat3Like {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n      const a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n      out[1] = a[3];\n      out[2] = a[6];\n      out[3] = a01;\n      out[5] = a[7];\n      out[6] = a02;\n      out[7] = a12;\n    } else {\n      out[0] = a[0];\n      out[1] = a[3];\n      out[2] = a[6];\n      out[3] = a[1];\n      out[4] = a[4];\n      out[5] = a[7];\n      out[6] = a[2];\n      out[7] = a[5];\n      out[8] = a[8];\n    }\n\n    return out;\n  }\n\n  /**\n   * Inverts a {@link Mat3}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static invert(out: Mat3Like, a: Mat3Like): Mat3Like {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n    const a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n    const a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n\n    const b01 = a22 * a11 - a12 * a21;\n    const b11 = -a22 * a10 + a12 * a20;\n    const b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n  }\n\n  /**\n   * Calculates the adjugate of a {@link Mat3}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static adjoint(out: Mat3Like, a: Mat3Like): Mat3Like {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n\n    out[0] = a11 * a22 - a12 * a21;\n    out[1] = a02 * a21 - a01 * a22;\n    out[2] = a01 * a12 - a02 * a11;\n    out[3] = a12 * a20 - a10 * a22;\n    out[4] = a00 * a22 - a02 * a20;\n    out[5] = a02 * a10 - a00 * a12;\n    out[6] = a10 * a21 - a11 * a20;\n    out[7] = a01 * a20 - a00 * a21;\n    out[8] = a00 * a11 - a01 * a10;\n    return out;\n  }\n\n  /**\n   * Calculates the determinant of a {@link Mat3}\n   * @category Static\n   *\n   * @param a - the source matrix\n   * @returns determinant of a\n   */\n  static determinant(a: Readonly<Mat3Like>): number {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n\n    return (\n      a00 * (a22 * a11 - a12 * a21) +\n      a01 * (-a22 * a10 + a12 * a20) +\n      a02 * (a21 * a10 - a11 * a20)\n    );\n  }\n\n  /**\n   * Adds two {@link Mat3}'s\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n  }\n\n  /**\n   * Subtracts matrix b from matrix a\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat3.subtract}\n   * @category Static\n   */\n  static sub(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like { return out; }\n\n  /**\n   * Multiplies two {@link Mat3}s\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n\n    let b0 = b[0];\n    let b1 = b[1];\n    let b2 = b[2];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22;\n\n    b0 = b[3];\n    b1 = b[4];\n    b2 = b[5];\n    out[3] = b0 * a00 + b1 * a10 + b2 * a20;\n    out[4] = b0 * a01 + b1 * a11 + b2 * a21;\n    out[5] = b0 * a02 + b1 * a12 + b2 * a22;\n\n    b0 = b[6];\n    b1 = b[7];\n    b2 = b[8];\n    out[6] = b0 * a00 + b1 * a10 + b2 * a20;\n    out[7] = b0 * a01 + b1 * a11 + b2 * a21;\n    out[8] = b0 * a02 + b1 * a12 + b2 * a22;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat3.multiply}\n   * @category Static\n   */\n  static mul(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like { return out; }\n\n  /**\n   * Translate a {@link Mat3} by the given vector\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to translate\n   * @param v - vector to translate by\n   * @returns `out`\n   */\n  static translate(out: Mat3Like, a: Readonly<Mat3Like>, v: Readonly<Vec2Like>): Mat3Like {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n    const x = v[0];\n    const y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Mat3} by the given angle\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotate(out: Mat3Like, a: Readonly<Mat3Like>, rad: number): Mat3Like {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n  }\n\n  /**\n   * Scales the {@link Mat3} by the dimensions in the given {@link Vec2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param v - the {@link Vec2} to scale the matrix by\n   * @returns `out`\n   **/\n  static scale(out: Mat3Like, a: Readonly<Mat3Like>, v: Readonly<Vec2Like>): Mat3Like {\n    const x = v[0];\n    const y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat3} from a vector translation\n   * This is equivalent to (but much faster than):\n   *\n   *     mat3.identity(dest);\n   *     mat3.translate(dest, dest, vec);\n   * @category Static\n   *\n   * @param out - {@link Mat3} receiving operation result\n   * @param v - Translation vector\n   * @returns `out`\n   */\n  static fromTranslation(out: Mat3Like, v: Readonly<Vec2Like>): Mat3Like {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat3} from a given angle around a given axis\n   * This is equivalent to (but much faster than):\n   *\n   *     mat3.identity(dest);\n   *     mat3.rotate(dest, dest, rad);\n   * @category Static\n   *\n   * @param out - {@link Mat3} receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromRotation(out: Mat3Like, rad: number): Mat3Like {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat3} from a vector scaling\n   * This is equivalent to (but much faster than):\n   *\n   *     mat3.identity(dest);\n   *     mat3.scale(dest, dest, vec);\n   * @category Static\n   *\n   * @param out - {@link Mat3} receiving operation result\n   * @param v - Scaling vector\n   * @returns `out`\n   */\n  static fromScaling(out: Mat3Like, v: Readonly<Vec2Like>): Mat3Like {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Copies the upper-left 3x3 values of a {@link Mat2d} into the given\n   * {@link Mat3}.\n   * @category Static\n   *\n   * @param out - the receiving 3x3 matrix\n   * @param a - the source 2x3 matrix\n   * @returns `out`\n   */\n  static fromMat2d(out: Mat3Like, a: Readonly<Mat2dLike>): Mat3Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Calculates a {@link Mat3} from the given quaternion\n   *\n   * @param out - {@link Mat3} receiving operation result\n   * @param q - {@link Quat} to create matrix from\n   * @returns `out`\n   */\n  static fromQuat(out: Mat3Like, q: Readonly<QuatLike>): Mat3Like {\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n  }\n\n  /**\n   * Copies the upper-left 3x3 values of a {@link Mat4} into the given\n   * {@link Mat3}.\n   * @category Static\n   *\n   * @param out - the receiving 3x3 matrix\n   * @param a - the source 4x4 matrix\n   * @returns `out`\n   */\n  static fromMat4(out: Mat3Like, a: Readonly<Mat4Like>): Mat3Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n  }\n\n  /**\n   * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n   * @category Static\n   *\n   * @param {mat3} out mat3 receiving operation result\n   * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n   * @returns `out`\n   */\n  static normalFromMat4(out: Mat3Like, a: Readonly<Mat4Like>): Mat3Like {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n    const a30 = a[12];\n    const a31 = a[13];\n    const a32 = a[14];\n    const a33 = a[15];\n\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det =\n      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n  }\n\n  /**\n   * Generates a 2D projection matrix with the given bounds\n   * @category Static\n   *\n   * @param out mat3 frustum matrix will be written into\n   * @param width Width of your gl context\n   * @param height Height of gl context\n   * @returns `out`\n   */\n  static projection(out: Mat3Like, width: number, height: number): Mat3Like {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Returns Frobenius norm of a {@link Mat3}\n   * @category Static\n   *\n   * @param a - the matrix to calculate Frobenius norm of\n   * @returns Frobenius norm\n   */\n  static frob(a: Readonly<Mat3Like>): number {\n    return Math.sqrt(\n      a[0] * a[0] +\n      a[1] * a[1] +\n      a[2] * a[2] +\n      a[3] * a[3] +\n      a[4] * a[4] +\n      a[5] * a[5] +\n      a[6] * a[6] +\n      a[7] * a[7] +\n      a[8] * a[8]\n    );\n  }\n\n  /**\n   * Multiply each element of a {@link Mat3} by a scalar.\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param b - amount to scale the matrix's elements by\n   * @returns `out`\n   */\n  static multiplyScalar(out: Mat3Like, a: Readonly<Mat3Like>, b: number): Mat3Like {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Mat3}'s after multiplying each element of the second operand by a scalar value.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b's elements by before adding\n   * @returns `out`\n   */\n  static multiplyScalarAndAdd(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>, scale: number): Mat3Like {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    out[4] = a[4] + b[4] * scale;\n    out[5] = a[5] + b[5] * scale;\n    out[6] = a[6] + b[6] * scale;\n    out[7] = a[7] + b[7] * scale;\n    out[8] = a[8] + b[8] * scale;\n    return out;\n  }\n\n  /**\n   * Returns whether or not two {@link Mat3}s have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3] &&\n      a[4] === b[4] &&\n      a[5] === b[5] &&\n      a[6] === b[6] &&\n      a[7] === b[7] &&\n      a[8] === b[8]\n    );\n  }\n\n  /**\n   * Returns whether or not two {@link Mat3}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static equals(a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const a6 = a[6];\n    const a7 = a[7];\n    const a8 = a[8];\n\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n    const b6 = b[6];\n    const b7 = b[7];\n    const b8 = b[8];\n\n    return (\n      Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) &&\n      Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) &&\n      Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) &&\n      Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) &&\n      Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) &&\n      Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8))\n    );\n  }\n\n  /**\n   * Returns a string representation of a {@link Mat3}\n   * @category Static\n   *\n   * @param a - matrix to represent as a string\n   * @returns string representation of the matrix\n   */\n  static str(a: Readonly<Mat3Like>): string {\n    return `Mat3(${a.join(', ')})`;\n  }\n}\n\n// Instance method alias assignments\nMat3.prototype.mul = Mat3.prototype.multiply;\n\n// Static method alias assignments\nMat3.mul = Mat3.multiply;\nMat3.sub = Mat3.subtract;\n\n/**\n * {@link Mat3} alias for backwards compatibility\n */\nexport const mat3 = Mat3;", "import { EPSILON } from './common.js';\nimport { Mat4Like } from './mat4.js';\nimport { Mat3Like } from './mat3.js';\nimport { QuatLike } from './quat.js';\n\n/**\n * A 3 dimensional vector given as a {@link Vec3}, a 3-element Float32Array, or\n * an array of 3 numbers.\n */\nexport type Vec3Like = [number, number, number] | Float32Array;\n\n /**\n  * 3 Dimensional Vector\n  */\nexport class Vec3 extends Float32Array {\n  /**\n  * The number of bytes in a {@link Vec3}.\n  */\n   static readonly BYTE_LENGTH = 3 * Float32Array.BYTES_PER_ELEMENT;\n\n  /**\n  * Create a {@link Vec3}.\n  */\n  constructor(...values: [Readonly<Vec3Like> | ArrayBufferLike, number?] | number[]) {\n    switch(values.length) {\n      case 3:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 3); break;\n      case 1: {\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([v, v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 3);\n        }\n        break;\n      }\n      default:\n        super(3); break;\n    }\n  }\n\n  //============\n  // Attributes\n  //============\n\n  // Getters and setters to make component access read better.\n  // These are likely to be a little bit slower than direct array access.\n\n  /**\n   * The x component of the vector. Equivalent to `this[0];`\n   * @category Vector components\n   */\n  get x(): number { return this[0]; }\n  set x(value: number) { this[0] = value; }\n\n  /**\n   * The y component of the vector. Equivalent to `this[1];`\n   * @category Vector components\n   */\n  get y(): number { return this[1]; }\n  set y(value: number) { this[1] = value; }\n\n  /**\n   * The z component of the vector. Equivalent to `this[2];`\n   * @category Vector components\n   */\n  get z(): number { return this[2]; }\n  set z(value: number) { this[2] = value; }\n\n  // Alternate set of getters and setters in case this is being used to define\n  // a color.\n\n  /**\n   * The r component of the vector. Equivalent to `this[0];`\n   * @category Color components\n   */\n  get r(): number { return this[0]; }\n  set r(value: number) { this[0] = value; }\n\n  /**\n   * The g component of the vector. Equivalent to `this[1];`\n   * @category Color components\n   */\n  get g(): number { return this[1]; }\n  set g(value: number) { this[1] = value; }\n\n  /**\n   * The b component of the vector. Equivalent to `this[2];`\n   * @category Color components\n   */\n  get b(): number { return this[2]; }\n  set b(value: number) { this[2] = value; }\n\n  /**\n   * The magnitude (length) of this.\n   * Equivalent to `Vec3.magnitude(this);`\n   *\n   * Magnitude is used because the `length` attribute is already defined by\n   * `Float32Array` to mean the number of elements in the array.\n   */\n  get magnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\n   * Alias for {@link Vec3.magnitude}\n   */\n  get mag(): number { return this.magnitude; }\n\n  /**\n   * The squared magnitude (length) of `this`.\n   * Equivalent to `Vec3.squaredMagnitude(this);`\n   */\n  get squaredMagnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    return x * x + y * y + z * z;\n  }\n  /**\n   * Alias for {@link Vec3.squaredMagnitude}\n   */\n  get sqrMag(): number { return this.squaredMagnitude; }\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Vec3.str(this);`\n   */\n  get str(): string {\n    return Vec3.str(this);\n  }\n\n  //===================\n  // Instances methods\n  //===================\n\n  /**\n   * Copy the values from another {@link Vec3} into `this`.\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Vec3Like>): Vec3 {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Adds a {@link Vec3} to `this`.\n   * Equivalent to `Vec3.add(this, this, b);`\n   *\n   * @param b - The vector to add to `this`\n   * @returns `this`\n   */\n  add(b: Readonly<Vec3Like>): Vec3 {\n    this[0] += b[0];\n    this[1] += b[1];\n    this[2] += b[2];\n    return this;\n  }\n\n  /**\n   * Subtracts a {@link Vec3} from `this`.\n   * Equivalent to `Vec3.subtract(this, this, b);`\n   *\n   * @param b - The vector to subtract from `this`\n   * @returns `this`\n   */\n  subtract(b: Readonly<Vec3Like>): Vec3 {\n    this[0] -= b[0];\n    this[1] -= b[1];\n    this[2] -= b[2];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec3.subtract}\n   */\n  sub(b: Readonly<Vec3Like>): Vec3 { return this; }\n\n  /**\n   * Multiplies `this` by a {@link Vec3}.\n   * Equivalent to `Vec3.multiply(this, this, b);`\n   *\n   * @param b - The vector to multiply `this` by\n   * @returns `this`\n   */\n  multiply(b: Readonly<Vec3Like>): Vec3 {\n    this[0] *= b[0];\n    this[1] *= b[1];\n    this[2] *= b[2];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec3.multiply}\n   */\n  mul(b: Readonly<Vec3Like>): Vec3 { return this; }\n\n  /**\n   * Divides `this` by a {@link Vec3}.\n   * Equivalent to `Vec3.divide(this, this, b);`\n   *\n   * @param b - The vector to divide `this` by\n   * @returns `this`\n   */\n  divide(b: Readonly<Vec3Like>): Vec3 {\n    this[0] /= b[0];\n    this[1] /= b[1];\n    this[2] /= b[2];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec3.divide}\n   */\n  div(b: Readonly<Vec3Like>): Vec3 { return this; }\n\n  /**\n   * Scales `this` by a scalar number.\n   * Equivalent to `Vec3.scale(this, this, b);`\n   *\n   * @param b - Amount to scale `this` by\n   * @returns `this`\n   */\n  scale(b: number): Vec3 {\n    this[0] *= b;\n    this[1] *= b;\n    this[2] *= b;\n    return this;\n  }\n\n  /**\n   * Calculates `this` scaled by a scalar value then adds the result to `this`.\n   * Equivalent to `Vec3.scaleAndAdd(this, this, b, scale);`\n   *\n   * @param b - The vector to add to `this`\n   * @param scale - The amount to scale `b` by before adding\n   * @returns `this`\n   */\n  scaleAndAdd(b: Readonly<Vec3Like>, scale: number): Vec3 {\n    this[0] += b[0] * scale;\n    this[1] += b[1] * scale;\n    this[2] += b[2] * scale;\n    return this;\n  }\n\n  /**\n   * Calculates the euclidian distance between another {@link Vec3} and `this`.\n   * Equivalent to `Vec3.distance(this, b);`\n   *\n   * @param b - The vector to calculate the distance to\n   * @returns Distance between `this` and `b`\n   */\n  distance(b: Readonly<Vec3Like>): number {\n    return Vec3.distance(this, b);\n  }\n  /**\n   * Alias for {@link Vec3.distance}\n   */\n  dist(b: Readonly<Vec3Like>): number { return 0; }\n\n  /**\n   * Calculates the squared euclidian distance between another {@link Vec3} and `this`.\n   * Equivalent to `Vec3.squaredDistance(this, b);`\n   *\n   * @param b The vector to calculate the squared distance to\n   * @returns Squared distance between `this` and `b`\n   */\n  squaredDistance(b: Readonly<Vec3Like>): number {\n    return Vec3.squaredDistance(this, b);\n  }\n  /**\n   * Alias for {@link Vec3.squaredDistance}\n   */\n  sqrDist(b: Readonly<Vec3Like>): number { return 0; }\n\n  /**\n   * Negates the components of `this`.\n   * Equivalent to `Vec3.negate(this, this);`\n   *\n   * @returns `this`\n   */\n  negate(): Vec3 {\n    this[0] *= -1;\n    this[1] *= -1;\n    this[2] *= -1;\n    return this;\n  }\n\n  /**\n   * Inverts the components of `this`.\n   * Equivalent to `Vec3.inverse(this, this);`\n   *\n   * @returns `this`\n   */\n  invert(): Vec3 {\n    this[0] = 1.0 / this[0];\n    this[1] = 1.0 / this[1];\n    this[2] = 1.0 / this[2];\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of this and another {@link Vec3}.\n   * Equivalent to `Vec3.dot(this, b);`\n   *\n   * @param b - The second operand\n   * @returns Dot product of `this` and `b`\n   */\n  dot(b: Readonly<Vec3Like>): number {\n    return this[0] * b[0] + this[1] * b[1] + this[2] * b[2];\n  }\n\n  /**\n   * Normalize `this`.\n   * Equivalent to `Vec3.normalize(this, this);`\n   *\n   * @returns `this`\n   */\n   normalize(): Vec3 {\n    return Vec3.normalize(this, this) as Vec3;\n  }\n\n  //================\n  // Static methods\n  //================\n\n  /**\n   * Creates a new, empty vec3\n   * @category Static\n   *\n   * @returns a new 3D vector\n   */\n  static create(): Vec3 {\n    return new Vec3();\n  }\n\n  /**\n   * Creates a new vec3 initialized with values from an existing vector\n   * @category Static\n   *\n   * @param a - vector to clone\n   * @returns a new 3D vector\n   */\n  static clone(a: Readonly<Vec3Like>): Vec3 {\n    return new Vec3(a);\n  }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Vec3}\n   * @category Static\n   *\n   * @param a - Vector to calculate magnitude of\n   * @returns Magnitude of a\n   */\n  static magnitude(a: Readonly<Vec3Like>): number {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\n   * Alias for {@link Vec3.magnitude}\n   * @category Static\n   */\n  static mag(a: Readonly<Vec3Like>): number { return 0; }\n  /**\n   * Alias for {@link Vec3.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec3.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   *\n   * @param a - vector to calculate length of\n   * @returns length of a\n   */\n  // @ts-ignore: Length conflicts with Function.length\n  static length(a: Readonly<Vec3Like>): number { return 0; }\n  /**\n   * Alias for {@link Vec3.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec3.mag}\n   */\n  static len(a: Readonly<Vec3Like>): number { return 0; }\n\n  /**\n   * Creates a new vec3 initialized with the given values\n   * @category Static\n   *\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @returns a new 3D vector\n   */\n  static fromValues(x: number, y: number, z: number): Vec3 {\n    return new Vec3(x, y, z);\n  }\n\n  /**\n   * Copy the values from one vec3 to another\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the source vector\n   * @returns `out`\n   */\n  static copy(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n  }\n\n  /**\n   * Set the components of a vec3 to the given values\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @returns `out`\n   */\n  static set(out: Vec3Like, x: number, y: number, z: number): Vec3Like {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Vec3}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static add(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n  }\n\n  /**\n   * Subtracts vector b from vector a\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec3.subtract}\n   * @category Static\n   */\n  static sub(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like { return [0, 0, 0]; };\n\n  /**\n   * Multiplies two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static multiply(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec3.multiply}\n   * @category Static\n   */\n  static mul(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like { return [0, 0, 0]; }\n\n  /**\n   * Divides two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static divide(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec3.divide}\n   * @category Static\n   */\n   static div(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like { return [0, 0, 0]; };\n\n  /**\n   * Math.ceil the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to ceil\n   * @returns `out`\n   */\n  static ceil(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n  }\n\n  /**\n   * Math.floor the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to floor\n   * @returns `out`\n   */\n  static floor(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n  }\n\n  /**\n   * Returns the minimum of two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static min(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n  }\n\n  /**\n   * Returns the maximum of two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static max(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n  }\n\n  /**\n   * symmetric round the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to round\n   * @returns `out`\n   */\n  /*static round(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = glMatrix.round(a[0]);\n    out[1] = glMatrix.round(a[1]);\n    out[2] = glMatrix.round(a[2]);\n    return out;\n  }*/\n\n  /**\n   * Scales a vec3 by a scalar number\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to scale\n   * @param scale - amount to scale the vector by\n   * @returns `out`\n   */\n  static scale(out: Vec3Like, a: Readonly<Vec3Like>, scale: number): Vec3Like {\n    out[0] = a[0] * scale;\n    out[1] = a[1] * scale;\n    out[2] = a[2] * scale;\n    return out;\n  }\n\n  /**\n   * Adds two vec3's after scaling the second operand by a scalar value\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b by before adding\n   * @returns `out`\n   */\n  static scaleAndAdd(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, scale: number) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    return out;\n  }\n\n  /**\n   * Calculates the euclidian distance between two vec3's\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns distance between a and b\n   */\n  static distance(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\n   * Alias for {@link Vec3.distance}\n   */\n  static dist(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number { return 0; }\n\n  /**\n   * Calculates the squared euclidian distance between two vec3's\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns squared distance between a and b\n   */\n  static squaredDistance(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n    return x * x + y * y + z * z;\n  }\n  /**\n   * Alias for {@link Vec3.squaredDistance}\n   */\n  static sqrDist(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number { return 0; }\n\n  /**\n   * Calculates the squared length of a vec3\n   * @category Static\n   *\n   * @param a - vector to calculate squared length of\n   * @returns squared length of a\n   */\n  static squaredLength(a: Readonly<Vec3Like>): number {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    return x * x + y * y + z * z;\n  }\n  /**\n   * Alias for {@link Vec3.squaredLength}\n   */\n  static sqrLen(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number { return 0; }\n\n  /**\n   * Negates the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to negate\n   * @returns `out`\n   */\n  static negate(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n  }\n\n  /**\n   * Returns the inverse of the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to invert\n   * @returns `out`\n   */\n  static inverse(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n  }\n\n  /**\n   * Normalize a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to normalize\n   * @returns `out`\n   */\n  static normalize(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n      //TODO: evaluate use of glm_invsqrt here?\n      len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two vec3's\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns dot product of a and b\n   */\n  static dot(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n\n  /**\n   * Computes the cross product of two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static cross(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    const ax = a[0],\n      ay = a[1],\n      az = a[2];\n    const bx = b[0],\n      by = b[1],\n      bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n  }\n\n  /**\n   * Performs a linear interpolation between two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static lerp(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, t: number): Vec3Like {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n  }\n\n  /**\n   * Performs a spherical linear interpolation between two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static slerp(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, t: number): Vec3Like {\n    const angle = Math.acos(Math.min(Math.max(Vec3.dot(a, b), -1), 1));\n    const sinTotal = Math.sin(angle);\n\n    const ratioA = Math.sin((1 - t) * angle) / sinTotal;\n    const ratioB = Math.sin(t * angle) / sinTotal;\n    out[0] = ratioA * a[0] + ratioB * b[0];\n    out[1] = ratioA * a[1] + ratioB * b[1];\n    out[2] = ratioA * a[2] + ratioB * b[2];\n\n    return out;\n  }\n\n  /**\n   * Performs a hermite interpolation with two control points\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param c - the third operand\n   * @param d - the fourth operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static hermite(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, c: Readonly<Vec3Like>, d: Readonly<Vec3Like>, t: number): Vec3Like {\n    const factorTimes2 = t * t;\n    const factor1 = factorTimes2 * (2 * t - 3) + 1;\n    const factor2 = factorTimes2 * (t - 2) + t;\n    const factor3 = factorTimes2 * (t - 1);\n    const factor4 = factorTimes2 * (3 - 2 * t);\n\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n    return out;\n  }\n\n  /**\n   * Performs a bezier interpolation with two control points\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param c - the third operand\n   * @param d - the fourth operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static bezier(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, c: Readonly<Vec3Like>, d: Readonly<Vec3Like>, t: number): Vec3Like {\n    const inverseFactor = 1 - t;\n    const inverseFactorTimesTwo = inverseFactor * inverseFactor;\n    const factorTimes2 = t * t;\n    const factor1 = inverseFactorTimesTwo * inverseFactor;\n    const factor2 = 3 * t * inverseFactorTimesTwo;\n    const factor3 = 3 * factorTimes2 * inverseFactor;\n    const factor4 = factorTimes2 * t;\n\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n    return out;\n  }\n\n  /**\n   * Generates a random vector with the given scale\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n   * @returns `out`\n   */\n  /*static random(out: Vec3Like, scale) {\n    scale = scale === undefined ? 1.0 : scale;\n\n    let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    let z = glMatrix.RANDOM() * 2.0 - 1.0;\n    let zScale = Math.sqrt(1.0 - z * z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n  }*/\n\n  /**\n   * Transforms the vec3 with a mat4.\n   * 4th vector component is implicitly '1'\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param m - matrix to transform with\n   * @returns `out`\n   */\n  static transformMat4(out: Vec3Like, a: Readonly<Vec3Like>, m: Readonly<Mat4Like>): Vec3Like {\n    const x = a[0],\n      y = a[1],\n      z = a[2];\n    const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n  }\n\n  /**\n   * Transforms the vec3 with a mat3.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param m - the 3x3 matrix to transform with\n   * @returns `out`\n   */\n  static transformMat3(out: Vec3Like, a: Vec3Like, m: Mat3Like): Vec3Like {\n    let x = a[0],\n      y = a[1],\n      z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n  }\n\n  /**\n   * Transforms the vec3 with a quat\n   * Can also be used for dual quaternions. (Multiply it with the real part)\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param q - quaternion to transform with\n   * @returns `out`\n   */\n  static transformQuat(out: Vec3Like, a: Readonly<Vec3Like>, q: Readonly<QuatLike>): Vec3Like {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const w2 = q[3] * 2;\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    const uvx = (qy * z - qz * y);\n    const uvy = (qz * x - qx * z);\n    const uvz = (qx * y - qy * x);\n    // var uuv = vec3.cross([], qvec, uv);\n    // vec3.scale(uuv, uuv, 2);\n    const uuvx = (qy * uvz - qz * uvy) * 2;\n    const uuvy = (qz * uvx - qx * uvz) * 2;\n    const uuvz = (qx * uvy - qy * uvx) * 2;\n    // vec3.scale(uv, uv, 2 * w);\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + (uvx*w2) + uuvx;\n    out[1] = y + (uvy*w2) + uuvy;\n    out[2] = z + (uvz*w2) + uuvz;\n    return out;\n  }\n\n  /**\n   * Rotate a 3D vector around the x-axis\n   * @param out - The receiving vec3\n   * @param a - The vec3 point to rotate\n   * @param b - The origin of the rotation\n   * @param rad - The angle of rotation in radians\n   * @returns `out`\n   */\n  static rotateX(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, rad: number): Vec3Like {\n    const by = b[1];\n    const bz = b[2];\n\n    //Translate point to the origin\n    const py = a[1] - by;\n    const pz = a[2] - bz;\n\n    //perform rotation\n    //translate to correct position\n    out[0] = a[0];\n    out[1] = (py * Math.cos(rad) - pz * Math.sin(rad)) + by;\n    out[2] = (py * Math.sin(rad) + pz * Math.cos(rad)) + bz;\n\n    return out;\n  }\n\n  /**\n   * Rotate a 3D vector around the y-axis\n   * @param out - The receiving vec3\n   * @param a - The vec3 point to rotate\n   * @param b - The origin of the rotation\n   * @param rad - The angle of rotation in radians\n   * @returns `out`\n   */\n  static rotateY(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, rad: number): Vec3Like {\n    const bx = b[0];\n    const bz = b[2];\n\n    //Translate point to the origin\n    const px = a[0] - bx;\n    const pz = a[2] - bz;\n\n    //perform rotation\n    //translate to correct position\n    out[0] = (pz * Math.sin(rad) + px * Math.cos(rad)) + bx;\n    out[1] = a[1];\n    out[2] = (pz * Math.cos(rad) - px * Math.sin(rad)) + bz;\n\n    return out;\n  }\n\n  /**\n   * Rotate a 3D vector around the z-axis\n   * @param out - The receiving vec3\n   * @param a - The vec3 point to rotate\n   * @param b - The origin of the rotation\n   * @param rad - The angle of rotation in radians\n   * @returns `out`\n   */\n  static rotateZ(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, rad: number): Vec3Like {\n    const bx = b[0];\n    const by = b[1];\n\n    //Translate point to the origin\n    const px = a[0] - bx;\n    const py = a[1] - by;\n\n    //perform rotation\n    //translate to correct position\n    out[0] = (px * Math.cos(rad) - py * Math.sin(rad)) + bx;\n    out[1] = (px * Math.sin(rad) + py * Math.cos(rad)) + by;\n    out[2] = b[2];\n\n    return out;\n  }\n\n  /**\n   * Get the angle between two 3D vectors\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns The angle in radians\n   */\n  static angle(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>) {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const bx = b[0];\n    const by = b[1];\n    const bz = b[2];\n    const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));\n    const cosine = mag && Vec3.dot(a, b) / mag;\n    return Math.acos(Math.min(Math.max(cosine, -1), 1));\n  }\n\n  /**\n   * Set the components of a vec3 to zero\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @returns `out`\n   */\n  static zero(out: Vec3Like): Vec3Like {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    return out;\n  }\n\n  /**\n   * Returns a string representation of a vector\n   * @category Static\n   *\n   * @param a - vector to represent as a string\n   * @returns string representation of the vector\n   */\n  static str(a: Readonly<Vec3Like>): string {\n    return `Vec3(${a.join(', ')})`;\n  }\n\n  /**\n   * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): boolean {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n  }\n\n  /**\n   * Returns whether or not the vectors have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static equals(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    return (\n      Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2))\n    );\n  }\n}\n\n// Instance method alias assignments\nVec3.prototype.sub = Vec3.prototype.subtract;\nVec3.prototype.mul = Vec3.prototype.multiply;\nVec3.prototype.div = Vec3.prototype.divide;\nVec3.prototype.dist = Vec3.prototype.distance;\nVec3.prototype.sqrDist = Vec3.prototype.squaredDistance;\n\n// Static method alias assignments\nVec3.sub = Vec3.subtract;\nVec3.mul = Vec3.multiply;\nVec3.div = Vec3.divide;\nVec3.dist = Vec3.distance;\nVec3.sqrDist = Vec3.squaredDistance;\nVec3.sqrLen = Vec3.squaredLength;\nVec3.mag = Vec3.magnitude;\nVec3.length = Vec3.magnitude;\nVec3.len = Vec3.magnitude;\n\n/**\n * Vec3 alias for backwards compatibility\n */\nexport const vec3 = Vec3;", "import { EPSILON } from './common.js';\nimport { Vec3, Vec3Like } from './vec3.js';\nimport { Vec4Like } from './vec4.js';\nimport { QuatLike } from './quat.js';\nimport { Quat2Like } from './quat2.js';\n\n/**\n * A 4x4 Matrix given as a {@link Mat4}, a 16-element Float32Array, or an array\n * of 16 numbers.\n */\nexport type Mat4Like = [\n  number, number, number, number,\n  number, number, number, number,\n  number, number, number, number,\n  number, number, number, number\n] | Float32Array;\n\nconst IDENTITY_4X4 = new Float32Array([\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1,\n]);\n\n/**\n * A 4x4 Matrix\n */\nexport class Mat4 extends Float32Array {\n  /**\n   * The number of bytes in a {@link Mat4}.\n   */\n  static readonly BYTE_LENGTH = 16 * Float32Array.BYTES_PER_ELEMENT;\n\n  /**\n   * Create a {@link Mat4}.\n   */\n  constructor(...values: [Readonly<Mat4Like> | ArrayBufferLike, number?] | number[] ) {\n    switch(values.length) {\n      case 16:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 16); break;\n      case 1:\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([\n            v, v, v, v,\n            v, v, v, v,\n            v, v, v, v,\n            v, v, v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 16);\n        }\n        break;\n      default:\n        super(IDENTITY_4X4); break;\n    }\n  }\n\n  //============\n  // Attributes\n  //============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Mat4.str(this);`\n   */\n   get str(): string {\n    return Mat4.str(this);\n  }\n\n  //===================\n  // Instance methods\n  //===================\n\n  /**\n   * Copy the values from another {@link Mat4} into `this`.\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Mat4Like>): Mat4 {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity matrix\n   * Equivalent to Mat4.identity(this)\n   *\n   * @returns `this`\n   */\n  identity(): Mat4 {\n    this.set(IDENTITY_4X4);\n    return this;\n  }\n\n  /**\n   * Multiplies this {@link Mat4} against another one\n   * Equivalent to `Mat4.multiply(this, this, b);`\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `this`\n   */\n  multiply(b: Readonly<Mat4Like>): Mat4 {\n    return Mat4.multiply(this, this, b) as Mat4;\n  }\n\n  /**\n   * Alias for {@link Mat4.multiply}\n   */\n  mul(b: Readonly<Mat4Like>): Mat4 { return this; }\n\n  /**\n   * Transpose this {@link Mat4}\n   * Equivalent to `Mat4.transpose(this, this);`\n   *\n   * @returns `this`\n   */\n  transpose(): Mat4 {\n    return Mat4.transpose(this, this) as Mat4;\n  }\n\n  /**\n   * Inverts this {@link Mat4}\n   * Equivalent to `Mat4.invert(this, this);`\n   *\n   * @returns `this`\n   */\n  invert(): Mat4 {\n    return Mat4.invert(this, this) as Mat4;\n  }\n\n  /**\n   * Translate this {@link Mat4} by the given vector\n   * Equivalent to `Mat4.translate(this, this, v);`\n   *\n   * @param v - The {@link Vec3} to translate by\n   * @returns `this`\n   */\n  translate(v: Readonly<Vec3Like>): Mat4 {\n    return Mat4.translate(this, this, v) as Mat4;\n  }\n\n  /**\n   * Rotates this {@link Mat4} by the given angle around the given axis\n   * Equivalent to `Mat4.rotate(this, this, rad, axis);`\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @param axis - the axis to rotate around\n   * @returns `out`\n   */\n  rotate(rad: number, axis: Readonly<Vec3Like>): Mat4 {\n    return Mat4.rotate(this, this, rad, axis) as Mat4;\n  }\n\n  /**\n   * Scales this {@link Mat4} by the dimensions in the given vec3 not using vectorization\n   * Equivalent to `Mat4.scale(this, this, v);`\n   *\n   * @param v - The {@link Vec3} to scale the matrix by\n   * @returns `this`\n   */\n  scale(v: Readonly<Vec3Like>): Mat4 {\n    return Mat4.scale(this, this, v) as Mat4;\n  }\n\n  /**\n   * Rotates this {@link Mat4} by the given angle around the X axis\n   * Equivalent to `Mat4.rotateX(this, this, rad);`\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotateX(rad: number): Mat4 {\n    return Mat4.rotateX(this, this, rad) as Mat4;\n  }\n\n  /**\n   * Rotates this {@link Mat4} by the given angle around the Y axis\n   * Equivalent to `Mat4.rotateY(this, this, rad);`\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotateY(rad: number): Mat4 {\n    return Mat4.rotateY(this, this, rad) as Mat4;\n  }\n\n  /**\n   * Rotates this {@link Mat4} by the given angle around the Z axis\n   * Equivalent to `Mat4.rotateZ(this, this, rad);`\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotateZ(rad: number): Mat4 {\n    return Mat4.rotateZ(this, this, rad) as Mat4;\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n   * which matches WebGL/OpenGL's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * Equivalent to `Mat4.perspectiveNO(this, fovy, aspect, near, far);`\n   *\n   * @param fovy - Vertical field of view in radians\n   * @param aspect - Aspect ratio. typically viewport width/height\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `this`\n   */\n  perspectiveNO(fovy: number, aspect: number, near: number, far: number): Mat4 {\n    return Mat4.perspectiveNO(this, fovy, aspect, near, far) as Mat4;\n  }\n\n  /**\n   * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * Equivalent to `Mat4.perspectiveZO(this, fovy, aspect, near, far);`\n   *\n   * @param fovy - Vertical field of view in radians\n   * @param aspect - Aspect ratio. typically viewport width/height\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `this`\n   */\n  perspectiveZO(fovy: number, aspect: number, near: number, far: number): Mat4 {\n    return Mat4.perspectiveZO(this, fovy, aspect, near, far) as Mat4;\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n   * which matches WebGL/OpenGL's clip volume.\n   * Equivalent to `Mat4.orthoNO(this, left, right, bottom, top, near, far);`\n   *\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `this`\n   */\n  orthoNO(left: number, right: number, bottom: number, top: number, near: number, far: number): Mat4 {\n    return Mat4.orthoNO(this, left, right, bottom, top, near, far) as Mat4;\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n   * Equivalent to `Mat4.orthoZO(this, left, right, bottom, top, near, far);`\n   *\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `this`\n   */\n  orthoZO(left: number, right: number, bottom: number, top: number, near: number, far: number): Mat4 {\n    return Mat4.orthoZO(this, left, right, bottom, top, near, far) as Mat4;\n  }\n\n  //================\n  // Static methods\n  //================\n\n  /**\n   * Creates a new, identity {@link Mat4}\n   * @category Static\n   *\n   * @returns A new {@link Mat4}\n   */\n  static create(): Mat4 {\n    return new Mat4();\n  }\n\n  /**\n   * Creates a new {@link Mat4} initialized with values from an existing matrix\n   * @category Static\n   *\n   * @param a - Matrix to clone\n   * @returns A new {@link Mat4}\n   */\n  static clone(a: Readonly<Mat4Like>): Mat4 {\n    return new Mat4(a);\n  }\n\n  /**\n   * Copy the values from one {@link Mat4} to another\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - Matrix to copy\n   * @returns `out`\n   */\n  static copy(out: Mat4Like, a: Readonly<Mat4Like>): Mat4Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n  }\n\n  /**\n   * Create a new mat4 with the given values\n   * @category Static\n   *\n   * @param values - Matrix components\n   * @returns A new {@link Mat4}\n   */\n  static fromValues(...values: number[]): Mat4 {\n    return new Mat4(...values);\n  }\n\n  /**\n   * Set the components of a mat4 to the given values\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @param values - Matrix components\n   * @returns `out`\n   */\n  static set(out: Mat4Like, ...values: number[]): Mat4Like {\n    out[0] = values[0];\n    out[1] = values[1];\n    out[2] = values[2];\n    out[3] = values[3];\n    out[4] = values[4];\n    out[5] = values[5];\n    out[6] = values[6];\n    out[7] = values[7];\n    out[8] = values[8];\n    out[9] = values[9];\n    out[10] = values[10];\n    out[11] = values[11];\n    out[12] = values[12];\n    out[13] = values[13];\n    out[14] = values[14];\n    out[15] = values[15];\n    return out;\n  }\n\n  /**\n   * Set a {@link Mat4} to the identity matrix\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @returns `out`\n   */\n   static identity(out: Mat4Like): Mat4Like {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Transpose the values of a {@link Mat4}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static transpose(out: Mat4Like, a: Readonly<Mat4Like>): Mat4Like {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n      const a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n      const a12 = a[6],\n        a13 = a[7];\n      const a23 = a[11];\n\n      out[1] = a[4];\n      out[2] = a[8];\n      out[3] = a[12];\n      out[4] = a01;\n      out[6] = a[9];\n      out[7] = a[13];\n      out[8] = a02;\n      out[9] = a12;\n      out[11] = a[14];\n      out[12] = a03;\n      out[13] = a13;\n      out[14] = a23;\n    } else {\n      out[0] = a[0];\n      out[1] = a[4];\n      out[2] = a[8];\n      out[3] = a[12];\n      out[4] = a[1];\n      out[5] = a[5];\n      out[6] = a[9];\n      out[7] = a[13];\n      out[8] = a[2];\n      out[9] = a[6];\n      out[10] = a[10];\n      out[11] = a[14];\n      out[12] = a[3];\n      out[13] = a[7];\n      out[14] = a[11];\n      out[15] = a[15];\n    }\n\n    return out;\n  }\n\n  /**\n   * Inverts a {@link Mat4}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static invert(out: Mat4Like, a: Mat4Like): Mat4Like {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n    const a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n    const a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n    const a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det =\n      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n  }\n\n  /**\n   * Calculates the adjugate of a {@link Mat4}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static adjoint(out: Mat4Like, a: Mat4Like): Mat4Like {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n    const a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n    const a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n    const a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    out[0] = a11 * b11 - a12 * b10 + a13 * b09;\n    out[1] = a02 * b10 - a01 * b11 - a03 * b09;\n    out[2] = a31 * b05 - a32 * b04 + a33 * b03;\n    out[3] = a22 * b04 - a21 * b05 - a23 * b03;\n    out[4] = a12 * b08 - a10 * b11 - a13 * b07;\n    out[5] = a00 * b11 - a02 * b08 + a03 * b07;\n    out[6] = a32 * b02 - a30 * b05 - a33 * b01;\n    out[7] = a20 * b05 - a22 * b02 + a23 * b01;\n    out[8] = a10 * b10 - a11 * b08 + a13 * b06;\n    out[9] = a01 * b08 - a00 * b10 - a03 * b06;\n    out[10] = a30 * b04 - a31 * b02 + a33 * b00;\n    out[11] = a21 * b02 - a20 * b04 - a23 * b00;\n    out[12] = a11 * b07 - a10 * b09 - a12 * b06;\n    out[13] = a00 * b09 - a01 * b07 + a02 * b06;\n    out[14] = a31 * b01 - a30 * b03 - a32 * b00;\n    out[15] = a20 * b03 - a21 * b01 + a22 * b00;\n    return out;\n  }\n\n  /**\n   * Calculates the determinant of a {@link Mat4}\n   * @category Static\n   *\n   * @param a - the source matrix\n   * @returns determinant of a\n   */\n  static determinant(a: Readonly<Mat4Like>): number {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n    const a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n    const a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n    const a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n\n    const b0 = a00 * a11 - a01 * a10;\n    const b1 = a00 * a12 - a02 * a10;\n    const b2 = a01 * a12 - a02 * a11;\n    const b3 = a20 * a31 - a21 * a30;\n    const b4 = a20 * a32 - a22 * a30;\n    const b5 = a21 * a32 - a22 * a31;\n    const b6 = a00 * b5 - a01 * b4 + a02 * b3;\n    const b7 = a10 * b5 - a11 * b4 + a12 * b3;\n    const b8 = a20 * b2 - a21 * b1 + a22 * b0;\n    const b9 = a30 * b2 - a31 * b1 + a32 * b0;\n\n    // Calculate the determinant\n    return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;\n  }\n\n  /**\n   * Multiplies two {@link Mat4}s\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n    const a30 = a[12];\n    const a31 = a[13];\n    const a32 = a[14];\n    const a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0];\n    let b1 = b[1];\n    let b2 = b[2];\n    let b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.multiply}\n   * @category Static\n   */\n  static mul(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like { return out; }\n\n  /**\n   * Translate a {@link Mat4} by the given vector\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to translate\n   * @param v - vector to translate by\n   * @returns `out`\n   */\n  static translate(out: Mat4Like, a: Readonly<Mat4Like>, v: Readonly<Vec3Like>): Mat4Like {\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n\n    if (a === out) {\n      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n      const a00 = a[0];\n      const a01 = a[1];\n      const a02 = a[2];\n      const a03 = a[3];\n      const a10 = a[4];\n      const a11 = a[5];\n      const a12 = a[6];\n      const a13 = a[7];\n      const a20 = a[8];\n      const a21 = a[9];\n      const a22 = a[10];\n      const a23 = a[11];\n\n      out[0] = a00;\n      out[1] = a01;\n      out[2] = a02;\n      out[3] = a03;\n      out[4] = a10;\n      out[5] = a11;\n      out[6] = a12;\n      out[7] = a13;\n      out[8] = a20;\n      out[9] = a21;\n      out[10] = a22;\n      out[11] = a23;\n\n      out[12] = a00 * x + a10 * y + a20 * z + a[12];\n      out[13] = a01 * x + a11 * y + a21 * z + a[13];\n      out[14] = a02 * x + a12 * y + a22 * z + a[14];\n      out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n  }\n\n  /**\n   * Scales the {@link Mat4} by the dimensions in the given {@link Vec3} not using vectorization\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param v - the {@link Vec3} to scale the matrix by\n   * @returns `out`\n   **/\n  static scale(out: Mat4Like, a: Readonly<Mat4Like>, v: Readonly<Vec3Like>): Mat4Like {\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Mat4} by the given angle around the given axis\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @param axis - the axis to rotate around\n   * @returns `out`\n   */\n  static rotate(out: Mat4Like, a: Readonly<Mat4Like>, rad: number, axis: Readonly<Vec3Like>): Mat4Like {\n    let x = axis[0];\n    let y = axis[1];\n    let z = axis[2];\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (len < EPSILON) {\n      return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const t = 1 - c;\n\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    const b00 = x * x * t + c;\n    const b01 = y * x * t + z * s;\n    const b02 = z * x * t - y * s;\n    const b10 = x * y * t - z * s;\n    const b11 = y * y * t + c;\n    const b12 = z * y * t + x * s;\n    const b20 = x * z * t + y * s;\n    const b21 = y * z * t - x * s;\n    const b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n    return out;\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the X axis\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotateX(out: Mat4Like, a: Readonly<Mat4Like>, rad: number): Mat4Like {\n    let s = Math.sin(rad);\n    let c = Math.cos(rad);\n    let a10 = a[4];\n    let a11 = a[5];\n    let a12 = a[6];\n    let a13 = a[7];\n    let a20 = a[8];\n    let a21 = a[9];\n    let a22 = a[10];\n    let a23 = a[11];\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged rows\n      out[0] = a[0];\n      out[1] = a[1];\n      out[2] = a[2];\n      out[3] = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the Y axis\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotateY(out: Mat4Like, a: Readonly<Mat4Like>, rad: number): Mat4Like {\n    let s = Math.sin(rad);\n    let c = Math.cos(rad);\n    let a00 = a[0];\n    let a01 = a[1];\n    let a02 = a[2];\n    let a03 = a[3];\n    let a20 = a[8];\n    let a21 = a[9];\n    let a22 = a[10];\n    let a23 = a[11];\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged rows\n      out[4] = a[4];\n      out[5] = a[5];\n      out[6] = a[6];\n      out[7] = a[7];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the Z axis\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotateZ(out: Mat4Like, a: Readonly<Mat4Like>, rad: number): Mat4Like {\n    let s = Math.sin(rad);\n    let c = Math.cos(rad);\n    let a00 = a[0];\n    let a01 = a[1];\n    let a02 = a[2];\n    let a03 = a[3];\n    let a10 = a[4];\n    let a11 = a[5];\n    let a12 = a[6];\n    let a13 = a[7];\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      out[8] = a[8];\n      out[9] = a[9];\n      out[10] = a[10];\n      out[11] = a[11];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat4} from a vector translation\n   * This is equivalent to (but much faster than):\n   *\n   *     mat4.identity(dest);\n   *     mat4.translate(dest, dest, vec);\n   * @category Static\n   *\n   * @param out - {@link Mat4} receiving operation result\n   * @param v - Translation vector\n   * @returns `out`\n   */\n  static fromTranslation(out: Mat4Like, v: Readonly<Vec3Like>): Mat4Like {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat4} from a vector scaling\n   * This is equivalent to (but much faster than):\n   *\n   *     mat4.identity(dest);\n   *     mat4.scale(dest, dest, vec);\n   * @category Static\n   *\n   * @param out - {@link Mat4} receiving operation result\n   * @param v - Scaling vector\n   * @returns `out`\n   */\n  static fromScaling(out: Mat4Like, v: Readonly<Vec3Like>): Mat4Like {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat4} from a given angle around a given axis\n   * This is equivalent to (but much faster than):\n   *\n   *     mat4.identity(dest);\n   *     mat4.rotate(dest, dest, rad, axis);\n   * @category Static\n   *\n   * @param out - {@link Mat4} receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @param axis - the axis to rotate around\n   * @returns `out`\n   */\n  static fromRotation(out: Mat4Like, rad: number, axis: Readonly<Vec3Like>): Mat4Like {\n    let x = axis[0];\n    let y = axis[1];\n    let z = axis[2];\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (len < EPSILON) {\n      return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a matrix from the given angle around the X axis\n   * This is equivalent to (but much faster than):\n   *\n   *     mat4.identity(dest);\n   *     mat4.rotateX(dest, dest, rad);\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromXRotation(out: Mat4Like, rad: number): Mat4Like {\n    let s = Math.sin(rad);\n    let c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a matrix from the given angle around the Y axis\n   * This is equivalent to (but much faster than):\n   *\n   *     mat4.identity(dest);\n   *     mat4.rotateY(dest, dest, rad);\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromYRotation(out: Mat4Like, rad: number): Mat4Like {\n    let s = Math.sin(rad);\n    let c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0] = c;\n    out[1] = 0;\n    out[2] = -s;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a matrix from the given angle around the Z axis\n   * This is equivalent to (but much faster than):\n   *\n   *     mat4.identity(dest);\n   *     mat4.rotateZ(dest, dest, rad);\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromZRotation(out: Mat4Like, rad: number): Mat4Like {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a matrix from a quaternion rotation and vector translation\n   * This is equivalent to (but much faster than):\n   *\n   *     mat4.identity(dest);\n   *     mat4.translate(dest, vec);\n   *     let quatMat = mat4.create();\n   *     quat4.toMat4(quat, quatMat);\n   *     mat4.multiply(dest, quatMat);\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param q - Rotation quaternion\n   * @param v - Translation vector\n   * @returns `out`\n   */\n  static fromRotationTranslation(out: Mat4Like, q: Readonly<QuatLike>, v: Readonly<Vec3Like>): Mat4Like {\n    // Quaternion math\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Sets a {@link Mat4} from a {@link Quat2}.\n   * @category Static\n   *\n   * @param out - Matrix\n   * @param a - Dual Quaternion\n   * @returns `out`\n   */\n  static fromQuat2(out: Mat4Like, a: Quat2Like): Mat4Like {\n    let translation = new Vec3();\n    const bx = -a[0];\n    const by = -a[1];\n    const bz = -a[2];\n    const bw = a[3];\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n\n    let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n    //Only scale if it makes sense\n    if (magnitude > 0) {\n      translation[0] = ((ax * bw + aw * bx + ay * bz - az * by) * 2) / magnitude;\n      translation[1] = ((ay * bw + aw * by + az * bx - ax * bz) * 2) / magnitude;\n      translation[2] = ((az * bw + aw * bz + ax * by - ay * bx) * 2) / magnitude;\n    } else {\n      translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n      translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n      translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n    }\n    Mat4.fromRotationTranslation(out, a as QuatLike, translation);\n    return out;\n  }\n\n  /**\n   * Returns the translation vector component of a transformation\n   * matrix. If a matrix is built with fromRotationTranslation,\n   * the returned vector will be the same as the translation vector\n   * originally supplied.\n   * @category Static\n   *\n   * @param  {vec3} out Vector to receive translation component\n   * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n   * @return {vec3} out\n   */\n  static getTranslation(out: Vec3Like, mat: Readonly<Mat4Like>): Vec3Like {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n  }\n\n  /**\n   * Returns the scaling factor component of a transformation\n   * matrix. If a matrix is built with fromRotationTranslationScale\n   * with a normalized Quaternion paramter, the returned vector will be\n   * the same as the scaling vector\n   * originally supplied.\n   * @category Static\n   *\n   * @param  {vec3} out Vector to receive scaling factor component\n   * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n   * @return {vec3} out\n   */\n  static getScaling(out: Vec3Like, mat: Readonly<Mat4Like>): Vec3Like {\n    const m11 = mat[0];\n    const m12 = mat[1];\n    const m13 = mat[2];\n    const m21 = mat[4];\n    const m22 = mat[5];\n    const m23 = mat[6];\n    const m31 = mat[8];\n    const m32 = mat[9];\n    const m33 = mat[10];\n\n    out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    return out;\n  }\n\n  /**\n   * Returns a quaternion representing the rotational component\n   * of a transformation matrix. If a matrix is built with\n   * fromRotationTranslation, the returned quaternion will be the\n   * same as the quaternion originally supplied.\n   * @category Static\n   *\n   * @param out - Quaternion to receive the rotation component\n   * @param mat - Matrix to be decomposed (input)\n   * @return `out`\n   */\n  static getRotation(out: QuatLike, mat: Readonly<Mat4Like>): QuatLike {\n    Mat4.getScaling(tmpVec3, mat);\n\n    const is1 = 1 / tmpVec3[0];\n    const is2 = 1 / tmpVec3[1];\n    const is3 = 1 / tmpVec3[2];\n\n    const sm11 = mat[0] * is1;\n    const sm12 = mat[1] * is2;\n    const sm13 = mat[2] * is3;\n    const sm21 = mat[4] * is1;\n    const sm22 = mat[5] * is2;\n    const sm23 = mat[6] * is3;\n    const sm31 = mat[8] * is1;\n    const sm32 = mat[9] * is2;\n    const sm33 = mat[10] * is3;\n\n    const trace = sm11 + sm22 + sm33;\n    let S = 0;\n\n    if (trace > 0) {\n      S = Math.sqrt(trace + 1.0) * 2;\n      out[3] = 0.25 * S;\n      out[0] = (sm23 - sm32) / S;\n      out[1] = (sm31 - sm13) / S;\n      out[2] = (sm12 - sm21) / S;\n    } else if (sm11 > sm22 && sm11 > sm33) {\n      S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n      out[3] = (sm23 - sm32) / S;\n      out[0] = 0.25 * S;\n      out[1] = (sm12 + sm21) / S;\n      out[2] = (sm31 + sm13) / S;\n    } else if (sm22 > sm33) {\n      S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n      out[3] = (sm31 - sm13) / S;\n      out[0] = (sm12 + sm21) / S;\n      out[1] = 0.25 * S;\n      out[2] = (sm23 + sm32) / S;\n    } else {\n      S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n      out[3] = (sm12 - sm21) / S;\n      out[0] = (sm31 + sm13) / S;\n      out[1] = (sm23 + sm32) / S;\n      out[2] = 0.25 * S;\n    }\n\n    return out;\n  }\n\n  /**\n   * Decomposes a transformation matrix into its rotation, translation\n   * and scale components. Returns only the rotation component\n   * @category Static\n   *\n   * @param out_r - Quaternion to receive the rotation component\n   * @param out_t - Vector to receive the translation vector\n   * @param out_s - Vector to receive the scaling factor\n   * @param mat - Matrix to be decomposed (input)\n   * @returns `out_r`\n   */\n  static decompose(out_r: QuatLike, out_t: Vec3Like, out_s: Vec3Like, mat: Readonly<Mat4Like>): QuatLike {\n    out_t[0] = mat[12];\n    out_t[1] = mat[13];\n    out_t[2] = mat[14];\n\n    const m11 = mat[0];\n    const m12 = mat[1];\n    const m13 = mat[2];\n    const m21 = mat[4];\n    const m22 = mat[5];\n    const m23 = mat[6];\n    const m31 = mat[8];\n    const m32 = mat[9];\n    const m33 = mat[10];\n\n    out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    const is1 = 1 / out_s[0];\n    const is2 = 1 / out_s[1];\n    const is3 = 1 / out_s[2];\n\n    const sm11 = m11 * is1;\n    const sm12 = m12 * is2;\n    const sm13 = m13 * is3;\n    const sm21 = m21 * is1;\n    const sm22 = m22 * is2;\n    const sm23 = m23 * is3;\n    const sm31 = m31 * is1;\n    const sm32 = m32 * is2;\n    const sm33 = m33 * is3;\n\n    const trace = sm11 + sm22 + sm33;\n    let S = 0;\n\n    if (trace > 0) {\n      S = Math.sqrt(trace + 1.0) * 2;\n      out_r[3] = 0.25 * S;\n      out_r[0] = (sm23 - sm32) / S;\n      out_r[1] = (sm31 - sm13) / S;\n      out_r[2] = (sm12 - sm21) / S;\n    } else if (sm11 > sm22 && sm11 > sm33) {\n      S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n      out_r[3] = (sm23 - sm32) / S;\n      out_r[0] = 0.25 * S;\n      out_r[1] = (sm12 + sm21) / S;\n      out_r[2] = (sm31 + sm13) / S;\n    } else if (sm22 > sm33) {\n      S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n      out_r[3] = (sm31 - sm13) / S;\n      out_r[0] = (sm12 + sm21) / S;\n      out_r[1] = 0.25 * S;\n      out_r[2] = (sm23 + sm32) / S;\n    } else {\n      S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n      out_r[3] = (sm12 - sm21) / S;\n      out_r[0] = (sm31 + sm13) / S;\n      out_r[1] = (sm23 + sm32) / S;\n      out_r[2] = 0.25 * S;\n    }\n\n    return out_r;\n  }\n\n  /**\n   * Creates a matrix from a quaternion rotation, vector translation and vector scale\n   * This is equivalent to (but much faster than):\n   *\n   *     mat4.identity(dest);\n   *     mat4.translate(dest, vec);\n   *     let quatMat = mat4.create();\n   *     quat4.toMat4(quat, quatMat);\n   *     mat4.multiply(dest, quatMat);\n   *     mat4.scale(dest, scale);\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param q - Rotation quaternion\n   * @param v - Translation vector\n   * @param s - Scaling vector\n   * @returns `out`\n   */\n  static fromRotationTranslationScale(out: Mat4Like, q: Readonly<QuatLike>, v: Readonly<Vec3Like>, s: Readonly<Vec3Like>): Mat4Like {\n    // Quaternion math\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    const sx = s[0];\n    const sy = s[1];\n    const sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n   * This is equivalent to (but much faster than):\n   *\n   *     mat4.identity(dest);\n   *     mat4.translate(dest, vec);\n   *     mat4.translate(dest, origin);\n   *     let quatMat = mat4.create();\n   *     quat4.toMat4(quat, quatMat);\n   *     mat4.multiply(dest, quatMat);\n   *     mat4.scale(dest, scale)\n   *     mat4.translate(dest, negativeOrigin);\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param q - Rotation quaternion\n   * @param v - Translation vector\n   * @param s - Scaling vector\n   * @param o - The origin vector around which to scale and rotate\n   * @returns `out`\n   */\n  static fromRotationTranslationScaleOrigin(out: Mat4Like, q: Readonly<QuatLike>, v: Readonly<Vec3Like>, s: Readonly<Vec3Like>, o: Readonly<Vec3Like>): Mat4Like {\n    // Quaternion math\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    const sx = s[0];\n    const sy = s[1];\n    const sz = s[2];\n\n    const ox = o[0];\n    const oy = o[1];\n    const oz = o[2];\n\n    const out0 = (1 - (yy + zz)) * sx;\n    const out1 = (xy + wz) * sx;\n    const out2 = (xz - wy) * sx;\n    const out4 = (xy - wz) * sy;\n    const out5 = (1 - (xx + zz)) * sy;\n    const out6 = (yz + wx) * sy;\n    const out8 = (xz + wy) * sz;\n    const out9 = (yz - wx) * sz;\n    const out10 = (1 - (xx + yy)) * sz;\n\n    out[0] = out0;\n    out[1] = out1;\n    out[2] = out2;\n    out[3] = 0;\n    out[4] = out4;\n    out[5] = out5;\n    out[6] = out6;\n    out[7] = 0;\n    out[8] = out8;\n    out[9] = out9;\n    out[10] = out10;\n    out[11] = 0;\n    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Calculates a 4x4 matrix from the given quaternion\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param q - Quaternion to create matrix from\n   * @returns `out`\n   */\n  static fromQuat(out: Mat4Like, q: Readonly<QuatLike>): Mat4Like {\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Generates a frustum matrix with the given bounds\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `out`\n   */\n  static frustum(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number, far: number): Mat4Like {\n    const rl = 1 / (right - left);\n    const tb = 1 / (top - bottom);\n    const nf = 1 / (near - far);\n    out[0] = near * 2 * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = near * 2 * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = far * near * 2 * nf;\n    out[15] = 0;\n    return out;\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n   * which matches WebGL/OpenGL's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param fovy - Vertical field of view in radians\n   * @param aspect - Aspect ratio. typically viewport width/height\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `out`\n   */\n  static perspectiveNO(out: Mat4Like, fovy: number, aspect: number, near: number, far: number): Mat4Like {\n    const f = 1.0 / Math.tan(fovy / 2);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n    if (far != null && far !== Infinity) {\n      const nf = 1 / (near - far);\n      out[10] = (far + near) * nf;\n      out[14] = 2 * far * near * nf;\n    } else {\n      out[10] = -1;\n      out[14] = -2 * near;\n    }\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.perspectiveNO}\n   * @category Static\n   * @deprecated Use {@link Mat4.perspectiveNO} or {@link Mat4.perspectiveZO} explicitly\n   */\n  static perspective(out: Mat4Like, fovy: number, aspect: number, near: number, far: number): Mat4Like { return out; }\n\n  /**\n   * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param fovy - Vertical field of view in radians\n   * @param aspect - Aspect ratio. typically viewport width/height\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `out`\n   */\n  static perspectiveZO(out: Mat4Like, fovy: number, aspect: number, near: number, far: number): Mat4Like {\n    const f = 1.0 / Math.tan(fovy / 2);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n    if (far != null && far !== Infinity) {\n      const nf = 1 / (near - far);\n      out[10] = far * nf;\n      out[14] = far * near * nf;\n    } else {\n      out[10] = -1;\n      out[14] = -near;\n    }\n    return out;\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given field of view.\n   * This is primarily useful for generating projection matrices to be used\n   * with the still experiemental WebVR API.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param fov - Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `out`\n   * @deprecated\n   */\n  static perspectiveFromFieldOfView(out: Mat4Like, fov, near: number, far: number): Mat4Like {\n    const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n    const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n    const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n    const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n    const xScale = 2.0 / (leftTan + rightTan);\n    const yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = (upTan - downTan) * yScale * 0.5;\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n   * which matches WebGL/OpenGL's clip volume.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `out`\n   */\n  static orthoNO(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number, far: number): Mat4Like {\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.orthoNO}\n   * @category Static\n   * @deprecated Use {@link Mat4.orthoNO} or {@link Mat4.orthoZO} explicitly\n   */\n  static ortho(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number, far: number): Mat4Like { return out; }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `out`\n   */\n  static orthoZO(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number, far: number): Mat4Like {\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = near * nf;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Generates a look-at matrix with the given eye position, focal point, and up axis.\n   * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param eye - Position of the viewer\n   * @param center - Point the viewer is looking at\n   * @param up - vec3 pointing up\n   * @returns `out`\n   */\n  static lookAt(out: Mat4Like, eye: Readonly<Vec3Like>, center: Readonly<Vec3Like>, up: Readonly<Vec3Like>): Mat4Like {\n    const eyex = eye[0];\n    const eyey = eye[1];\n    const eyez = eye[2];\n    const upx = up[0];\n    const upy = up[1];\n    const upz = up[2];\n    const centerx = center[0];\n    const centery = center[1];\n    const centerz = center[2];\n\n    if (\n      Math.abs(eyex - centerx) < EPSILON &&\n      Math.abs(eyey - centery) < EPSILON &&\n      Math.abs(eyez - centerz) < EPSILON\n    ) {\n      return Mat4.identity(out);\n    }\n\n    let z0 = eyex - centerx;\n    let z1 = eyey - centery;\n    let z2 = eyez - centerz;\n\n    let len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    let x0 = upy * z2 - upz * z1;\n    let x1 = upz * z0 - upx * z2;\n    let x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n      x0 = 0;\n      x1 = 0;\n      x2 = 0;\n    } else {\n      len = 1 / len;\n      x0 *= len;\n      x1 *= len;\n      x2 *= len;\n    }\n\n    let y0 = z1 * x2 - z2 * x1;\n    let y1 = z2 * x0 - z0 * x2;\n    let y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n      y0 = 0;\n      y1 = 0;\n      y2 = 0;\n    } else {\n      len = 1 / len;\n      y0 *= len;\n      y1 *= len;\n      y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Generates a matrix that makes something look at something else.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param eye - Position of the viewer\n   * @param target - Point the viewer is looking at\n   * @param up - vec3 pointing up\n   * @returns `out`\n   */\n  static targetTo(out: Mat4Like, eye: Readonly<Vec3Like>, target: Readonly<Vec3Like>, up: Readonly<Vec3Like>): Mat4Like {\n    const eyex = eye[0];\n    const eyey = eye[1];\n    const eyez = eye[2];\n    const upx = up[0];\n    const upy = up[1];\n    const upz = up[2];\n\n    let z0 = eyex - target[0];\n    let z1 = eyey - target[1];\n    let z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      z0 *= len;\n      z1 *= len;\n      z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1;\n    let x1 = upz * z0 - upx * z2;\n    let x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      x0 *= len;\n      x1 *= len;\n      x2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Returns Frobenius norm of a {@link Mat4}\n   * @category Static\n   *\n   * @param a - the matrix to calculate Frobenius norm of\n   * @returns Frobenius norm\n   */\n  static frob(a: Readonly<Mat4Like>): number {\n    return Math.sqrt(\n      a[0] * a[0] +\n      a[1] * a[1] +\n      a[2] * a[2] +\n      a[3] * a[3] +\n      a[4] * a[4] +\n      a[5] * a[5] +\n      a[6] * a[6] +\n      a[7] * a[7] +\n      a[8] * a[8] +\n      a[9] * a[9] +\n      a[10] * a[10] +\n      a[11] * a[11] +\n      a[12] * a[12] +\n      a[13] * a[13] +\n      a[14] * a[14] +\n      a[15] * a[15]\n    );\n  }\n\n  /**\n   * Adds two {@link Mat4}'s\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n  }\n\n  /**\n   * Subtracts matrix b from matrix a\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n  }\n  /**\n   * Alias for {@link Mat4.subtract}\n   * @category Static\n   */\n  static sub(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like { return out; }\n\n  /**\n   * Multiply each element of the matrix by a scalar.\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param b - amount to scale the matrix's elements by\n   * @returns `out`\n   */\n  static multiplyScalar(out: Mat4Like, a: Readonly<Mat4Like>, b: number): Mat4Like {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n  }\n\n  /**\n   * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b's elements by before adding\n   * @returns `out`\n   */\n  static multiplyScalarAndAdd(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>, scale: number): Mat4Like {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    out[4] = a[4] + b[4] * scale;\n    out[5] = a[5] + b[5] * scale;\n    out[6] = a[6] + b[6] * scale;\n    out[7] = a[7] + b[7] * scale;\n    out[8] = a[8] + b[8] * scale;\n    out[9] = a[9] + b[9] * scale;\n    out[10] = a[10] + b[10] * scale;\n    out[11] = a[11] + b[11] * scale;\n    out[12] = a[12] + b[12] * scale;\n    out[13] = a[13] + b[13] * scale;\n    out[14] = a[14] + b[14] * scale;\n    out[15] = a[15] + b[15] * scale;\n    return out;\n  }\n\n  /**\n   * Returns whether or not two {@link Mat4}s have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3] &&\n      a[4] === b[4] &&\n      a[5] === b[5] &&\n      a[6] === b[6] &&\n      a[7] === b[7] &&\n      a[8] === b[8] &&\n      a[9] === b[9] &&\n      a[10] === b[10] &&\n      a[11] === b[11] &&\n      a[12] === b[12] &&\n      a[13] === b[13] &&\n      a[14] === b[14] &&\n      a[15] === b[15]\n    );\n  }\n\n  /**\n   * Returns whether or not two {@link Mat4}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static equals(a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const a6 = a[6];\n    const a7 = a[7];\n    const a8 = a[8];\n    const a9 = a[9];\n    const a10 = a[10];\n    const a11 = a[11];\n    const a12 = a[12];\n    const a13 = a[13];\n    const a14 = a[14];\n    const a15 = a[15];\n\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n    const b6 = b[6];\n    const b7 = b[7];\n    const b8 = b[8];\n    const b9 = b[9];\n    const b10 = b[10];\n    const b11 = b[11];\n    const b12 = b[12];\n    const b13 = b[13];\n    const b14 = b[14];\n    const b15 = b[15];\n\n    return (\n      Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) &&\n      Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) &&\n      Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) &&\n      Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) &&\n      Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) &&\n      Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) &&\n      Math.abs(a9 - b9) <= EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) &&\n      Math.abs(a10 - b10) <= EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) &&\n      Math.abs(a11 - b11) <= EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) &&\n      Math.abs(a12 - b12) <= EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) &&\n      Math.abs(a13 - b13) <= EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) &&\n      Math.abs(a14 - b14) <= EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) &&\n      Math.abs(a15 - b15) <= EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15))\n    );\n  }\n\n  /**\n   * Returns a string representation of a {@link Mat4}\n   * @category Static\n   *\n   * @param a - matrix to represent as a string\n   * @returns string representation of the matrix\n   */\n  static str(a: Readonly<Mat4Like>): string {\n    return `Mat4(${a.join(', ')})`;\n  }\n}\n\n// Temporary variables to prevent repeated allocations in the algorithms above.\nconst tmpVec3 = new Vec3();\n\n// Instance method alias assignments\nMat4.prototype.mul = Mat4.prototype.multiply;\n\n// Static method alias assignments\nMat4.sub = Mat4.subtract;\nMat4.mul = Mat4.multiply;\nMat4.perspective = Mat4.perspectiveNO;\nMat4.ortho = Mat4.orthoNO;\n\n/**\n * Mat4 alias for backwards compatibility\n */\nexport const mat4 = Mat4;", "import { EPSILON } from './common.js';\nimport { Mat4Like } from './mat4.js';\nimport { QuatLike } from './quat.js';\n\n/**\n * A 4 dimensional vector given as a {@link Vec4}, a 4-element Float32Array, or\n * an array of 4 numbers.\n */\nexport type Vec4Like = [number, number, number, number] | Float32Array;\n\n/**\n * 4 Dimensional Vector\n */\nexport class Vec4 extends Float32Array {\n  /**\n   * The number of bytes in a {@link Vec4}.\n   */\n  static readonly BYTE_LENGTH = 4 * Float32Array.BYTES_PER_ELEMENT;\n\n  /**\n   * Create a {@link Vec4}.\n   */\n  constructor(...values: [Readonly<Vec4Like> | ArrayBufferLike, number?] | number[]) {\n    switch(values.length) {\n      case 4:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 4); break;\n      case 1: {\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([v, v, v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 4);\n        }\n        break;\n      }\n      default:\n        super(4); break;\n    }\n  }\n\n  //============\n  // Attributes\n  //============\n\n  // Getters and setters to make component access read better.\n  // These are likely to be a little bit slower than direct array access.\n\n  /**\n   * The x component of the vector. Equivalent to `this[0];`\n   * @category Vector components\n   */\n  get x(): number { return this[0]; }\n  set x(value: number) { this[0] = value; }\n\n  /**\n   * The y component of the vector. Equivalent to `this[1];`\n   * @category Vector components\n   */\n  get y(): number { return this[1]; }\n  set y(value: number) { this[1] = value; }\n\n  /**\n   * The z component of the vector. Equivalent to `this[2];`\n   * @category Vector components\n   */\n  get z(): number { return this[2]; }\n  set z(value: number) { this[2] = value; }\n\n  /**\n   * The w component of the vector. Equivalent to `this[3];`\n   * @category Vector components\n   */\n  get w(): number { return this[3]; }\n  set w(value: number) { this[3] = value; }\n\n  // Alternate set of getters and setters in case this is being used to define\n  // a color.\n\n  /**\n   * The r component of the vector. Equivalent to `this[0];`\n   * @category Color components\n   */\n  get r(): number { return this[0]; }\n  set r(value: number) { this[0] = value; }\n\n  /**\n   * The g component of the vector. Equivalent to `this[1];`\n   * @category Color components\n   */\n  get g(): number { return this[1]; }\n  set g(value: number) { this[1] = value; }\n\n  /**\n   * The b component of the vector. Equivalent to `this[2];`\n   * @category Color components\n   */\n  get b(): number { return this[2]; }\n  set b(value: number) { this[2] = value; }\n\n  /**\n   * The a component of the vector. Equivalent to `this[3];`\n   * @category Color components\n   */\n  get a(): number { return this[3]; }\n  set a(value: number) { this[3] = value; }\n\n  /**\n   * The magnitude (length) of this.\n   * Equivalent to `Vec4.magnitude(this);`\n   *\n   * Magnitude is used because the `length` attribute is already defined by\n   * `Float32Array` to mean the number of elements in the array.\n   */\n  get magnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    const w = this[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Alias for {@link Vec4.magnitude}\n   */\n  get mag(): number { return this.magnitude; }\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Vec4.str(this);`\n   */\n  get str(): string {\n    return Vec4.str(this);\n  }\n\n  //===================\n  // Instances methods\n  //===================\n\n  /**\n   * Copy the values from another {@link Vec4} into `this`.\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Vec4Like>): Vec4 {\n    super.set(a);\n    return this;\n  }\n\n  /**\n   * Adds a {@link Vec4} to `this`.\n   * Equivalent to `Vec4.add(this, this, b);`\n   *\n   * @param b - The vector to add to `this`\n   * @returns `this`\n   */\n  add(b: Readonly<Vec4Like>): Vec4 {\n    this[0] += b[0];\n    this[1] += b[1];\n    this[2] += b[2];\n    this[3] += b[3];\n    return this;\n  }\n\n  /**\n   * Subtracts a {@link Vec4} from `this`.\n   * Equivalent to `Vec4.subtract(this, this, b);`\n   *\n   * @param b - The vector to subtract from `this`\n   * @returns `this`\n   */\n   subtract(b: Readonly<Vec4Like>): Vec4 {\n    this[0] -= b[0];\n    this[1] -= b[1];\n    this[2] -= b[2];\n    this[3] -= b[3];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec4.subtract}\n   */\n  sub(b: Readonly<Vec4Like>): Vec4 { return this; }\n\n  /**\n   * Multiplies `this` by a {@link Vec4}.\n   * Equivalent to `Vec4.multiply(this, this, b);`\n   *\n   * @param b - The vector to multiply `this` by\n   * @returns `this`\n   */\n  multiply(b: Readonly<Vec4Like>): Vec4 {\n    this[0] *= b[0];\n    this[1] *= b[1];\n    this[2] *= b[2];\n    this[3] *= b[3];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec4.multiply}\n   */\n  mul(b: Readonly<Vec4Like>): Vec4 { return this; }\n\n  /**\n   * Divides `this` by a {@link Vec4}.\n   * Equivalent to `Vec4.divide(this, this, b);`\n   *\n   * @param b - The vector to divide `this` by\n   * @returns `this`\n   */\n  divide(b: Readonly<Vec4Like>): Vec4 {\n    this[0] /= b[0];\n    this[1] /= b[1];\n    this[2] /= b[2];\n    this[3] /= b[3];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec4.divide}\n   */\n  div(b: Readonly<Vec4Like>): Vec4 { return this; }\n\n  /**\n   * Scales `this` by a scalar number.\n   * Equivalent to `Vec4.scale(this, this, b);`\n   *\n   * @param b - Amount to scale `this` by\n   * @returns `this`\n   */\n  scale(b: number): Vec4 {\n    this[0] *= b;\n    this[1] *= b;\n    this[2] *= b;\n    this[3] *= b;\n    return this;\n  }\n\n  /**\n   * Calculates `this` scaled by a scalar value then adds the result to `this`.\n   * Equivalent to `Vec4.scaleAndAdd(this, this, b, scale);`\n   *\n   * @param b - The vector to add to `this`\n   * @param scale - The amount to scale `b` by before adding\n   * @returns `this`\n   */\n  scaleAndAdd(b: Readonly<Vec4Like>, scale: number): Vec4 {\n    this[0] += b[0] * scale;\n    this[1] += b[1] * scale;\n    this[2] += b[2] * scale;\n    this[3] += b[3] * scale;\n    return this;\n  }\n\n  /**\n   * Calculates the euclidian distance between another {@link Vec4} and `this`.\n   * Equivalent to `Vec4.distance(this, b);`\n   *\n   * @param b - The vector to calculate the distance to\n   * @returns Distance between `this` and `b`\n   */\n  distance(b: Readonly<Vec4Like>): number {\n    return Vec4.distance(this, b);\n  }\n  /**\n   * Alias for {@link Vec4.distance}\n   */\n  dist(b: Readonly<Vec4Like>): number { return 0; }\n\n  /**\n   * Calculates the squared euclidian distance between another {@link Vec4} and `this`.\n   * Equivalent to `Vec4.squaredDistance(this, b);`\n   *\n   * @param b The vector to calculate the squared distance to\n   * @returns Squared distance between `this` and `b`\n   */\n  squaredDistance(b: Readonly<Vec4Like>): number {\n    return Vec4.squaredDistance(this, b);\n  }\n  /**\n   * Alias for {@link Vec4.squaredDistance}\n   */\n  sqrDist(b: Readonly<Vec4Like>): number { return 0; }\n\n  /**\n   * Negates the components of `this`.\n   * Equivalent to `Vec4.negate(this, this);`\n   *\n   * @returns `this`\n   */\n  negate(): Vec4 {\n    this[0] *= -1;\n    this[1] *= -1;\n    this[2] *= -1;\n    this[3] *= -1;\n    return this;\n  }\n\n  /**\n   * Inverts the components of `this`.\n   * Equivalent to `Vec4.inverse(this, this);`\n   *\n   * @returns `this`\n   */\n  invert(): Vec4 {\n    this[0] = 1.0 / this[0];\n    this[1] = 1.0 / this[1];\n    this[2] = 1.0 / this[2];\n    this[3] = 1.0 / this[3];\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of this and another {@link Vec4}.\n   * Equivalent to `Vec4.dot(this, b);`\n   *\n   * @param b - The second operand\n   * @returns Dot product of `this` and `b`\n   */\n  dot(b: Readonly<Vec4Like>): number {\n    return this[0] * b[0] + this[1] * b[1] + this[2] * b[2] + this[3] * b[3];\n  }\n\n  /**\n   * Normalize `this`.\n   * Equivalent to `Vec4.normalize(this, this);`\n   *\n   * @returns `this`\n   */\n  normalize(): Vec4 {\n    return Vec4.normalize(this, this) as Vec4;\n  }\n\n  //===================\n  // Static methods\n  //===================\n\n  /**\n   * Creates a new, empty {@link Vec4}\n   * @category Static\n   *\n   * @returns a new 4D vector\n   */\n  static create(): Vec4 {\n    return new Vec4();\n  }\n\n  /**\n   * Creates a new {@link Vec4} initialized with values from an existing vector\n   * @category Static\n   *\n   * @param a - vector to clone\n   * @returns a new 4D vector\n   */\n  static clone(a: Vec4Like): Vec4 {\n    return new Vec4(a);\n  }\n\n  /**\n   * Creates a new {@link Vec4} initialized with the given values\n   * @category Static\n   *\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @param w - W component\n   * @returns a new 4D vector\n   */\n  static fromValues(x: number, y: number, z: number, w: number): Vec4 {\n    return new Vec4(x, y, z, w);\n  }\n\n  /**\n   * Copy the values from one {@link Vec4} to another\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the source vector\n   * @returns `out`\n   */\n  static copy(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Vec4} to the given values\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @param w - W component\n   * @returns `out`\n   */\n  static set(out: Vec4Like, x: number, y: number, z: number, w: number): Vec4Like {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Vec4}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static add(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n  }\n\n  /**\n   * Subtracts vector b from vector a\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec4.subtract}\n   * @category Static\n   */\n  static sub(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like { return out; }\n\n  /**\n   * Multiplies two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static multiply(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec4.multiply}\n   * @category Static\n   */\n  static mul(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like { return out; }\n\n  /**\n   * Divides two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static divide(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec4.divide}\n   * @category Static\n   */\n  static div(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like { return out; }\n\n  /**\n   * Math.ceil the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to ceil\n   * @returns `out`\n   */\n  static ceil(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n  }\n\n  /**\n   * Math.floor the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to floor\n   * @returns `out`\n   */\n  static floor(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n  }\n\n  /**\n   * Returns the minimum of two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static min(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n  }\n\n  /**\n   * Returns the maximum of two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static max(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n  }\n\n  /**\n   * Math.round the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to round\n   * @returns `out`\n   */\n  static round(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n  }\n\n  /**\n   * Scales a {@link Vec4} by a scalar number\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to scale\n   * @param scale - amount to scale the vector by\n   * @returns `out`\n   */\n  static scale(out: Vec4Like, a: Readonly<Vec4Like>, scale: number): Vec4Like {\n    out[0] = a[0] * scale;\n    out[1] = a[1] * scale;\n    out[2] = a[2] * scale;\n    out[3] = a[3] * scale;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Vec4}'s after scaling the second operand by a scalar value\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b by before adding\n   * @returns `out`\n   */\n  static scaleAndAdd(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>, scale: number): Vec4Like {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    return out;\n  }\n\n  /**\n   * Calculates the euclidian distance between two {@link Vec4}'s\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns distance between a and b\n   */\n  static distance(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n    const w = b[3] - a[3];\n    return Math.hypot(x, y, z, w);\n  }\n  /**\n   * Alias for {@link Vec4.distance}\n   * @category Static\n   */\n  static dist(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number { return 0; }\n\n  /**\n   * Calculates the squared euclidian distance between two {@link Vec4}'s\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns squared distance between a and b\n   */\n  static squaredDistance(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n    const w = b[3] - a[3];\n    return x * x + y * y + z * z + w * w;\n  }\n  /**\n   * Alias for {@link Vec4.squaredDistance}\n   * @category Static\n   */\n  static sqrDist(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number { return 0; }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Vec4}\n   * @category Static\n   *\n   * @param a - vector to calculate length of\n   * @returns length of `a`\n   */\n  static magnitude(a: Readonly<Vec4Like>): number {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n  /**\n   * Alias for {@link Vec4.magnitude}\n   * @category Static\n   */\n  static mag(a: Readonly<Vec4Like>): number { return 0; }\n\n  /**\n   * Alias for {@link Vec4.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec4.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   */\n  // @ts-ignore: Length conflicts with Function.length\n  static length(a: Readonly<Vec4Like>): number { return 0; }\n\n  /**\n   * Alias for {@link Vec4.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec4.mag}\n   */\n  static len(a: Readonly<Vec4Like>): number { return 0; }\n\n  /**\n   * Calculates the squared length of a {@link Vec4}\n   * @category Static\n   *\n   * @param a - vector to calculate squared length of\n   * @returns squared length of a\n   */\n  static squaredLength(a: Readonly<Vec4Like>): number {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const w = a[3];\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Alias for {@link Vec4.squaredLength}\n   * @category Static\n   */\n  static sqrLen(a: Readonly<Vec4Like>): number { return 0; }\n\n  /**\n   * Negates the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to negate\n   * @returns `out`\n   */\n  static negate(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n  }\n\n  /**\n   * Returns the inverse of the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to invert\n   * @returns `out`\n   */\n  static inverse(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    out[3] = 1.0 / a[3];\n    return out;\n  }\n\n  /**\n   * Normalize a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to normalize\n   * @returns `out`\n   */\n  static normalize(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two {@link Vec4}'s\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns dot product of a and b\n   */\n  static dot(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n\n  /**\n   * Returns the cross-product of three vectors in a 4-dimensional space\n   * @category Static\n   *\n   * @param out the receiving vector\n   * @param u - the first vector\n   * @param v - the second vector\n   * @param w - the third vector\n   * @returns result\n   */\n  static cross(out: Vec4Like, u: Readonly<Vec4Like>, v: Readonly<Vec4Like>, w: Readonly<Vec4Like>): Vec4Like {\n    const a = v[0] * w[1] - v[1] * w[0];\n    const b = v[0] * w[2] - v[2] * w[0];\n    const c = v[0] * w[3] - v[3] * w[0];\n    const d = v[1] * w[2] - v[2] * w[1];\n    const e = v[1] * w[3] - v[3] * w[1];\n    const f = v[2] * w[3] - v[3] * w[2];\n    const g = u[0];\n    const h = u[1];\n    const i = u[2];\n    const j = u[3];\n\n    out[0] = h * f - i * e + j * d;\n    out[1] = -(g * f) + i * c - j * b;\n    out[2] = g * e - h * c + j * a;\n    out[3] = -(g * d) + h * b - i * a;\n\n    return out;\n  }\n\n  /**\n   * Performs a linear interpolation between two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static lerp(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>, t: number): Vec4Like {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n  }\n\n  /**\n   * Generates a random vector with the given scale\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param [scale] - Length of the resulting vector. If ommitted, a unit vector will be returned\n   * @returns `out`\n   */\n  /*static random(out: Vec4Like, scale): Vec4Like {\n    scale = scale || 1.0;\n\n    // Marsaglia, George. Choosing a Point from the Surface of a\n    // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n    // http://projecteuclid.org/euclid.aoms/1177692644;\n    var v1, v2, v3, v4;\n    var s1, s2;\n    do {\n      v1 = glMatrix.RANDOM() * 2 - 1;\n      v2 = glMatrix.RANDOM() * 2 - 1;\n      s1 = v1 * v1 + v2 * v2;\n    } while (s1 >= 1);\n    do {\n      v3 = glMatrix.RANDOM() * 2 - 1;\n      v4 = glMatrix.RANDOM() * 2 - 1;\n      s2 = v3 * v3 + v4 * v4;\n    } while (s2 >= 1);\n\n    var d = Math.sqrt((1 - s1) / s2);\n    out[0] = scale * v1;\n    out[1] = scale * v2;\n    out[2] = scale * v3 * d;\n    out[3] = scale * v4 * d;\n    return out;\n  }*/\n\n  /**\n   * Transforms the {@link Vec4} with a {@link Mat4}.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param m - matrix to transform with\n   * @returns `out`\n   */\n  static transformMat4(out: Vec4Like, a: Readonly<Vec4Like>, m: Readonly<Mat4Like>): Vec4Like {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n  }\n\n  /**\n   * Transforms the {@link Vec4} with a {@link Quat}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param q - quaternion to transform with\n   * @returns `out`\n   */\n  static transformQuat(out: Vec4Like, a: Readonly<Vec4Like>, q: Readonly<QuatLike>): Vec4Like {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const qw = q[3];\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Vec4} to zero\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @returns `out`\n   */\n  static zero(out: Vec4Like): Vec4Like {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    return out;\n  }\n\n  /**\n   * Returns a string representation of a {@link Vec4}\n   * @category Static\n   *\n   * @param a - vector to represent as a string\n   * @returns string representation of the vector\n   */\n  static str(a: Readonly<Vec4Like>): string {\n    return `Vec4(${a.join(', ')})`;\n  }\n\n  /**\n   * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): boolean {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n  }\n\n  /**\n   * Returns whether or not the vectors have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static equals(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    return (\n      Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3))\n    );\n  }\n}\n\n// Instance method alias assignments\nVec4.prototype.sub = Vec4.prototype.subtract;\nVec4.prototype.mul = Vec4.prototype.multiply;\nVec4.prototype.div = Vec4.prototype.divide;\nVec4.prototype.dist = Vec4.prototype.distance;\nVec4.prototype.sqrDist = Vec4.prototype.squaredDistance;\n\n// Static method alias assignments\nVec4.sub = Vec4.subtract;\nVec4.mul = Vec4.multiply;\nVec4.div = Vec4.divide;\nVec4.dist = Vec4.distance;\nVec4.sqrDist = Vec4.squaredDistance;\nVec4.sqrLen = Vec4.squaredLength;\nVec4.mag = Vec4.magnitude;\nVec4.length = Vec4.magnitude;\nVec4.len = Vec4.magnitude;\n\n/**\n * Vec4 alias for backwards compatibility\n */\nexport const vec4 = Vec4;", "import { EPSILON } from './common.js';\nimport { Mat3, Mat3Like } from './mat3.js';\nimport { Vec3, Vec3Like } from './vec3.js';\nimport { Vec4, Vec4Like } from './vec4.js';\n\n/**\n * A Quaternion given as a {@link Quat}, a 4-element Float32Array, or\n * an array of 4 numbers.\n */\nexport type QuatLike = Vec4Like;\n\n/**\n * Quaternion\n */\nexport class Quat extends Float32Array {\n  /**\n   * The number of bytes in a {@link Quat}.\n   */\n  static readonly BYTE_LENGTH = 4 * Float32Array.BYTES_PER_ELEMENT;\n\n  /**\n   * Create a {@link Quat}.\n   */\n   constructor(...values: [Readonly<QuatLike> | ArrayBufferLike, number?] | number[]) {\n    switch(values.length) {\n      case 4:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 4); break;\n      case 1: {\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([v, v, v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 4);\n        }\n        break;\n      }\n      default:\n        super(4);\n        this[3] = 1;\n        break;\n    }\n  }\n\n  //============\n  // Attributes\n  //============\n\n  // Getters and setters to make component access read better.\n  // These are likely to be a little bit slower than direct array access.\n\n  /**\n   * The x component of the quaternion. Equivalent to `this[0];`\n   * @category Quaternion components\n   */\n  get x(): number { return this[0]; }\n  set x(value: number) { this[0] = value; }\n\n  /**\n   * The y component of the quaternion. Equivalent to `this[1];`\n   * @category Quaternion components\n   */\n  get y(): number { return this[1]; }\n  set y(value: number) { this[1] = value; }\n\n  /**\n   * The z component of the quaternion. Equivalent to `this[2];`\n   * @category Quaternion components\n   */\n  get z(): number { return this[2]; }\n  set z(value: number) { this[2] = value; }\n\n  /**\n   * The w component of the quaternion. Equivalent to `this[3];`\n   * @category Quaternion components\n   */\n  get w(): number { return this[3]; }\n  set w(value: number) { this[3] = value; }\n\n  /**\n   * The magnitude (length) of this.\n   * Equivalent to `Quat.magnitude(this);`\n   *\n   * Magnitude is used because the `length` attribute is already defined by\n   * `Float32Array` to mean the number of elements in the array.\n   */\n  get magnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    const w = this[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Alias for {@link Quat.magnitude}\n   */\n  get mag(): number { return this.magnitude; }\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Quat.str(this);`\n   */\n  get str(): string {\n    return Quat.str(this);\n  }\n\n  //===================\n  // Instances methods\n  //===================\n\n  /**\n   * Copy the values from another {@link Quat} into `this`.\n   *\n   * @param a the source quaternion\n   * @returns `this`\n   */\n  copy(a: Readonly<QuatLike>): Quat {\n    super.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity quaternion\n   * Equivalent to Quat.identity(this)\n   *\n   * @returns `this`\n   */\n  identity(): Quat {\n    this[0] = 0;\n    this[1] = 0;\n    this[2] = 0;\n    this[3] = 1;\n    return this;\n  }\n\n  /**\n   * Multiplies `this` by a {@link Quat}.\n   * Equivalent to `Quat.multiply(this, this, b);`\n   *\n   * @param b - The vector to multiply `this` by\n   * @returns `this`\n   */\n  multiply(b: Readonly<QuatLike>): Quat {\n    return Quat.multiply(this, this, b) as Quat;\n  }\n\n  /**\n   * Alias for {@link Quat.multiply}\n   */\n  mul(b: Readonly<QuatLike>): Quat { return this; }\n\n  /**\n   * Rotates `this` by the given angle about the X axis\n   * Equivalent to `Quat.rotateX(this, this, rad);`\n   *\n   * @param rad - angle (in radians) to rotate\n   * @returns `this`\n   */\n  rotateX(rad: number): Quat {\n    return Quat.rotateX(this, this, rad) as Quat;\n  }\n\n  /**\n   * Rotates `this` by the given angle about the Y axis\n   * Equivalent to `Quat.rotateY(this, this, rad);`\n   *\n   * @param rad - angle (in radians) to rotate\n   * @returns `this`\n   */\n  rotateY(rad: number): Quat {\n    return Quat.rotateY(this, this, rad) as Quat;\n  }\n\n  /**\n   * Rotates `this` by the given angle about the Z axis\n   * Equivalent to `Quat.rotateZ(this, this, rad);`\n   *\n   * @param rad - angle (in radians) to rotate\n   * @returns `this`\n   */\n  rotateZ(rad: number): Quat {\n    return Quat.rotateZ(this, this, rad) as Quat;\n  }\n\n  /**\n   * Inverts `this`\n   * Equivalent to `Quat.invert(this, this);`\n   *\n   * @returns `this`\n   */\n  invert(): Quat {\n    return Quat.invert(this, this) as Quat;\n  }\n\n  /**\n   * Scales `this` by a scalar number\n   * Equivalent to `Quat.scale(this, this, scale);`\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to scale\n   * @param scale - amount to scale the vector by\n   * @returns `this`\n   */\n  scale(scale: number): QuatLike {\n    this[0] *= scale;\n    this[1] *= scale;\n    this[2] *= scale;\n    this[3] *= scale;\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of `this` and another {@link Quat}\n   * Equivalent to `Quat.dot(this, b);`\n   *\n   * @param b - the second operand\n   * @returns dot product of `this` and b\n   */\n  dot(b: Readonly<QuatLike>): number {\n    return Quat.dot(this, b);\n  }\n\n  //===================\n  // Static methods\n  //===================\n\n  /**\n   * Creates a new identity quat\n   * @category Static\n   *\n   * @returns a new quaternion\n   */\n  static create(): Quat {\n    return new Quat();\n  }\n\n  /**\n   * Set a quat to the identity quaternion\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @returns `out`\n   */\n  static identity(out: QuatLike): QuatLike {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n  }\n\n  /**\n   * Sets a quat from the given angle and rotation axis,\n   * then returns it.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param axis - the axis around which to rotate\n   * @param rad - the angle in radians\n   * @returns `out`\n   **/\n  static setAxisAngle(out: QuatLike, axis: Readonly<Vec3Like>, rad: number): QuatLike {\n    rad = rad * 0.5;\n    const s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n  }\n\n  /**\n   * Gets the rotation axis and angle for a given\n   *  quaternion. If a quaternion is created with\n   *  setAxisAngle, this method will return the same\n   *  values as providied in the original parameter list\n   *  OR functionally equivalent values.\n   * Example: The quaternion formed by axis [0, 0, 1] and\n   *  angle -90 is the same as the quaternion formed by\n   *  [0, 0, 1] and 270. This method favors the latter.\n   * @category Static\n   *\n   * @param out_axis - Vector receiving the axis of rotation\n   * @param q - Quaternion to be decomposed\n   * @return Angle, in radians, of the rotation\n   */\n  static getAxisAngle(out_axis: Vec3Like, q: Readonly<QuatLike>): number {\n    const rad = Math.acos(q[3]) * 2.0;\n    const s = Math.sin(rad / 2.0);\n    if (s > EPSILON) {\n      out_axis[0] = q[0] / s;\n      out_axis[1] = q[1] / s;\n      out_axis[2] = q[2] / s;\n    } else {\n      // If s is zero, return any axis (no rotation - axis does not matter)\n      out_axis[0] = 1;\n      out_axis[1] = 0;\n      out_axis[2] = 0;\n    }\n    return rad;\n  }\n\n  /**\n   * Gets the angular distance between two unit quaternions\n   * @category Static\n   *\n   * @param  {ReadonlyQuat} a     Origin unit quaternion\n   * @param  {ReadonlyQuat} b     Destination unit quaternion\n   * @return {Number}     Angle, in radians, between the two quaternions\n   */\n  static getAngle(a: Readonly<QuatLike>, b: Readonly<QuatLike>): number {\n    const dotproduct = Quat.dot(a, b);\n\n    return Math.acos(2 * dotproduct * dotproduct - 1);\n  }\n\n  /**\n   * Multiplies two quat's\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static multiply(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>): QuatLike {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const bx = b[0];\n    const by = b[1];\n    const bz = b[2];\n    const bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a quaternion by the given angle about the X axis\n   * @category Static\n   *\n   * @param out - quat receiving operation result\n   * @param a - quat to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateX(out: QuatLike, a: Readonly<QuatLike>, rad: number): QuatLike {\n    rad *= 0.5;\n\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const bx = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n  }\n\n  /**\n   * Rotates a quaternion by the given angle about the Y axis\n   * @category Static\n   *\n   * @param out - quat receiving operation result\n   * @param a - quat to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateY(out: QuatLike, a: Readonly<QuatLike>, rad: number): QuatLike {\n    rad *= 0.5;\n\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const by = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n  }\n\n  /**\n   * Rotates a quaternion by the given angle about the Z axis\n   * @category Static\n   *\n   * @param out - quat receiving operation result\n   * @param a - quat to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateZ(out: QuatLike, a: Readonly<QuatLike>, rad: number): QuatLike {\n    rad *= 0.5;\n\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const bz = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n  }\n\n  /**\n   * Calculates the W component of a quat from the X, Y, and Z components.\n   * Assumes that quaternion is 1 unit in length.\n   * Any existing W component will be ignored.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate W component of\n   * @returns `out`\n   */\n  static calculateW(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\n    const x = a[0],\n      y = a[1],\n      z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n  }\n\n  /**\n   * Calculate the exponential of a unit quaternion.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate the exponential of\n   * @returns `out`\n   */\n  static exp(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\n    const x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n\n    const r = Math.sqrt(x * x + y * y + z * z);\n    const et = Math.exp(w);\n    const s = r > 0 ? (et * Math.sin(r)) / r : 0;\n\n    out[0] = x * s;\n    out[1] = y * s;\n    out[2] = z * s;\n    out[3] = et * Math.cos(r);\n\n    return out;\n  }\n\n  /**\n   * Calculate the natural logarithm of a unit quaternion.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate the exponential of\n   * @returns `out`\n   */\n  static ln(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\n    const x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n\n    const r = Math.sqrt(x * x + y * y + z * z);\n    const t = r > 0 ? Math.atan2(r, w) / r : 0;\n\n    out[0] = x * t;\n    out[1] = y * t;\n    out[2] = z * t;\n    out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n\n    return out;\n  }\n\n  /**\n   * Calculate the scalar power of a unit quaternion.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate the exponential of\n   * @param b - amount to scale the quaternion by\n   * @returns `out`\n   */\n  static pow(out: QuatLike, a: Readonly<QuatLike>, b: number): QuatLike {\n    Quat.ln(out, a);\n    Quat.scale(out, out, b);\n    Quat.exp(out, out);\n    return out;\n  }\n\n  /**\n   * Performs a spherical linear interpolation between two quat\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static slerp(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>, t: number): QuatLike {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    const ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n    let bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n\n    let scale0: number;\n    let scale1: number;\n\n    // calc cosine\n    let cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > EPSILON) {\n      // standard case (slerp)\n      const omega = Math.acos(cosom);\n      const sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n  }\n\n  /**\n   * Generates a random unit quaternion\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @returns `out`\n   */\n  /*static random(out: QuatLike): QuatLike {\n    // Implementation of http://planning.cs.uiuc.edu/node198.html\n    // TODO: Calling random 3 times is probably not the fastest solution\n    let u1 = glMatrix.RANDOM();\n    let u2 = glMatrix.RANDOM();\n    let u3 = glMatrix.RANDOM();\n\n    let sqrt1MinusU1 = Math.sqrt(1 - u1);\n    let sqrtU1 = Math.sqrt(u1);\n\n    out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n    out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n    out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n    out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n    return out;\n  }*/\n\n  /**\n   * Calculates the inverse of a quat\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate inverse of\n   * @returns `out`\n   */\n  static invert(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\n    const a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n    const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    const invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n  }\n\n  /**\n   * Calculates the conjugate of a quat\n   * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate conjugate of\n   * @returns `out`\n   */\n  static conjugate(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Creates a quaternion from the given 3x3 rotation matrix.\n   *\n   * NOTE: The resultant quaternion is not normalized, so you should be sure\n   * to renormalize the quaternion yourself where necessary.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param m - rotation matrix\n   * @returns `out`\n   */\n  static fromMat3(out: QuatLike, m: Readonly<Mat3Like>): QuatLike {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    const fTrace = m[0] + m[4] + m[8];\n    let fRoot: number;\n\n    if (fTrace > 0.0) {\n      // |w| > 1/2, may as well choose w > 1/2\n      fRoot = Math.sqrt(fTrace + 1.0); // 2w\n      out[3] = 0.5 * fRoot;\n      fRoot = 0.5 / fRoot; // 1/(4w)\n      out[0] = (m[5] - m[7]) * fRoot;\n      out[1] = (m[6] - m[2]) * fRoot;\n      out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n      // |w| <= 1/2\n      let i = 0;\n      if (m[4] > m[0]) i = 1;\n      if (m[8] > m[i * 3 + i]) i = 2;\n      let j = (i + 1) % 3;\n      let k = (i + 2) % 3;\n\n      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n      out[i] = 0.5 * fRoot;\n      fRoot = 0.5 / fRoot;\n      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n  }\n\n  /**\n   * Creates a quaternion from the given euler angle x, y, z.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param x - Angle to rotate around X axis in degrees.\n   * @param y - Angle to rotate around Y axis in degrees.\n   * @param z - Angle to rotate around Z axis in degrees.\n   * @returns `out`\n   */\n  static fromEuler(out: QuatLike, x: number, y: number, z: number): QuatLike {\n    let halfToRad = (0.5 * Math.PI) / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n  }\n\n  /**\n   * Returns a string representation of a quatenion\n   * @category Static\n   *\n   * @param a - vector to represent as a string\n   * @returns string representation of the vector\n   */\n  static str(a: Readonly<QuatLike>): string {\n    return `Quat(${a.join(', ')})`;\n  }\n\n  /**\n   * Creates a new quat initialized with values from an existing quaternion\n   * @category Static\n   *\n   * @param a - quaternion to clone\n   * @returns a new quaternion\n   */\n  static clone(a: Readonly<QuatLike>): Quat {\n    return new Quat(a);\n  }\n\n  /**\n   * Creates a new quat initialized with the given values\n   * @category Static\n   *\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @param w - W component\n   * @returns a new quaternion\n   */\n  static fromValues(x: number, y: number, z: number, w: number): Quat {\n    return new Quat(x, y, z, w);\n  }\n\n  /**\n   * Copy the values from one quat to another\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the source quaternion\n   * @returns `out`\n   */\n  static copy(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Quat} to the given values\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @param w - W component\n   * @returns `out`\n   */\n  static set(out: QuatLike, x: number, y: number, z: number, w: number): QuatLike { return out; }\n\n  /**\n   * Adds two {@link Quat}'s\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>): QuatLike { return out; }\n\n  /**\n   * Alias for {@link Quat.multiply}\n   * @category Static\n   */\n  static mul(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>): QuatLike { return out; }\n\n  /**\n   * Scales a quat by a scalar number\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to scale\n   * @param b - amount to scale the vector by\n   * @returns `out`\n   */\n  static scale(out: QuatLike, a: Readonly<QuatLike>, scale: number): QuatLike {\n    out[0] = a[0] * scale;\n    out[1] = a[1] * scale;\n    out[2] = a[2] * scale;\n    out[3] = a[3] * scale;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two quat's\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns dot product of a and b\n   */\n  static dot(a: Readonly<QuatLike>, b: Readonly<QuatLike>): number {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n\n  /**\n   * Performs a linear interpolation between two quat's\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n   static lerp(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>, t: number): QuatLike { return out }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Quat}\n   * @category Static\n   *\n   * @param a - quaternion to calculate length of\n   * @returns length of `a`\n   */\n   static magnitude(a: Readonly<QuatLike>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat.magnitude}\n   * @category Static\n   */\n  static mag(a: Readonly<QuatLike>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat.magnitude}\n   * @category Static\n   * @deprecated Use {@link Quat.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   */\n  // @ts-ignore: Length conflicts with Function.length\n  static length(a: Readonly<QuatLike>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat.magnitude}\n   * @category Static\n   * @deprecated Use {@link Quat.mag}\n   */\n  static len(a: Readonly<QuatLike>): number { return 0; }\n\n  /**\n   * Calculates the squared length of a {@link Quat}\n   * @category Static\n   *\n   * @param a - quaternion to calculate squared length of\n   * @returns squared length of a\n   */\n  static squaredLength(a: Readonly<QuatLike>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat.squaredLength}\n   * @category Static\n   */\n  static sqrLen(a: Readonly<QuatLike>): number { return 0; }\n\n  /**\n   * Normalize a {@link Quat}\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quaternion to normalize\n   * @returns `out`\n   */\n  static normalize(out: QuatLike, a: Readonly<QuatLike>): QuatLike { return out; }\n\n  /**\n   * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first quaternion.\n   * @param b - The second quaternion.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<QuatLike>, b: Readonly<QuatLike>): boolean { return false; }\n\n  /**\n   * Returns whether or not the quaternions have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static equals(a: Readonly<QuatLike>, b: Readonly<QuatLike>): boolean { return false; }\n\n  /**\n   * Sets a quaternion to represent the shortest rotation from one\n   * vector to another.\n   *\n   * Both vectors are assumed to be unit length.\n   * @category Static\n   *\n   * @param out - the receiving quaternion.\n   * @param a - the initial vector\n   * @param b - the destination vector\n   * @returns `out`\n   */\n  static rotationTo(out: QuatLike, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): QuatLike {\n    let dot = Vec3.dot(a, b);\n    if (dot < -0.999999) {\n      Vec3.cross(tmpVec3, xUnitVec3, a);\n      if (Vec3.len(tmpVec3) < 0.000001) Vec3.cross(tmpVec3, yUnitVec3, a);\n      Vec3.normalize(tmpVec3, tmpVec3);\n      Quat.setAxisAngle(out, tmpVec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      Vec3.cross(tmpVec3, a, b);\n      out[0] = tmpVec3[0];\n      out[1] = tmpVec3[1];\n      out[2] = tmpVec3[2];\n      out[3] = 1 + dot;\n      return Quat.normalize(out, out);\n    }\n  }\n\n  /**\n   * Performs a spherical linear interpolation with two control points\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param c - the third operand\n   * @param d - the fourth operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static sqlerp(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>, c: Readonly<QuatLike>, d: Readonly<QuatLike>, t: number): QuatLike {\n    Quat.slerp(temp1, a, d, t);\n    Quat.slerp(temp2, b, c, t);\n    Quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  }\n\n  /**\n   * Sets the specified quaternion with values corresponding to the given\n   * axes. Each axis is a vec3 and is expected to be unit length and\n   * perpendicular to all other specified axes.\n   * @category Static\n   *\n   * @param out - The receiving quaternion\n   * @param view - the vector representing the viewing direction\n   * @param right - the vector representing the local \"right\" direction\n   * @param up - the vector representing the local \"up\" direction\n   * @returns `out`\n   */\n  static setAxes(out: QuatLike, view: Readonly<Vec3Like>, right: Readonly<Vec3Like>, up: Readonly<Vec3Like>): QuatLike {\n    tempMat3[0] = right[0];\n    tempMat3[3] = right[1];\n    tempMat3[6] = right[2];\n\n    tempMat3[1] = up[0];\n    tempMat3[4] = up[1];\n    tempMat3[7] = up[2];\n\n    tempMat3[2] = -view[0];\n    tempMat3[5] = -view[1];\n    tempMat3[8] = -view[2];\n\n    return Quat.normalize(out, Quat.fromMat3(out, tempMat3));\n  }\n}\n\n// Temporary variables to prevent repeated allocations in the algorithms above.\nconst temp1 = new Quat();\nconst temp2 = new Quat();\nconst tempMat3 = new Mat3();\n\nconst tmpVec3 = new Vec3();\nconst xUnitVec3 = new Vec3(1, 0, 0);\nconst yUnitVec3 = new Vec3(0, 1, 0);\n\n// Methods which re-use the Vec4 implementation\nQuat.set = Vec4.set;\nQuat.add = Vec4.add;\nQuat.lerp = Vec4.lerp;\nQuat.normalize = Vec4.normalize;\nQuat.squaredLength = Vec4.squaredLength;\nQuat.sqrLen = Vec4.squaredLength;\nQuat.exactEquals = Vec4.exactEquals;\nQuat.equals = Vec4.equals;\nQuat.magnitude = Vec4.magnitude;\n\n// Instance method alias assignments\nQuat.prototype.mul = Quat.prototype.multiply;\n\n// Static method alias assignments\nQuat.mul = Quat.multiply;\nQuat.mag = Quat.magnitude;\nQuat.length = Quat.magnitude;\nQuat.len = Quat.magnitude;\n\n/**\n * Quat alias for backwards compatibility\n */\nexport const quat = Quat;", "import { EPSILON } from './common.js';\nimport { Mat4, Mat4Like } from './mat4.js';\nimport { Quat, QuatLike } from './quat.js';\nimport { Vec3, Vec3Like } from './vec3.js';\n\n/**\n * A Dual Quaternion given as a {@link Quat2}, an 8-element Float32Array, or\n * an array of 8 numbers.\n */\nexport type Quat2Like = [\n  number, number, number, number,\n  number, number, number, number\n] | Float32Array;\n\n/**\n * Dual Quaternion\n */\nexport class Quat2 extends Float32Array {\n  /**\n   * The number of bytes in a {@link Quat}.\n   */\n  static readonly BYTE_LENGTH = 8 * Float32Array.BYTES_PER_ELEMENT;\n\n  /**\n   * Create a {@link Quat2}.\n   */\n   constructor(...values: [Readonly<Quat2Like> | ArrayBufferLike, number?] | number[]) {\n    switch(values.length) {\n      case 8:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 8); break;\n      case 1: {\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([v, v, v, v, v, v, v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 8);\n        }\n        break;\n      }\n      default:\n        super(8);\n        this[3] = 1;\n        break;\n    }\n  }\n\n  //============\n  // Attributes\n  //============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Quat2.str(this);`\n   */\n  get str(): string {\n    return Quat2.str(this);\n  }\n\n  //===================\n  // Instances methods\n  //===================\n\n  /**\n   * Copy the values from another {@link Quat2} into `this`.\n   *\n   * @param a the source dual quaternion\n   * @returns `this`\n   */\n  copy(a: Readonly<Quat2Like>): Quat2 {\n    super.set(a);\n    return this;\n  }\n\n\n  //===================\n  // Static methods\n  //===================\n\n  /**\n   * Creates a new identity {@link Quat2}\n   * @category Static\n   *\n   * @returns a new dual quaternion [real -> rotation, dual -> translation]\n   */\n  static create(): Quat2 {\n    return new Quat2();\n  }\n\n  /**\n   * Creates a {@link Quat2} quat initialized with values from an existing quaternion\n   * @category Static\n   *\n   * @param a - dual quaternion to clone\n   * @returns a new dual quaternion\n   */\n  static clone(a: Quat2Like): Quat2 {\n    return new Quat2(a);\n  }\n\n  /**\n   * Creates a new {@link Quat2}  initialized with the given values\n   * @category Static\n   *\n   * @param x1 - 1st X component\n   * @param y1 - 1st Y component\n   * @param z1 - 1st Z component\n   * @param w1 - 1st W component\n   * @param x2 - 2nd X component\n   * @param y2 - 2nd Y component\n   * @param z2 - 2nd Z component\n   * @param w2 - 2nd W component\n   * @returns a new dual quaternion\n   */\n  static fromValues(x1: number, y1: number, z1: number, w1: number,\n                    x2: number, y2: number, z2: number, w2: number): Quat2 {\n    return new Quat2(x1, y1, z1, w1, x2, y2, z2, w2);\n  }\n\n  /**\n   * Creates a new {@link Quat2} from the given values (quat and translation)\n   * @category Static\n   *\n   * @param x1 - X component (rotation)\n   * @param y1 - Y component (rotation)\n   * @param z1 - Z component (rotation)\n   * @param w1 - W component (rotation)\n   * @param x2 - X component (translation)\n   * @param y2 - Y component (translation)\n   * @param z2 - Z component (translation)\n   * @returns a new dual quaternion\n   */\n  static fromRotationTranslationValues(x1: number, y1: number, z1: number, w1: number,\n                                       x2: number, y2: number, z2: number): Quat2 {\n    const ax = x2 * 0.5;\n    const ay = y2 * 0.5;\n    const az = z2 * 0.5;\n\n    return new Quat2(x1, y1, z1, w1,\n      ax * w1 + ay * z1 - az * y1,\n      ay * w1 + az * x1 - ax * z1,\n      az * w1 + ax * y1 - ay * x1,\n     -ax * x1 - ay * y1 - az * z1);\n  }\n\n  /**\n   * Sets a {@link Quat2} from a quaternion and a translation\n   * @category Static\n   *\n   * @param out - dual quaternion receiving operation result\n   * @param q - a normalized quaternion\n   * @param t - translation vector\n   * @returns `out`\n   */\n  static fromRotationTranslation(out: Quat2Like, q: Readonly<QuatLike>, t: Readonly<Vec3Like>): Quat2Like {\n    const ax = t[0] * 0.5;\n    const ay = t[1] * 0.5;\n    const az = t[2] * 0.5;\n    const bx = q[0];\n    const by = q[1];\n    const bz = q[2];\n    const bw = q[3];\n    out[0] = bx;\n    out[1] = by;\n    out[2] = bz;\n    out[3] = bw;\n    out[4] = ax * bw + ay * bz - az * by;\n    out[5] = ay * bw + az * bx - ax * bz;\n    out[6] = az * bw + ax * by - ay * bx;\n    out[7] = -ax * bx - ay * by - az * bz;\n    return out;\n  }\n\n  /**\n   * Sets a {@link Quat2} from a translation\n   * @category Static\n   *\n   * @param out - dual quaternion receiving operation result\n   * @param t - translation vector\n   * @returns `out`\n   */\n  static fromTranslation(out: Quat2Like, t: Readonly<Vec3Like>): Quat2Like {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = t[0] * 0.5;\n    out[5] = t[1] * 0.5;\n    out[6] = t[2] * 0.5;\n    out[7] = 0;\n    return out;\n  }\n\n  /**\n   * Sets a {@link Quat2} from a quaternion\n   * @category Static\n   *\n   * @param out - dual quaternion receiving operation result\n   * @param q - a normalized quaternion\n   * @returns `out`\n   */\n  static fromRotation(out: Quat2Like, q: Readonly<QuatLike>): Quat2Like {\n    out[0] = q[0];\n    out[1] = q[1];\n    out[2] = q[2];\n    out[3] = q[3];\n    out[4] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    return out;\n  }\n\n  /**\n   * Sets a {@link Quat2} from a quaternion\n   * @category Static\n   *\n   * @param out - dual quaternion receiving operation result\n   * @param a - the matrix\n   * @returns `out`\n   */\n  static fromMat4(out: Quat2Like, a: Readonly<Mat4Like>): Quat2Like {\n    Mat4.getRotation(tempQuat, a);\n    Mat4.getTranslation(tempVec3, a);\n    return Quat2.fromRotationTranslation(out, tempQuat, tempVec3);\n  }\n\n  /**\n   * Copy the values from one {@link Quat2} to another\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the source dual quaternion\n   * @returns `out`\n   */\n  static copy(out: Quat2Like, a: Readonly<Quat2Like>): Quat2Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    return out;\n  }\n\n  /**\n   * Set a {@link Quat2} to the identity dual quaternion\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @returns `out`\n   */\n  static identity(out: QuatLike): QuatLike {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Quat2} to the given values\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param x1 - 1st X component\n   * @param y1 - 1st Y component\n   * @param z1 - 1st Z component\n   * @param w1 - 1st W component\n   * @param x2 - 2nd X component\n   * @param y2 - 2nd Y component\n   * @param z2 - 2nd Z component\n   * @param w2 - 2nd W component\n   * @returns `out`\n   */\n  static set(out: Quat2Like, x1: number, y1: number, z1: number, w1: number,\n                             x2: number, y2: number, z2: number, w2: number): Quat2Like {\n    out[0] = x1;\n    out[1] = y1;\n    out[2] = z1;\n    out[3] = w1;\n    out[4] = x2;\n    out[5] = y2;\n    out[6] = z2;\n    out[7] = w2;\n    return out;\n  }\n\n  /**\n   * Gets the real part of a dual quat\n   * @category Static\n   *\n   * @param out - real part\n   * @param a - Dual Quaternion\n   * @return `out`\n   */\n  static getReal(out: QuatLike, a: Readonly<Quat2Like>): QuatLike {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  };\n\n  /**\n   * Gets the dual part of a dual quat\n   * @category Static\n   *\n   * @param out - dual part\n   * @param a - Dual Quaternion\n   * @return `out`\n   */\n  static getDual(out: QuatLike, a: Readonly<Quat2Like>): QuatLike {\n    out[0] = a[4];\n    out[1] = a[5];\n    out[2] = a[6];\n    out[3] = a[7];\n    return out;\n  }\n\n  /**\n   * Set the real component of a {@link Quat2} to the given quaternion\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - a quaternion representing the real part\n   * @return `out`\n   */\n  static setReal(out: Quat2Like, a: Readonly<QuatLike>): Quat2Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  };\n\n  /**\n   * Set the dual component of a {@link Quat2} to the given quaternion\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - a quaternion representing the dual part\n   * @return `out`\n   */\n  static setDual(out: Quat2Like, a: Readonly<QuatLike>): Quat2Like {\n    out[4] = a[0];\n    out[5] = a[1];\n    out[6] = a[2];\n    out[7] = a[3];\n    return out;\n  }\n\n  /**\n   * Gets the translation of a normalized {@link Quat2}\n   * @category Static\n   *\n   * @param out - the receiving translation vector\n   * @param a - Dual Quaternion to be decomposed\n   * @return `out`\n   */\n  static getTranslation(out: Vec3Like, a: Readonly<Quat2Like>): Vec3Like {\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    const bx = -a[0];\n    const by = -a[1];\n    const bz = -a[2];\n    const bw = a[3];\n    out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n    return out;\n  }\n\n  /**\n   * Translates a {@link Quat2} by the given vector\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to translate\n   * @param v - vector to translate by\n   * @returns `out`\n   */\n  static translate(out: Quat2Like, a: Readonly<Quat2Like>, v: Readonly<Vec3Like>): Quat2Like {\n    const ax1 = a[0];\n    const ay1 = a[1];\n    const az1 = a[2];\n    const aw1 = a[3];\n    const bx1 = v[0] * 0.5;\n    const by1 = v[1] * 0.5;\n    const bz1 = v[2] * 0.5;\n    const ax2 = a[4];\n    const ay2 = a[5];\n    const az2 = a[6];\n    const aw2 = a[7];\n    out[0] = ax1;\n    out[1] = ay1;\n    out[2] = az1;\n    out[3] = aw1;\n    out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n    out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n    out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n    out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} around the X axis\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateX(out: Quat2Like, a: Readonly<Quat2Like>, rad: number): Quat2Like {\n    let bx = -a[0];\n    let by = -a[1];\n    let bz = -a[2];\n    let bw = a[3];\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    const ax1 = ax * bw + aw * bx + ay * bz - az * by;\n    const ay1 = ay * bw + aw * by + az * bx - ax * bz;\n    const az1 = az * bw + aw * bz + ax * by - ay * bx;\n    const aw1 = aw * bw - ax * bx - ay * by - az * bz;\n    Quat.rotateX(out as QuatLike, a as QuatLike, rad);\n    bx = out[0];\n    by = out[1];\n    bz = out[2];\n    bw = out[3];\n    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} around the Y axis\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateY(out: Quat2Like, a: Readonly<Quat2Like>, rad: number): Quat2Like {\n    let bx = -a[0];\n    let by = -a[1];\n    let bz = -a[2];\n    let bw = a[3];\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    const ax1 = ax * bw + aw * bx + ay * bz - az * by;\n    const ay1 = ay * bw + aw * by + az * bx - ax * bz;\n    const az1 = az * bw + aw * bz + ax * by - ay * bx;\n    const aw1 = aw * bw - ax * bx - ay * by - az * bz;\n    Quat.rotateY(out as QuatLike, a as QuatLike, rad);\n    bx = out[0];\n    by = out[1];\n    bz = out[2];\n    bw = out[3];\n    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} around the Z axis\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateZ(out: Quat2Like, a: Readonly<Quat2Like>, rad: number): Quat2Like {\n    let bx = -a[0];\n    let by = -a[1];\n    let bz = -a[2];\n    let bw = a[3];\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    const ax1 = ax * bw + aw * bx + ay * bz - az * by;\n    const ay1 = ay * bw + aw * by + az * bx - ax * bz;\n    const az1 = az * bw + aw * bz + ax * by - ay * bx;\n    const aw1 = aw * bw - ax * bx - ay * by - az * bz;\n    Quat.rotateZ(out as QuatLike, a as QuatLike, rad);\n    bx = out[0];\n    by = out[1];\n    bz = out[2];\n    bw = out[3];\n    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} by a given quaternion (a * q)\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param q - quaternion to rotate by\n   * @returns `out`\n   */\n  static rotateByQuatAppend(out: Quat2Like, a: Readonly<Quat2Like>, q: Readonly<QuatLike>): Quat2Like {\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const qw = q[3];\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n\n    out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n    out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n    out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n    out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n    ax = a[4];\n    ay = a[5];\n    az = a[6];\n    aw = a[7];\n    out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n    out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n    out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n    out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} by a given quaternion (q * a)\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param q - quaternion to rotate by\n   * @param a - the dual quaternion to rotate\n   * @returns `out`\n   */\n  static rotateByQuatPrepend(out: Quat2Like, q: Readonly<QuatLike>, a: Readonly<Quat2Like>): Quat2Like {\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const qw = q[3];\n    let bx = a[0];\n    let by = a[1];\n    let bz = a[2];\n    let bw = a[3];\n\n    out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n    out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n    out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n    out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n    bx = a[4];\n    by = a[5];\n    bz = a[6];\n    bw = a[7];\n    out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n    out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n    out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n    out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} around a given axis. Does the normalization automatically\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param axis - the axis to rotate around\n   * @param rad - how far the rotation should be\n   * @returns `out`\n   */\n  static rotateAroundAxis(out: Quat2Like, a: Readonly<Quat2Like>, axis: Readonly<Vec3Like>, rad: number): Quat2Like {\n    //Special case for rad = 0\n    if (Math.abs(rad) < EPSILON) {\n      return Quat2.copy(out, a);\n    }\n    const axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n    rad = rad * 0.5;\n    const s = Math.sin(rad);\n    const bx = (s * axis[0]) / axisLength;\n    const by = (s * axis[1]) / axisLength;\n    const bz = (s * axis[2]) / axisLength;\n    const bw = Math.cos(rad);\n\n    const ax1 = a[0];\n    const ay1 = a[1];\n    const az1 = a[2];\n    const aw1 = a[3];\n    out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n    out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n    out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n    out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    out[4] = ax * bw + aw * bx + ay * bz - az * by;\n    out[5] = ay * bw + aw * by + az * bx - ax * bz;\n    out[6] = az * bw + aw * bz + ax * by - ay * bx;\n    out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n    return out;\n  }\n\n  /**\n   * Adds two {@link Quat2}s\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add(out: Quat2Like, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): Quat2Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    return out;\n  }\n\n  /**\n   * Multiplies two {@link Quat2}s\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns {quat2} out\n   */\n  static multiply(out: Quat2Like, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): Quat2Like {\n    const ax0 = a[0];\n    const ay0 = a[1];\n    const az0 = a[2];\n    const aw0 = a[3];\n    const bx1 = b[4];\n    const by1 = b[5];\n    const bz1 = b[6];\n    const bw1 = b[7];\n    const ax1 = a[4];\n    const ay1 = a[5];\n    const az1 = a[6];\n    const aw1 = a[7];\n    const bx0 = b[0];\n    const by0 = b[1];\n    const bz0 = b[2];\n    const bw0 = b[3];\n    out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n    out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n    out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n    out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n    out[4] =\n      ax0 * bw1 +\n      aw0 * bx1 +\n      ay0 * bz1 -\n      az0 * by1 +\n      ax1 * bw0 +\n      aw1 * bx0 +\n      ay1 * bz0 -\n      az1 * by0;\n    out[5] =\n      ay0 * bw1 +\n      aw0 * by1 +\n      az0 * bx1 -\n      ax0 * bz1 +\n      ay1 * bw0 +\n      aw1 * by0 +\n      az1 * bx0 -\n      ax1 * bz0;\n    out[6] =\n      az0 * bw1 +\n      aw0 * bz1 +\n      ax0 * by1 -\n      ay0 * bx1 +\n      az1 * bw0 +\n      aw1 * bz0 +\n      ax1 * by0 -\n      ay1 * bx0;\n    out[7] =\n      aw0 * bw1 -\n      ax0 * bx1 -\n      ay0 * by1 -\n      az0 * bz1 +\n      aw1 * bw0 -\n      ax1 * bx0 -\n      ay1 * by0 -\n      az1 * bz0;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Quat2.multiply}\n   * @category Static\n   */\n  static mul(out: Quat2Like, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): Quat2Like { return out; }\n\n  /**\n   * Scales a {@link Quat2} by a scalar value\n   * @category Static\n   *\n   * @param out - the receiving dual quaterion\n   * @param a - the dual quaternion to scale\n   * @param b - scalar value to scale the dual quaterion by\n   * @returns `out`\n   */\n  static scale(out: Quat2Like, a: Readonly<Quat2Like>, b: number): Quat2Like {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two {@link Quat2}s (The dot product of the real parts)\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns dot product of a and b\n   */\n  static dot(a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Performs a linear interpolation between two {@link Quat2}s\n   * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when `t = 0.5`)\n   * @category Static\n   *\n   * @param out - the receiving dual quat\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static lerp(out: Quat2Like, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>, t: number): Quat2Like {\n    const mt = 1 - t;\n    if (Quat2.dot(a, b) < 0) t = -t;\n\n    out[0] = a[0] * mt + b[0] * t;\n    out[1] = a[1] * mt + b[1] * t;\n    out[2] = a[2] * mt + b[2] * t;\n    out[3] = a[3] * mt + b[3] * t;\n    out[4] = a[4] * mt + b[4] * t;\n    out[5] = a[5] * mt + b[5] * t;\n    out[6] = a[6] * mt + b[6] * t;\n    out[7] = a[7] * mt + b[7] * t;\n\n    return out;\n  }\n\n  /**\n   * Calculates the inverse of a {@link Quat2}. If they are normalized, conjugate is cheaper\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - dual quat to calculate inverse of\n   * @returns `out`\n   */\n  static invert(out: Quat2Like, a: Readonly<Quat2Like>): Quat2Like {\n    const sqlen = Quat2.squaredLength(a);\n    out[0] = -a[0] / sqlen;\n    out[1] = -a[1] / sqlen;\n    out[2] = -a[2] / sqlen;\n    out[3] = a[3] / sqlen;\n    out[4] = -a[4] / sqlen;\n    out[5] = -a[5] / sqlen;\n    out[6] = -a[6] / sqlen;\n    out[7] = a[7] / sqlen;\n    return out;\n  }\n\n  /**\n   * Calculates the conjugate of a {@link Quat2}\n   * If the dual quaternion is normalized, this function is faster than {@link Quat2.invert} and produces the same result.\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - dual quaternion to calculate conjugate of\n   * @returns `out`\n   */\n  static conjugate(out: Quat2Like, a: Readonly<Quat2Like>): Quat2Like {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    out[4] = -a[4];\n    out[5] = -a[5];\n    out[6] = -a[6];\n    out[7] = a[7];\n    return out;\n  }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Quat2}\n   * @category Static\n   *\n   * @param a - dual quaternion to calculate length of\n   * @returns length of `a`\n   */\n  static magnitude(a: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat2.magnitude}\n   * @category Static\n   */\n  static mag(a: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat2.magnitude}\n   * @category Static\n   * @deprecated Use {@link Quat2.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   */\n  // @ts-ignore: Length conflicts with Function.length\n  static length(a: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat2.magnitude}\n   * @category Static\n   * @deprecated Use {@link Quat2.mag}\n   */\n  static len(a: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Calculates the squared length of a {@link Quat2}\n   * @category Static\n   *\n   * @param a - dual quaternion to calculate squared length of\n   * @returns squared length of a\n   */\n  static squaredLength(a: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat2.squaredLength}\n   * @category Static\n   */\n  static sqrLen(a: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Normalize a {@link Quat2}\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - dual quaternion to normalize\n   * @returns `out`\n   */\n  static normalize(out: Quat2Like, a: Readonly<Quat2Like>): Quat2Like {\n    let magnitude = Quat2.squaredLength(a);\n    if (magnitude > 0) {\n      magnitude = Math.sqrt(magnitude);\n\n      const a0 = a[0] / magnitude;\n      const a1 = a[1] / magnitude;\n      const a2 = a[2] / magnitude;\n      const a3 = a[3] / magnitude;\n\n      const b0 = a[4];\n      const b1 = a[5];\n      const b2 = a[6];\n      const b3 = a[7];\n\n      const a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n\n      out[0] = a0;\n      out[1] = a1;\n      out[2] = a2;\n      out[3] = a3;\n\n      out[4] = (b0 - a0 * a_dot_b) / magnitude;\n      out[5] = (b1 - a1 * a_dot_b) / magnitude;\n      out[6] = (b2 - a2 * a_dot_b) / magnitude;\n      out[7] = (b3 - a3 * a_dot_b) / magnitude;\n    }\n    return out;\n  }\n\n  /**\n   * Returns a string representation of a {@link Quat2}\n   * @category Static\n   *\n   * @param a - dual quaternion to represent as a string\n   * @returns string representation of the vector\n   */\n  static str(a: Readonly<Quat2Like>): string {\n    return `Quat2(${a.join(', ')})`;\n  }\n\n  /**\n   * Returns whether or not the {@link Quat2}s have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first dual quaternion.\n   * @param b - The second dual quaternion.\n   * @returns True if the dual quaternions are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3] &&\n      a[4] === b[4] &&\n      a[5] === b[5] &&\n      a[6] === b[6] &&\n      a[7] === b[7]\n    );\n  }\n\n  /**\n   * Returns whether or not the {@link Quat2}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first dual quaternion.\n   * @param b - The second dual quaternion.\n   * @returns True if the dual quaternions are equal, false otherwise.\n   */\n  static equals(a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const a6 = a[6];\n    const a7 = a[7];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n    const b6 = b[6];\n    const b7 = b[7];\n    return (\n      Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n      Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n      Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n      Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n      Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7))\n    );\n  }\n}\n\n// Temporary variables to prevent repeated allocations in the algorithms above.\nconst tempQuat = new Quat();\nconst tempVec3 = new Vec3();\n\n// Methods which re-use the Quat implementation\n// @ts-ignore\nQuat2.dot = Quat.dot;\n// @ts-ignore\nQuat2.squaredLength = Quat.squaredLength;\n// @ts-ignore\nQuat2.sqrLen = Quat.squaredLength;\n// @ts-ignore\nQuat2.mag = Quat.magnitude;\n// @ts-ignore\nQuat2.length = Quat.magnitude;\n// @ts-ignore\nQuat2.len = Quat.magnitude;\n\n// Static method alias assignments\nQuat2.mul = Quat2.multiply;\n\n/**\n * Quat2 alias for backwards compatibility\n */\nexport const quat2 = Quat2;", "import { EPSILON } from './common.js';\r\nimport { Mat2Like } from './mat2.js';\r\nimport { Mat2dLike } from './mat2d.js';\r\nimport { Mat3Like } from './mat3.js';\r\nimport { Mat4Like } from './mat4.js';\r\nimport { Vec3 } from './vec3.js';\r\nimport { Vec4 } from './vec4.js';\r\n\r\n/**\r\n * A 2 dimensional vector given as a {@link Vec2}, a 2-element Float32Array, or\r\n * an array of 2 numbers.\r\n */\r\nexport type Vec2Like = [number, number] | Float32Array;\r\n\r\n/**\r\n * 2 Dimensional Vector\r\n */\r\nexport class Vec2 extends Float32Array {\r\n  /**\r\n   * The number of bytes in a {@link Vec2}.\r\n   */\r\n  static readonly BYTE_LENGTH = 2 * Float32Array.BYTES_PER_ELEMENT;\r\n\r\n  /**\r\n   * Create a {@link Vec2}.\r\n   */\r\n   constructor(...values: [Readonly<Vec2Like> | ArrayBufferLike, number?] | number[]) {\r\n    switch(values.length) {\r\n      case 2:{\r\n        const v = values[0];\r\n        if (typeof v === 'number') {\r\n          super([v, values[1]]);\r\n        } else {\r\n          super(v as ArrayBufferLike, values[1], 2);\r\n        }\r\n        break;\r\n      }\r\n      case 1: {\r\n        const v = values[0];\r\n        if (typeof v === 'number') {\r\n          super([v, v]);\r\n        } else {\r\n          super(v as ArrayBufferLike, 0, 2);\r\n        }\r\n        break;\r\n      }\r\n      default:\r\n        super(2); break;\r\n    }\r\n  }\r\n\r\n  //============\r\n  // Attributes\r\n  //============\r\n\r\n  // Getters and setters to make component access read better.\r\n  // These are likely to be a little bit slower than direct array access.\r\n\r\n  /**\r\n   * The x component of the vector. Equivalent to `this[0];`\r\n   * @category Vector components\r\n   */\r\n  get x(): number { return this[0]; }\r\n  set x(value: number) { this[0] = value; }\r\n\r\n  /**\r\n   * The y component of the vector. Equivalent to `this[1];`\r\n   * @category Vector components\r\n   */\r\n  get y(): number { return this[1]; }\r\n  set y(value: number) { this[1] = value; }\r\n\r\n  // Alternate set of getters and setters in case this is being used to define\r\n  // a color.\r\n\r\n  /**\r\n   * The r component of the vector. Equivalent to `this[0];`\r\n   * @category Color components\r\n   */\r\n  get r(): number { return this[0]; }\r\n  set r(value: number) { this[0] = value; }\r\n\r\n  /**\r\n   * The g component of the vector. Equivalent to `this[1];`\r\n   * @category Color components\r\n   */\r\n  get g(): number { return this[1]; }\r\n  set g(value: number) { this[1] = value; }\r\n\r\n  /**\r\n   * The magnitude (length) of this.\r\n   * Equivalent to `Vec2.magnitude(this);`\r\n   *\r\n   * Magnitude is used because the `length` attribute is already defined by\r\n   * `Float32Array` to mean the number of elements in the array.\r\n   */\r\n  get magnitude(): number {\r\n    return Math.hypot(this[0], this[1]);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.magnitude}\r\n   */\r\n  get mag(): number { return this.magnitude; }\r\n\r\n  /**\r\n   * The squared magnitude (length) of `this`.\r\n   * Equivalent to `Vec2.squaredMagnitude(this);`\r\n   */\r\n  get squaredMagnitude(): number {\r\n    const x = this[0];\r\n    const y = this[1];\r\n    return x * x + y * y;\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.squaredMagnitude}\r\n   */\r\n  get sqrMag(): number { return this.squaredMagnitude; }\r\n\r\n  /**\r\n   * A string representation of `this`\r\n   * Equivalent to `Vec2.str(this);`\r\n   */\r\n  get str(): string {\r\n    return Vec2.str(this);\r\n  }\r\n\r\n  //===================\r\n  // Instances methods\r\n  //===================\r\n\r\n  /**\r\n   * Copy the values from another {@link Vec2} into `this`.\r\n   *\r\n   * @param a the source vector\r\n   * @returns `this`\r\n   */\r\n  copy(a: Readonly<Vec2Like>): Vec2 {\r\n    this.set(a);\r\n    return this;\r\n  }\r\n\r\n  // Instead of zero(), use a.fill(0) for instances;\r\n\r\n  /**\r\n   * Adds a {@link Vec2} to `this`.\r\n   * Equivalent to `Vec2.add(this, this, b);`\r\n   *\r\n   * @param b - The vector to add to `this`\r\n   * @returns `this`\r\n   */\r\n  add(b: Readonly<Vec2Like>): Vec2 {\r\n    this[0] += b[0];\r\n    this[1] += b[1];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Subtracts a {@link Vec2} from `this`.\r\n   * Equivalent to `Vec2.subtract(this, this, b);`\r\n   *\r\n   * @param b - The vector to subtract from `this`\r\n   * @returns `this`\r\n   */\r\n  subtract(b: Readonly<Vec2Like>): Vec2 {\r\n    this[0] -= b[0];\r\n    this[1] -= b[1];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec2.subtract}\r\n   */\r\n  sub(b: Readonly<Vec2Like>): Vec2 { return this; }\r\n\r\n  /**\r\n   * Multiplies `this` by a {@link Vec2}.\r\n   * Equivalent to `Vec2.multiply(this, this, b);`\r\n   *\r\n   * @param b - The vector to multiply `this` by\r\n   * @returns `this`\r\n   */\r\n  multiply(b: Readonly<Vec2Like>): Vec2 {\r\n    this[0] *= b[0];\r\n    this[1] *= b[1];\r\n    return this;\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.multiply}\r\n   */\r\n  mul(b: Readonly<Vec2Like>): Vec2 { return this; }\r\n\r\n  /**\r\n   * Divides `this` by a {@link Vec2}.\r\n   * Equivalent to `Vec2.divide(this, this, b);`\r\n   *\r\n   * @param b - The vector to divide `this` by\r\n   * @returns {Vec2} `this`\r\n   */\r\n  divide(b: Readonly<Vec2Like>): Vec2 {\r\n    this[0] /= b[0];\r\n    this[1] /= b[1];\r\n    return this;\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.divide}\r\n   */\r\n  div(b: Readonly<Vec2Like>): Vec2 { return this; }\r\n\r\n  /**\r\n   * Scales `this` by a scalar number.\r\n   * Equivalent to `Vec2.scale(this, this, b);`\r\n   *\r\n   * @param b - Amount to scale `this` by\r\n   * @returns `this`\r\n   */\r\n  scale(b: number): Vec2 {\r\n    this[0] *= b;\r\n    this[1] *= b;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates `this` scaled by a scalar value then adds the result to `this`.\r\n   * Equivalent to `Vec2.scaleAndAdd(this, this, b, scale);`\r\n   *\r\n   * @param b - The vector to add to `this`\r\n   * @param scale - The amount to scale `b` by before adding\r\n   * @returns `this`\r\n   */\r\n  scaleAndAdd(b: Readonly<Vec2Like>, scale: number): Vec2 {\r\n    this[0] += b[0] * scale;\r\n    this[1] += b[1] * scale;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates the euclidian distance between another {@link Vec2} and `this`.\r\n   * Equivalent to `Vec2.distance(this, b);`\r\n   *\r\n   * @param b - The vector to calculate the distance to\r\n   * @returns Distance between `this` and `b`\r\n   */\r\n  distance(b: Readonly<Vec2Like>): number {\r\n    return Vec2.distance(this, b);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.distance}\r\n   */\r\n  dist(b: Readonly<Vec2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared euclidian distance between another {@link Vec2} and `this`.\r\n   * Equivalent to `Vec2.squaredDistance(this, b);`\r\n   *\r\n   * @param b The vector to calculate the squared distance to\r\n   * @returns Squared distance between `this` and `b`\r\n   */\r\n  squaredDistance(b: Readonly<Vec2Like>): number {\r\n    return Vec2.squaredDistance(this, b);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.squaredDistance}\r\n   */\r\n  sqrDist(b: Readonly<Vec2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Negates the components of `this`.\r\n   * Equivalent to `Vec2.negate(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  negate(): Vec2 {\r\n    this[0] *= -1;\r\n    this[1] *= -1;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inverts the components of `this`.\r\n   * Equivalent to `Vec2.inverse(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  invert(): Vec2 {\r\n    this[0] = 1.0 / this[0];\r\n    this[1] = 1.0 / this[1];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates the dot product of this and another {@link Vec2}.\r\n   * Equivalent to `Vec2.dot(this, b);`\r\n   *\r\n   * @param b - The second operand\r\n   * @returns Dot product of `this` and `b`\r\n   */\r\n  dot(b: Readonly<Vec2Like>): number {\r\n    return this[0] * b[0] + this[1] * b[1];\r\n  }\r\n\r\n  /**\r\n   * Normalize `this`.\r\n   * Equivalent to `Vec2.normalize(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n   normalize(): Vec2 {\r\n    return Vec2.normalize(this, this) as Vec2;\r\n  }\r\n\r\n  //================\r\n  // Static methods\r\n  //================\r\n\r\n  /**\r\n   * Creates a new, empty {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @returns A new 2D vector\r\n   */\r\n  static create(): Vec2 {\r\n    return new Vec2();\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link Vec2} initialized with values from an existing vector\r\n   * @category Static\r\n   *\r\n   * @param a - Vector to clone\r\n   * @returns A new 2D vector\r\n   */\r\n  static clone(a: Readonly<Vec2Like>): Vec2 {\r\n    return new Vec2(a);\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link Vec2} initialized with the given values\r\n   * @category Static\r\n   *\r\n   * @param x - X component\r\n   * @param y - Y component\r\n   * @returns A new 2D vector\r\n   */\r\n   static fromValues(x: number, y: number): Vec2 {\r\n    return new Vec2(x, y);\r\n  }\r\n\r\n  /**\r\n   * Copy the values from one {@link Vec2} to another\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - The source vector\r\n   * @returns `out`\r\n   */\r\n  static copy(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set the components of a {@link Vec2} to the given values\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param x - X component\r\n   * @param y - Y component\r\n   * @returns `out`\r\n   */\r\n  static set(out: Vec2Like, x: number, y: number): Vec2Like {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static add(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Subtracts vector b from vector a\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static subtract(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec2.subtract}\r\n   * @category Static\r\n   */\r\n  static sub(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like { return [0, 0]; }\r\n\r\n  /**\r\n   * Multiplies two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static multiply(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec2.multiply}\r\n   * @category Static\r\n   */\r\n   static mul(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like { return [0, 0]; }\r\n\r\n  /**\r\n   * Divides two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static divide(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec2.divide}\r\n   * @category Static\r\n   */\r\n  static div(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like { return [0, 0]; }\r\n\r\n  /**\r\n   * Math.ceil the components of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to ceil\r\n   * @returns `out`\r\n   */\r\n  static ceil(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = Math.ceil(a[0]);\r\n    out[1] = Math.ceil(a[1]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Math.floor the components of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to floor\r\n   * @returns `out`\r\n   */\r\n  static floor(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = Math.floor(a[0]);\r\n    out[1] = Math.floor(a[1]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the minimum of two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static min(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = Math.min(a[0], b[0]);\r\n    out[1] = Math.min(a[1], b[1]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the maximum of two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static max(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = Math.max(a[0], b[0]);\r\n    out[1] = Math.max(a[1], b[1]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Math.round the components of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to round\r\n   * @returns `out`\r\n   */\r\n  static round(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = Math.round(a[0]);\r\n    out[1] = Math.round(a[1]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Scales a {@link Vec2} by a scalar number\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The vector to scale\r\n   * @param b - Amount to scale the vector by\r\n   * @returns `out`\r\n   */\r\n  static scale(out: Vec2Like, a: Readonly<Vec2Like>, b: number): Vec2Like {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two Vec2's after scaling the second operand by a scalar value\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @param scale - The amount to scale b by before adding\r\n   * @returns `out`\r\n   */\r\n  static scaleAndAdd(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>, scale: number): Vec2Like {\r\n    out[0] = a[0] + b[0] * scale;\r\n    out[1] = a[1] + b[1] * scale;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the euclidian distance between two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns distance between `a` and `b`\r\n   */\r\n  static distance(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\r\n    return Math.hypot(b[0] - a[0], b[1] - a[1]);\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec2.distance}\r\n   * @category Static\r\n   */\r\n  static dist(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared euclidian distance between two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns Squared distance between `a` and `b`\r\n   */\r\n  static squaredDistance(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\r\n    const x = b[0] - a[0];\r\n    const y = b[1] - a[1];\r\n    return x * x + y * y;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec2.distance}\r\n   * @category Static\r\n   */\r\n   static sqrDist(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the magnitude (length) of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param a - Vector to calculate magnitude of\r\n   * @returns Magnitude of a\r\n   */\r\n  static magnitude(a: Readonly<Vec2Like>): number {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    return Math.sqrt(x * x + y * y);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.magnitude}\r\n   * @category Static\r\n   */\r\n  static mag(a: Readonly<Vec2Like>): number { return 0; }\r\n  /**\r\n   * Alias for {@link Vec2.magnitude}\r\n   * @category Static\r\n   * @deprecated Use {@link Vec2.magnitude} to avoid conflicts with builtin `length` methods/attribs\r\n   *\r\n   * @param a - vector to calculate length of\r\n   * @returns length of a\r\n   */\r\n  // @ts-ignore: Length conflicts with Function.length\r\n  static length(a: Readonly<Vec2Like>): number { return 0; }\r\n  /**\r\n   * Alias for {@link Vec2.magnitude}\r\n   * @category Static\r\n   * @deprecated Use {@link Vec2.mag}\r\n   */\r\n  static len(a: Readonly<Vec2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared length of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param a - Vector to calculate squared length of\r\n   * @returns Squared length of a\r\n   */\r\n  static squaredLength(a: Readonly<Vec2Like>): number {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    return x * x + y * y;\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.squaredLength}\r\n   */\r\n  static sqrLen(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Negates the components of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to negate\r\n   * @returns `out`\r\n   */\r\n  static negate(out: Vec2Like, a: Readonly<Vec2Like>) {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the inverse of the components of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to invert\r\n   * @returns `out`\r\n   */\r\n  static inverse(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = 1.0 / a[0];\r\n    out[1] = 1.0 / a[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Normalize a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to normalize\r\n   * @returns `out`\r\n   */\r\n  static normalize(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    let len = x * x + y * y;\r\n    if (len > 0) {\r\n      //TODO: evaluate use of glm_invsqrt here?\r\n      len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the dot product of two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns Dot product of `a` and `b`\r\n   */\r\n  static dot(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\r\n    return a[0] * b[0] + a[1] * b[1];\r\n  }\r\n\r\n  /**\r\n   * Computes the cross product of two {@link Vec2}s\r\n   * Note that the cross product must by definition produce a 3D vector.\r\n   * For this reason there is also not instance equivalent for this function.\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static cross(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    const z = a[0] * b[1] - a[1] * b[0];\r\n    out[0] = out[1] = 0;\r\n    out[2] = z;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Performs a linear interpolation between two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @param t - Interpolation amount, in the range [0-1], between the two inputs\r\n   * @returns `out`\r\n   */\r\n  static lerp(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>, t: number): Vec2Like {\r\n    const ax = a[0];\r\n    const ay = a[1];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transforms the {@link Vec2} with a {@link Mat2}\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The vector to transform\r\n   * @param m - Matrix to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformMat2(out: Vec2Like, a: Readonly<Vec2Like>, m: Readonly<Mat2Like>): Vec2Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    out[0] = m[0] * x + m[2] * y;\r\n    out[1] = m[1] * x + m[3] * y;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transforms the {@link Vec2} with a {@link Mat2d}\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The vector to transform\r\n   * @param m - Matrix to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformMat2d(out: Vec2Like, a: Readonly<Vec2Like>, m: Readonly<Mat2dLike>): Vec2Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    out[0] = m[0] * x + m[2] * y + m[4];\r\n    out[1] = m[1] * x + m[3] * y + m[5];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transforms the {@link Vec2} with a {@link Mat3}\r\n   * 3rd vector component is implicitly '1'\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The vector to transform\r\n   * @param m - Matrix to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformMat3(out: Vec2Like, a: Readonly<Vec2Like>, m: Readonly<Mat3Like>): Vec2Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    out[0] = m[0] * x + m[3] * y + m[6];\r\n    out[1] = m[1] * x + m[4] * y + m[7];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transforms the {@link Vec2} with a {@link Mat4}\r\n   * 3rd vector component is implicitly '0'\r\n   * 4th vector component is implicitly '1'\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The vector to transform\r\n   * @param m - Matrix to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformMat4(out: Vec2Like, a: Readonly<Vec2Like>, m: Readonly<Mat4Like>): Vec2Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    out[0] = m[0] * x + m[4] * y + m[12];\r\n    out[1] = m[1] * x + m[5] * y + m[13];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotate a 2D vector\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving {@link Vec2}\r\n   * @param a - The {@link Vec2} point to rotate\r\n   * @param b - The origin of the rotation\r\n   * @param rad - The angle of rotation in radians\r\n   * @returns `out`\r\n   */\r\n  static rotate(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>, rad: number): Vec2Like {\r\n    //Translate point to the origin\r\n    const p0 = a[0] - b[0];\r\n    const p1 = a[1] - b[1];\r\n    const sinC = Math.sin(rad);\r\n    const cosC = Math.cos(rad);\r\n\r\n    //perform rotation and translate to correct position\r\n    out[0] = p0 * cosC - p1 * sinC + b[0];\r\n    out[1] = p0 * sinC + p1 * cosC + b[1];\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Get the angle between two 2D vectors\r\n   * @category Static\r\n   *\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns The angle in radians\r\n   */\r\n  static angle(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\r\n    const x1 = a[0];\r\n    const y1 = a[1];\r\n    const x2 = b[0];\r\n    const y2 = b[1];\r\n    // mag is the product of the magnitudes of a and b\r\n    const  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2);\r\n    // mag &&.. short circuits if mag == 0\r\n    const cosine = mag && (x1 * x2 + y1 * y2) / mag;\r\n    // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\r\n    return Math.acos(Math.min(Math.max(cosine, -1), 1));\r\n  }\r\n\r\n  /**\r\n   * Set the components of a {@link Vec2} to zero\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @returns `out`\r\n   */\r\n  static zero(out: Vec2Like): Vec2Like {\r\n    out[0] = 0.0;\r\n    out[1] = 0.0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n   * @category Static\r\n   *\r\n   * @param a - The first vector.\r\n   * @param b - The second vector.\r\n   * @returns `true` if the vectors components are ===, `false` otherwise.\r\n   */\r\n  static exactEquals(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): boolean {\r\n    return a[0] === b[0] && a[1] === b[1];\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the vectors have approximately the same elements in the same position.\r\n   * @category Static\r\n   *\r\n   * @param a - The first vector.\r\n   * @param b - The second vector.\r\n   * @returns `true` if the vectors are approximately equal, `false` otherwise.\r\n   */\r\n  static equals(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): boolean {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const b0 = b[0];\r\n    const b1 = b[1];\r\n    return (\r\n      Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n      Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of a vector\r\n   * @category Static\r\n   *\r\n   * @param a - Vector to represent as a string\r\n   * @returns String representation of the vector\r\n   */\r\n   static str(a: Readonly<Vec2Like>): string {\r\n    return `Vec2(${a.join(', ')})`;\r\n  }\r\n}\r\n\r\n// Instance method alias assignments\r\nVec2.prototype.sub = Vec2.prototype.subtract;\r\nVec2.prototype.mul = Vec2.prototype.multiply;\r\nVec2.prototype.div = Vec2.prototype.divide;\r\nVec2.prototype.dist = Vec2.prototype.distance;\r\nVec2.prototype.sqrDist = Vec2.prototype.squaredDistance;\r\n\r\n// Static method alias assignments\r\nVec2.sub = Vec2.subtract;\r\nVec2.mul = Vec2.multiply;\r\nVec2.div = Vec2.divide;\r\nVec2.dist = Vec2.distance;\r\nVec2.sqrDist = Vec2.squaredDistance;\r\nVec2.sqrLen = Vec2.squaredLength;\r\nVec2.mag = Vec2.magnitude;\r\nVec2.length = Vec2.magnitude;\r\nVec2.len = Vec2.magnitude;\r\n\r\n/**\r\n * Vec2 alias for backwards compatibility\r\n */\r\n export const vec2 = Vec2;", "import { Vec2 } from './vec2.js';\nimport { Vec3 } from './vec3.js';\nimport { Vec4 } from './vec4.js';\n\n// The contents of the following section are autogenerated by scripts/gen-swizzle.js and should\n// not be modified by hand.\n// [Swizzle Autogen]\n\n  const VEC2_SWIZZLES = ['xx','xy','yx','yy','xxx','xxy','xyx','xyy','yxx','yxy','yyx','yyy','xxxx','xxxy','xxyx','xxyy','xyxx','xyxy','xyyx','xyyy','yxxx','yxxy','yxyx','yxyy','yyxx','yyxy','yyyx','yyyy','rr','rg','gr','gg','rrr','rrg','rgr','rgg','grr','grg','ggr','ggg','rrrr','rrrg','rrgr','rrgg','rgrr','rgrg','rggr','rggg','grrr','grrg','grgr','grgg','ggrr','ggrg','gggr','gggg'];\n  const VEC3_SWIZZLES = ['xz','yz','zx','zy','zz','xxz','xyz','xzx','xzy','xzz','yxz','yyz','yzx','yzy','yzz','zxx','zxy','zxz','zyx','zyy','zyz','zzx','zzy','zzz','xxxz','xxyz','xxzx','xxzy','xxzz','xyxz','xyyz','xyzx','xyzy','xyzz','xzxx','xzxy','xzxz','xzyx','xzyy','xzyz','xzzx','xzzy','xzzz','yxxz','yxyz','yxzx','yxzy','yxzz','yyxz','yyyz','yyzx','yyzy','yyzz','yzxx','yzxy','yzxz','yzyx','yzyy','yzyz','yzzx','yzzy','yzzz','zxxx','zxxy','zxxz','zxyx','zxyy','zxyz','zxzx','zxzy','zxzz','zyxx','zyxy','zyxz','zyyx','zyyy','zyyz','zyzx','zyzy','zyzz','zzxx','zzxy','zzxz','zzyx','zzyy','zzyz','zzzx','zzzy','zzzz','rb','gb','br','bg','bb','rrb','rgb','rbr','rbg','rbb','grb','ggb','gbr','gbg','gbb','brr','brg','brb','bgr','bgg','bgb','bbr','bbg','bbb','rrrb','rrgb','rrbr','rrbg','rrbb','rgrb','rggb','rgbr','rgbg','rgbb','rbrr','rbrg','rbrb','rbgr','rbgg','rbgb','rbbr','rbbg','rbbb','grrb','grgb','grbr','grbg','grbb','ggrb','gggb','ggbr','ggbg','ggbb','gbrr','gbrg','gbrb','gbgr','gbgg','gbgb','gbbr','gbbg','gbbb','brrr','brrg','brrb','brgr','brgg','brgb','brbr','brbg','brbb','bgrr','bgrg','bgrb','bggr','bggg','bggb','bgbr','bgbg','bgbb','bbrr','bbrg','bbrb','bbgr','bbgg','bbgb','bbbr','bbbg','bbbb'];\n  const VEC4_SWIZZLES = ['xw','yw','zw','wx','wy','wz','ww','xxw','xyw','xzw','xwx','xwy','xwz','xww','yxw','yyw','yzw','ywx','ywy','ywz','yww','zxw','zyw','zzw','zwx','zwy','zwz','zww','wxx','wxy','wxz','wxw','wyx','wyy','wyz','wyw','wzx','wzy','wzz','wzw','wwx','wwy','wwz','www','xxxw','xxyw','xxzw','xxwx','xxwy','xxwz','xxww','xyxw','xyyw','xyzw','xywx','xywy','xywz','xyww','xzxw','xzyw','xzzw','xzwx','xzwy','xzwz','xzww','xwxx','xwxy','xwxz','xwxw','xwyx','xwyy','xwyz','xwyw','xwzx','xwzy','xwzz','xwzw','xwwx','xwwy','xwwz','xwww','yxxw','yxyw','yxzw','yxwx','yxwy','yxwz','yxww','yyxw','yyyw','yyzw','yywx','yywy','yywz','yyww','yzxw','yzyw','yzzw','yzwx','yzwy','yzwz','yzww','ywxx','ywxy','ywxz','ywxw','ywyx','ywyy','ywyz','ywyw','ywzx','ywzy','ywzz','ywzw','ywwx','ywwy','ywwz','ywww','zxxw','zxyw','zxzw','zxwx','zxwy','zxwz','zxww','zyxw','zyyw','zyzw','zywx','zywy','zywz','zyww','zzxw','zzyw','zzzw','zzwx','zzwy','zzwz','zzww','zwxx','zwxy','zwxz','zwxw','zwyx','zwyy','zwyz','zwyw','zwzx','zwzy','zwzz','zwzw','zwwx','zwwy','zwwz','zwww','wxxx','wxxy','wxxz','wxxw','wxyx','wxyy','wxyz','wxyw','wxzx','wxzy','wxzz','wxzw','wxwx','wxwy','wxwz','wxww','wyxx','wyxy','wyxz','wyxw','wyyx','wyyy','wyyz','wyyw','wyzx','wyzy','wyzz','wyzw','wywx','wywy','wywz','wyww','wzxx','wzxy','wzxz','wzxw','wzyx','wzyy','wzyz','wzyw','wzzx','wzzy','wzzz','wzzw','wzwx','wzwy','wzwz','wzww','wwxx','wwxy','wwxz','wwxw','wwyx','wwyy','wwyz','wwyw','wwzx','wwzy','wwzz','wwzw','wwwx','wwwy','wwwz','wwww','ra','ga','ba','ar','ag','ab','aa','rra','rga','rba','rar','rag','rab','raa','gra','gga','gba','gar','gag','gab','gaa','bra','bga','bba','bar','bag','bab','baa','arr','arg','arb','ara','agr','agg','agb','aga','abr','abg','abb','aba','aar','aag','aab','aaa','rrra','rrga','rrba','rrar','rrag','rrab','rraa','rgra','rgga','rgba','rgar','rgag','rgab','rgaa','rbra','rbga','rbba','rbar','rbag','rbab','rbaa','rarr','rarg','rarb','rara','ragr','ragg','ragb','raga','rabr','rabg','rabb','raba','raar','raag','raab','raaa','grra','grga','grba','grar','grag','grab','graa','ggra','ggga','ggba','ggar','ggag','ggab','ggaa','gbra','gbga','gbba','gbar','gbag','gbab','gbaa','garr','garg','garb','gara','gagr','gagg','gagb','gaga','gabr','gabg','gabb','gaba','gaar','gaag','gaab','gaaa','brra','brga','brba','brar','brag','brab','braa','bgra','bgga','bgba','bgar','bgag','bgab','bgaa','bbra','bbga','bbba','bbar','bbag','bbab','bbaa','barr','barg','barb','bara','bagr','bagg','bagb','baga','babr','babg','babb','baba','baar','baag','baab','baaa','arrr','arrg','arrb','arra','argr','argg','argb','arga','arbr','arbg','arbb','arba','arar','arag','arab','araa','agrr','agrg','agrb','agra','aggr','aggg','aggb','agga','agbr','agbg','agbb','agba','agar','agag','agab','agaa','abrr','abrg','abrb','abra','abgr','abgg','abgb','abga','abbr','abbg','abbb','abba','abar','abag','abab','abaa','aarr','aarg','aarb','aara','aagr','aagg','aagb','aaga','aabr','aabg','aabb','aaba','aaar','aaag','aaab','aaaa'];\n\n// [/Swizzle Autogen]\n\nconst SWIZZLE_INDEX = {\n  x: 0,    r: 0,\n  y: 1,    g: 1,\n  z: 2,    b: 2,\n  w: 3,    a: 3,\n};\n\nfunction getSwizzleImpl(swizzle: string): () => any {\n  switch(swizzle.length) {\n    case 2:\n      return function() { return new Vec2(this[SWIZZLE_INDEX[swizzle[0]]], this[SWIZZLE_INDEX[swizzle[1]]]); };\n    case 3:\n      return function() { return new Vec3(this[SWIZZLE_INDEX[swizzle[0]]], this[SWIZZLE_INDEX[swizzle[1]]], this[SWIZZLE_INDEX[swizzle[2]]]); };\n    case 4:\n      return function() { return new Vec4(this[SWIZZLE_INDEX[swizzle[0]]], this[SWIZZLE_INDEX[swizzle[1]]], this[SWIZZLE_INDEX[swizzle[2]]], this[SWIZZLE_INDEX[swizzle[3]]]); };\n  }\n}\n\nlet swizzlesEnabled = false;\n\n/**\n * Enables Swizzle operations on {@link Vec2}, {@link Vec3}, and {@link Vec4} types.\n *\n * Swizzle operations are performed by using the `.` operator in conjunction with any combination\n * of between two to four component names, either from the set `xyzw` or `rgbw` (though not intermixed).\n * They return a new vector with the same number of components as specified in the swizzle attribute.\n *\n * @example\n * ```js\n * import { Vec3, EnableSwizzles } from 'gl-matrix';\n *\n * EnableSwizzles();\n *\n * let v = new Vec3(0, 1, 2);\n *\n * v.yx // returns new Vec2(1, 0);\n * v.xzy // returns new Vec3(0, 2, 1);\n * v.zyxz // returns new Vec4(2, 1, 0, 2);\n *\n * v.rgb // returns new Vec3(0, 1, 2);\n * v.rbg // returns new Vec3(0, 2, 1);\n * v.gg // returns new Vec2(1, 1);\n * ```\n */\nexport function EnableSwizzles() {\n  if (swizzlesEnabled) { return; }\n\n  for (const swizzle of VEC2_SWIZZLES) {\n    const impl = getSwizzleImpl(swizzle);\n    Object.defineProperty(Vec2.prototype, swizzle, {\n      get: impl\n    });\n    Object.defineProperty(Vec3.prototype, swizzle, {\n      get: impl\n    });\n    Object.defineProperty(Vec4.prototype, swizzle, {\n      get: impl\n    });\n  }\n\n  for (const swizzle of VEC3_SWIZZLES) {\n    const impl = getSwizzleImpl(swizzle);\n    Object.defineProperty(Vec3.prototype, swizzle, {\n      get: impl\n    });\n    Object.defineProperty(Vec4.prototype, swizzle, {\n      get: impl\n    });\n  }\n\n  for (const swizzle of VEC4_SWIZZLES) {\n    const impl = getSwizzleImpl(swizzle);\n    Object.defineProperty(Vec4.prototype, swizzle, {\n      get: impl\n    });\n  }\n\n  swizzlesEnabled = true;\n}\n\n"],
  "mappings": "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",
  "names": ["IDENTITY_2X2", "_Mat2", "values", "v", "a", "b", "rad", "out", "a1", "a0", "a2", "a3", "det", "b0", "b1", "b2", "b3", "s", "c", "v0", "v1", "scale", "L", "D", "U", "Mat2", "__publicField", "mat2", "IDENTITY_2X3", "_Mat2d", "values", "v", "a", "b", "rad", "out", "aa", "ab", "ac", "ad", "atx", "aty", "det", "a0", "a1", "a2", "a3", "a4", "a5", "b0", "b1", "b2", "b3", "b4", "b5", "v0", "v1", "s", "c", "scale", "Mat2d", "__publicField", "mat2d", "IDENTITY_3X3", "_Mat3", "values", "v", "a", "b", "rad", "out", "a01", "a02", "a12", "a00", "a10", "a11", "a20", "a21", "a22", "b01", "b11", "b21", "det", "b0", "b1", "b2", "x", "y", "s", "c", "q", "z", "w", "x2", "y2", "z2", "xx", "yx", "yy", "zx", "zy", "zz", "wx", "wy", "wz", "a03", "a13", "a23", "a30", "a31", "a32", "a33", "b00", "b02", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "b10", "width", "height", "scale", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "b3", "b4", "b5", "b6", "b7", "b8", "Mat3", "__publicField", "mat3", "_Vec3", "values", "v", "value", "x", "y", "z", "a", "b", "scale", "out", "len", "ax", "ay", "az", "bx", "by", "bz", "t", "angle", "sinTotal", "ratioA", "ratioB", "c", "d", "factorTimes2", "factor1", "factor2", "factor3", "factor4", "inverseFactor", "inverseFactorTimesTwo", "m", "w", "q", "qx", "qy", "qz", "w2", "uvx", "uvy", "uvz", "uuvx", "uuvy", "uuvz", "rad", "py", "pz", "px", "mag", "cosine", "a0", "a1", "a2", "b0", "b1", "b2", "Vec3", "__publicField", "vec3", "IDENTITY_4X4", "_Mat4", "values", "v", "a", "b", "rad", "axis", "fovy", "aspect", "near", "far", "left", "right", "bottom", "top", "out", "a01", "a02", "a03", "a12", "a13", "a23", "a00", "a10", "a11", "a20", "a21", "a22", "a30", "a31", "a32", "a33", "b00", "b01", "b02", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "b10", "b11", "det", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "x", "y", "z", "len", "s", "c", "t", "b12", "b20", "b21", "b22", "q", "w", "x2", "y2", "z2", "xx", "xy", "xz", "yy", "yz", "zz", "wx", "wy", "wz", "translation", "Vec3", "bx", "by", "bz", "bw", "ax", "ay", "az", "aw", "magnitude", "mat", "m11", "m12", "m13", "m21", "m22", "m23", "m31", "m32", "m33", "tmpVec3", "is1", "is2", "is3", "sm11", "sm12", "sm13", "sm21", "sm22", "sm23", "sm31", "sm32", "sm33", "trace", "S", "out_r", "out_t", "out_s", "sx", "sy", "sz", "o", "ox", "oy", "oz", "out0", "out1", "out2", "out4", "out5", "out6", "out8", "out9", "out10", "yx", "zx", "zy", "rl", "tb", "nf", "f", "fov", "upTan", "downTan", "leftTan", "rightTan", "xScale", "yScale", "lr", "bt", "eye", "center", "up", "eyex", "eyey", "eyez", "upx", "upy", "upz", "centerx", "centery", "centerz", "z0", "z1", "x0", "x1", "y0", "y1", "target", "scale", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "a14", "a15", "b13", "b14", "b15", "Mat4", "__publicField", "mat4", "_Vec4", "values", "v", "value", "x", "y", "z", "w", "a", "b", "scale", "out", "len", "u", "c", "d", "e", "f", "g", "h", "i", "j", "t", "ax", "ay", "az", "aw", "m", "q", "qx", "qy", "qz", "qw", "ix", "iy", "iz", "iw", "a0", "a1", "a2", "a3", "b0", "b1", "b2", "b3", "Vec4", "__publicField", "vec4", "_Quat", "values", "v", "value", "x", "y", "z", "w", "a", "b", "rad", "scale", "out", "axis", "s", "out_axis", "q", "dotproduct", "ax", "ay", "az", "aw", "bx", "by", "bz", "bw", "r", "et", "t", "scale0", "scale1", "cosom", "omega", "sinom", "a0", "a1", "a2", "a3", "dot", "invDot", "m", "fTrace", "fRoot", "i", "j", "k", "halfToRad", "sx", "cx", "sy", "cy", "sz", "cz", "Vec3", "tmpVec3", "xUnitVec3", "yUnitVec3", "c", "d", "temp1", "temp2", "view", "right", "up", "tempMat3", "Quat", "__publicField", "Mat3", "Vec4", "quat", "_Quat2", "values", "v", "a", "x1", "y1", "z1", "w1", "x2", "y2", "z2", "w2", "ax", "ay", "az", "out", "q", "t", "bx", "by", "bz", "bw", "Mat4", "tempQuat", "tempVec3", "aw", "ax1", "ay1", "az1", "aw1", "bx1", "by1", "bz1", "ax2", "ay2", "az2", "aw2", "rad", "Quat", "qx", "qy", "qz", "qw", "axis", "axisLength", "b", "ax0", "ay0", "az0", "aw0", "bw1", "bx0", "by0", "bz0", "bw0", "mt", "sqlen", "magnitude", "a0", "a1", "a2", "a3", "b0", "b1", "b2", "b3", "a_dot_b", "a4", "a5", "a6", "a7", "b4", "b5", "b6", "b7", "Quat2", "__publicField", "Vec3", "quat2", "_Vec2", "values", "v", "value", "x", "y", "a", "b", "scale", "out", "len", "z", "t", "ax", "ay", "m", "rad", "p0", "p1", "sinC", "cosC", "x1", "y1", "x2", "y2", "mag", "cosine", "a0", "a1", "b0", "b1", "Vec2", "__publicField", "vec2", "VEC2_SWIZZLES", "VEC3_SWIZZLES", "VEC4_SWIZZLES", "SWIZZLE_INDEX", "getSwizzleImpl", "swizzle", "Vec2", "Vec3", "Vec4", "swizzlesEnabled", "EnableSwizzles", "impl"]
}
